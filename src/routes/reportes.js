const router = require("express").Router();
const bodyParser = require("body-parser");
const cors = require("cors");
const clienteDB = require("../models/cliente");
const stockDB = require("../models/stock");
const usersDB = require("../models/users");
const vendedorDB = require("../models/vendedor");
const facturaDB = require("../models/factura");
const pendientesDB = require("../models/pendientes");
const catalogoDB = require("../models/Catalogo");
const contadorDB = require("../models/contador");
const proveedorDB = require("../models/proveedor");
const cotizacionDB = require("../models/cotizacion");
const transporteDB = require("../models/transporte");
const agendaDB = require("../models/agenda");
const ordenesProveedorDB = require("../models/orden-compras-proveedor")
const { isAuthenticatedFacturacion } = require("../helpers/auth");
const { isAuthenticatedCobranza } = require("../helpers/auth");
const { isAuthenticatedInventario } = require("../helpers/auth");
const { isAuthenticatedProveedor } = require("../helpers/auth");
const { isAuthenticatedCliente } = require("../helpers/auth");
const { isAuthenticatedVendedor } = require("../helpers/auth");
const { isAuthenticatedMaster } = require("../helpers/auth");
const users = require("../models/users");

//ruta para descargar reporte de stock
router.post( "/facturacion/reporte-stock", isAuthenticatedInventario,
  async (req, res) => {
    let { Formato, MayoresACero, Costos, Producto, Estado } = req.body;



    const xl = require("excel4node");

    const wb = new xl.Workbook();

    const ws = wb.addWorksheet("Stock Thomson");

    const style = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#FFFF00",
        fgColor: "#FFFF00",
      },
    });

    const styleTotal = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#EE0A1F",
        fgColor: "#EE0A1F",
      },
    });

    if(Estado == "SinStock"){
      if (Formato == "Excel") {
        if (Producto == "AMORTIGUADOR") {
          if (MayoresACero == 1) {
            let stock = await stockDB
              .find({
                $and: [
                  { CantidadTotal:  0  },
                  { TipoProducto: "AMORTIGUADOR" },
                ],
              })
              .sort({TipoProducto: 1,  Modelo: 1 });
            if (Costos == "CostoFOB") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo FOB").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo FOB total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoFOBTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costoFOB.xlsx", res);
            }
            if (Costos == "Costo") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo FOB total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo.xlsx", res);
            }
            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo gran mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo gran mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoGranMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_gran_mayor.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_mayor.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo detal").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_detal.xlsx", res);
            }
            if (Costos == "Todos") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Costo gran mayor").style(style);
              ws.cell(1, 9).string("Costo mayor").style(style);
              ws.cell(1, 10).string("Costo detal").style(style);
              ws.cell(1, 11).string("Cantidad Total").style(style);
              ws.cell(1, 12).string("Costo total").style(style);
              ws.cell(1, 13).string("Costo FOB total").style(style);
              ws.cell(1, 14).string("Costo gran mayor total").style(style);
              ws.cell(1, 15).string("Costo mayor total").style(style);
              ws.cell(1, 16).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
  
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                costo += +stock[i].CostoTotal;
                fob += +stock[i].CostoFOBTotal;
                gran += +stock[i].CostoGranMayorTotal;
                mayor += +stock[i].CostoMayorTotal;
                detal += ++stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 10).string("Totales").style(styleTotal);
              ws.cell(fila, 11).number(cantidad);
              ws.cell(fila, 12).number(costo);
              ws.cell(fila, 13).number(fob);
              ws.cell(fila, 14).number(gran);
              ws.cell(fila, 15).number(mayor);
              ws.cell(fila, 16).number(detal);
  
              wb.write("Stock.xlsx", res);
            }
          } else {
            let stock = await stockDB
              .find({ TipoProducto: "AMORTIGUADOR" })
              .sort({TipoProducto: 1,  Modelo: 1 });
            if (Costos == "CostoFOB") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo FOB").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo FOB total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoFOBTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costoFOB.xlsx", res);
            }
            if (Costos == "Costo") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo.xlsx", res);
            }
            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo gran mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo gran mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoGranMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_gran_mayor.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_mayor.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo detal").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_detal.xlsx", res);
            }
            if (Costos == "Todos") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Costo gran mayor").style(style);
              ws.cell(1, 9).string("Costo mayor").style(style);
              ws.cell(1, 10).string("Costo detal").style(style);
              ws.cell(1, 11).string("Cantidad Total").style(style);
              ws.cell(1, 12).string("Costo total").style(style);
              ws.cell(1, 13).string("Costo FOB total").style(style);
              ws.cell(1, 14).string("Costo gran mayor total").style(style);
              ws.cell(1, 15).string("Costo mayor total").style(style);
              ws.cell(1, 16).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
  
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                costo += +stock[i].CostoTotal;
                fob += +stock[i].CostoFOBTotal;
                gran += +stock[i].CostoGranMayorTotal;
                mayor += +stock[i].CostoMayorTotal;
                detal += ++stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 10).string("Totales").style(styleTotal);
              ws.cell(fila, 11).number(cantidad);
              ws.cell(fila, 12).number(costo);
              ws.cell(fila, 13).number(fob);
              ws.cell(fila, 14).number(gran);
              ws.cell(fila, 15).number(mayor);
              ws.cell(fila, 16).number(detal);
  
              wb.write("Stock.xlsx", res);
            }
          }
        }
        if (Producto == "BASE DE AMORTIGUADOR") {
          if (MayoresACero == 1) {
            let stock = await stockDB
              .find({
                $and: [{ CantidadTotal:   0  }, { TipoProducto: "BASE DE AMORTIGUADOR" }],
              })
              .sort({TipoProducto: 1,  Modelo: 1 });
            if (Costos == "CostoFOB") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo FOB").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo FOB total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoFOBTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costoFOB.xlsx", res);
            }
            if (Costos == "Costo") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo.xlsx", res);
            }
            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo gran mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo gran mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoGranMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_gran_mayor.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_mayor.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo detal").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_detal.xlsx", res);
            }
            if (Costos == "Todos") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Costo gran mayor").style(style);
              ws.cell(1, 9).string("Costo mayor").style(style);
              ws.cell(1, 10).string("Costo detal").style(style);
              ws.cell(1, 11).string("Cantidad Total").style(style);
              ws.cell(1, 12).string("Costo total").style(style);
              ws.cell(1, 1).string("Costo FOB total").style(style);
              ws.cell(1, 14).string("Costo gran mayor total").style(style);
              ws.cell(1, 15).string("Costo mayor total").style(style);
              ws.cell(1, 16).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
  
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                costo += +stock[i].CostoTotal;
                fob += +stock[i].CostoFOBTotal;
                gran += +stock[i].CostoGranMayorTotal;
                mayor += +stock[i].CostoMayorTotal;
                detal += ++stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 10).string("Totales").style(styleTotal);
              ws.cell(fila, 11).number(cantidad);
              ws.cell(fila, 12).number(costo);
              ws.cell(fila, 13).number(fob);
              ws.cell(fila, 14).number(gran);
              ws.cell(fila, 15).number(mayor);
              ws.cell(fila, 16).number(detal);
  
              wb.write("Stock.xlsx", res);
            }
          } else {
            let stock = await stockDB
              .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
              .sort({TipoProducto: 1,  Modelo: 1 });
            if (Costos == "CostoFOB") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo FOB").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo FOB total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoFOBTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costoFOB.xlsx", res);
            }
            if (Costos == "Costo") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo.xlsx", res);
            }
            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo gran mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo gran mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoGranMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_gran_mayor.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_mayor.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo detal").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_detal.xlsx", res);
            }
            if (Costos == "Todos") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Costo gran mayor").style(style);
              ws.cell(1, 9).string("Costo mayor").style(style);
              ws.cell(1, 10).string("Costo detal").style(style);
              ws.cell(1, 11).string("Cantidad Total").style(style);
              ws.cell(1, 12).string("Costo total").style(style);
              ws.cell(1, 1).string("Costo FOB total").style(style);
              ws.cell(1, 14).string("Costo gran mayor total").style(style);
              ws.cell(1, 15).string("Costo mayor total").style(style);
              ws.cell(1, 16).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
  
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                costo += +stock[i].CostoTotal;
                fob += +stock[i].CostoFOBTotal;
                gran += +stock[i].CostoGranMayorTotal;
                mayor += +stock[i].CostoMayorTotal;
                detal += ++stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 10).string("Totales").style(styleTotal);
              ws.cell(fila, 11).number(cantidad);
              ws.cell(fila, 12).number(costo);
              ws.cell(fila, 13).number(fob);
              ws.cell(fila, 14).number(gran);
              ws.cell(fila, 15).number(mayor);
              ws.cell(fila, 16).number(detal);
  
              wb.write("Stock.xlsx", res);
            }
          }
        }
        if (Producto == "GUARDAPOLVO") {
          if (MayoresACero == 1) {
            let stock = await stockDB
              .find({
                $and: [
                  { CantidadTotal: 0  },
                  { TipoProducto: "GUARDAPOLVO" },
                ],
              })
              .sort({TipoProducto: 1,  Modelo: 1 });
            if (Costos == "CostoFOB") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo FOB").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo FOB total").style(style);
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoFOBTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costoFOB.xlsx", res);
            }
            if (Costos == "Costo") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo.xlsx", res);
            }
            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo gran mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo gran mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoGranMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_gran_mayor.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_mayor.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo detal").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_detal.xlsx", res);
            }
            if (Costos == "Todos") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Costo gran mayor").style(style);
              ws.cell(1, 9).string("Costo mayor").style(style);
              ws.cell(1, 10).string("Costo detal").style(style);
              ws.cell(1, 11).string("Cantidad Total").style(style);
              ws.cell(1, 12).string("Costo total").style(style);
              ws.cell(1, 1).string("Costo FOB total").style(style);
              ws.cell(1, 14).string("Costo gran mayor total").style(style);
              ws.cell(1, 15).string("Costo mayor total").style(style);
              ws.cell(1, 16).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
  
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                costo += +stock[i].CostoTotal;
                fob += +stock[i].CostoFOBTotal;
                gran += +stock[i].CostoGranMayorTotal;
                mayor += +stock[i].CostoMayorTotal;
                detal += ++stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 10).string("Totales").style(styleTotal);
              ws.cell(fila, 11).number(cantidad);
              ws.cell(fila, 12).number(costo);
              ws.cell(fila, 13).number(fob);
              ws.cell(fila, 14).number(gran);
              ws.cell(fila, 15).number(mayor);
              ws.cell(fila, 16).number(detal);
  
              wb.write("Stock.xlsx", res);
            }
          } else {
            let stock = await stockDB
              .find({ TipoProducto: "GUARDAPOLVO" })
              .sort({TipoProducto: 1,  Modelo: 1 });
            if (Costos == "CostoFOB") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo FOB").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo FOB total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoFOBTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costoFOB.xlsx", res);
            }
            if (Costos == "Costo") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo.xlsx", res);
            }
            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo gran mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo gran mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoGranMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_gran_mayor.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_mayor.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo detal").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_detal.xlsx", res);
            }
            if (Costos == "Todos") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Costo gran mayor").style(style);
              ws.cell(1, 9).string("Costo mayor").style(style);
              ws.cell(1, 10).string("Costo detal").style(style);
              ws.cell(1, 11).string("Cantidad Total").style(style);
              ws.cell(1, 12).string("Costo total").style(style);
              ws.cell(1, 1).string("Costo FOB total").style(style);
              ws.cell(1, 14).string("Costo gran mayor total").style(style);
              ws.cell(1, 15).string("Costo mayor total").style(style);
              ws.cell(1, 16).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
  
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                costo += +stock[i].CostoTotal;
                fob += +stock[i].CostoFOBTotal;
                gran += +stock[i].CostoGranMayorTotal;
                mayor += +stock[i].CostoMayorTotal;
                detal += ++stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 10).string("Totales").style(styleTotal);
              ws.cell(fila, 11).number(cantidad);
              ws.cell(fila, 12).number(costo);
              ws.cell(fila, 13).number(fob);
              ws.cell(fila, 14).number(gran);
              ws.cell(fila, 15).number(mayor);
              ws.cell(fila, 16).number(detal);
  
              wb.write("Stock.xlsx", res);
            }
          }
        }
        if (Producto == "TODOS") {
          if (MayoresACero == 1) {
            let stock = await stockDB
              .find({CantidadTotal:  0 })
              .sort({TipoProducto: 1,  Modelo: 1 });
            if (Costos == "CostoFOB") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo FOB").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo FOB total").style(style);
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoFOBTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costoFOB.xlsx", res);
            }
            if (Costos == "Costo") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo.xlsx", res);
            }
            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo gran mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo gran mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoGranMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_gran_mayor.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_mayor.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo detal").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_detal.xlsx", res);
            }
            if (Costos == "Todos") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Costo gran mayor").style(style);
              ws.cell(1, 9).string("Costo mayor").style(style);
              ws.cell(1, 10).string("Costo detal").style(style);
              ws.cell(1, 11).string("Cantidad Total").style(style);
              ws.cell(1, 12).string("Costo total").style(style);
              ws.cell(1, 1).string("Costo FOB total").style(style);
              ws.cell(1, 14).string("Costo gran mayor total").style(style);
              ws.cell(1, 15).string("Costo mayor total").style(style);
              ws.cell(1, 16).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
  
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                costo += +stock[i].CostoTotal;
                fob += +stock[i].CostoFOBTotal;
                gran += +stock[i].CostoGranMayorTotal;
                mayor += +stock[i].CostoMayorTotal;
                detal += ++stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 10).string("Totales").style(styleTotal);
              ws.cell(fila, 11).number(cantidad);
              ws.cell(fila, 12).number(costo);
              ws.cell(fila, 13).number(fob);
              ws.cell(fila, 14).number(gran);
              ws.cell(fila, 15).number(mayor);
              ws.cell(fila, 16).number(detal);
  
              wb.write("Stock.xlsx", res);
            }
          } else {
            let stock = await stockDB.find().sort({TipoProducto: 1,  Modelo: 1 });
            if (Costos == "CostoFOB") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo FOB").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo FOB total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoFOBTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costoFOB.xlsx", res);
            }
            if (Costos == "Costo") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo.xlsx", res);
            }
            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo gran mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo gran mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoGranMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_gran_mayor.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo mayor").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo mayor total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoMayorTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_mayor.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo detal").style(style);
              ws.cell(1, 7).string("Cantidad Total").style(style);
              ws.cell(1, 8).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                precioTotal += +stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 6).string("Totales").style(styleTotal);
              ws.cell(fila, 7).number(cantidad);
              ws.cell(fila, 8).number(precioTotal);
  
              wb.write("Stock_costo_detal.xlsx", res);
            }
            if (Costos == "Todos") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Costo gran mayor").style(style);
              ws.cell(1, 9).string("Costo mayor").style(style);
              ws.cell(1, 10).string("Costo detal").style(style);
              ws.cell(1, 11).string("Cantidad Total").style(style);
              ws.cell(1, 12).string("Costo total").style(style);
              ws.cell(1, 1).string("Costo FOB total").style(style);
              ws.cell(1, 14).string("Costo gran mayor total").style(style);
              ws.cell(1, 15).string("Costo mayor total").style(style);
              ws.cell(1, 16).string("Costo detal total").style(style);
  
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
  
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
  
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].Costo);
                ws.cell(fila, columna++).number(stock[i].CostoFOB);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);
                ws.cell(fila, columna++).number(stock[i].CantidadTotal);
                ws.cell(fila, columna++).number(stock[i].CostoTotal);
                ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
                ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);
  
                cantidad += +stock[i].CantidadTotal;
                costo += +stock[i].CostoTotal;
                fob += +stock[i].CostoFOBTotal;
                gran += +stock[i].CostoGranMayorTotal;
                mayor += +stock[i].CostoMayorTotal;
                detal += ++stock[i].CostoDetalTotal;
  
                fila++;
              }
  
              fila++;
  
              ws.cell(fila, 10).string("Totales").style(styleTotal);
              ws.cell(fila, 11).number(cantidad);
              ws.cell(fila, 12).number(costo);
              ws.cell(fila, 13).number(fob);
              ws.cell(fila, 14).number(gran);
              ws.cell(fila, 15).number(mayor);
              ws.cell(fila, 16).number(detal);
  
              wb.write("Stock.xlsx", res);
            }
          }
        }
      }
      //empieza pdf
      if (Formato == "PDF") {
        if (MayoresACero == 1) {
          let Stock;
  
          if (Producto == "AMORTIGUADOR") {
            let stock = await stockDB
              .find({
                $and: [
                  { CantidadTotal: 0  },
                  { TipoProducto: "AMORTIGUADOR" },
                ],
              })
              .sort({TipoProducto: 1,  Modelo: 1 })
              .then((document) => {
                const contex = {
                  stocks: document.map((document) => {
                    return {
                      CodigoT: document.CodigoT,
                      CodigoG: document.CodigoG,
                      Modelo: document.Modelo,
                      Posicion: (document.Posicion).toUpperCase(),
                      CantidadTotal: document.CantidadTotal,
                      CostoFOB: document.CostoFOB.toFixed(2),
                      CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                      TipoProducto: (document.TipoProducto).toUpperCase(),
                      Costo: document.Costo.toFixed(2),
                      CostoTotal: document.CostoTotal.toFixed(2),
                      CostoGranMayor: document.CostoGranMayor.toFixed(2),
                      CostoGranMayorTotal:
                      document.CostoGranMayorTotal.toFixed(2),
                      CostoMayor: document.CostoMayor.toFixed(2),
                      Vehiculo: document.Vehiculo,
                      Posicion: (document.Posicion).toUpperCase(),
                      CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                      CostoDetal: document.CostoDetal.toFixed(2),
                      CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                    };
                  }),
                };
                for (i = 0; i < contex.stocks.length; i++) {
                  let Descripcion = "";
                  let PorcentajeCosto
                  let PorcentajeCostoGranMayor
                  let PorcentajeCostoMayor
                  let PorcentajeCostoDetal
                  for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                    if (
                      contex.stocks[i].Vehiculo[x].Modelo ==
                      contex.stocks[i].Vehiculo[
                        contex.stocks[i].Vehiculo.length - 1
                      ].Modelo
                    ) {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                    } else {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                    }
                  }
                  contex.stocks[i].Descripcion = Descripcion;
                  PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                  PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                  
                  contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                  contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                  contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                  contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
                }
                Stock = contex.stocks;
              });
  
            if (Costos == "CostoFOB") {
              let Titulo = "Costo FOB - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_fob", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Costo - Sin stock") {
              let Titulo = "Report de stock con costo";
              res.render("facturacion/reporte_pdf/stock_pdf_costo", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "GranMayor - Sin stock") {
              let Titulo = "Reporte de stock con costo gran Mayor";
              res.render("facturacion/reporte_pdf/stock_pdf_gran", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor - Sin stock") {
              let Titulo = "Resporte de stock con costo mayor";
              res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal - Sin stock") {
              let Titulo = "Reporte de stock con costo detal";
              res.render("facturacion/reporte_pdf/stock_pdf_detal", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Todos -Sin stock") {
              res.redirect("/facturacion/reporte-stock");
            }
          }
          if (Producto == "BASE DE AMORTIGUADOR") {
            let stock = await stockDB
              .find({
                $and: [{ CantidadTotal:  0  }, { TipoProducto: "BASE DE AMORTIGUADOR" }],
              })
              .sort({TipoProducto: 1,  Modelo: 1 })
              .then((document) => {
                const contex = {
                  stocks: document.map((document) => {
                    return {
                      CodigoT: document.CodigoT,
                      CodigoG: document.CodigoG,
                      Modelo: document.Modelo,
                      Vehiculo: document.Vehiculo,
                      CantidadTotal: document.CantidadTotal,
                      CostoFOB: document.CostoFOB.toFixed(2),
                      CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                      TipoProducto: (document.TipoProducto).toUpperCase(),
                      Costo: document.Costo.toFixed(2),
                      CostoTotal: document.CostoTotal.toFixed(2),
                      CostoGranMayor: document.CostoGranMayor.toFixed(2),
                      CostoGranMayorTotal:
                      document.CostoGranMayorTotal.toFixed(2),
                      Vehiculo: document.Vehiculo,
                      Posicion: (document.Posicion).toUpperCase(),
                      CostoMayor: (document.CostoMayor).toFixed(2),
                      CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                      CostoDetal: document.CostoDetal.toFixed(2),
                      CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                    };
                  }),
                };
                for (i = 0; i < contex.stocks.length; i++) {
                  let Descripcion = "";
                  let PorcentajeCosto
                  let PorcentajeCostoGranMayor
                  let PorcentajeCostoMayor
                  let PorcentajeCostoDetal
                  for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                    if (
                      contex.stocks[i].Vehiculo[x].Modelo ==
                      contex.stocks[i].Vehiculo[
                        contex.stocks[i].Vehiculo.length - 1
                      ].Modelo
                    ) {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                    } else {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                    }
                  }
                  contex.stocks[i].Descripcion = Descripcion;
                  PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                  PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                  
                  contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                  contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                  contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                  contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
                }
                Stock = contex.stocks;
              });
  
            if (Costos == "CostoFOB") {
              let Titulo = "Costo FOB - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_fob", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Costo - Sin stock") {
              let Titulo = "Report de stock con costo";
              res.render("facturacion/reporte_pdf/stock_pdf_costo", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "GranMayor - Sin stock") {
              let Titulo = "Reporte de stock con costo gran Mayor";
              res.render("facturacion/reporte_pdf/stock_pdf_gran", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor - Sin stock") {
              let Titulo = "Resporte de stock con costo mayor";
              res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal - Sin stock") {
              let Titulo = "Reporte de stock con costo detal";
              res.render("facturacion/reporte_pdf/stock_pdf_detal", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Todos - Sin stock") {
              res.redirect("/facturacion/stock");
            }
          }
          if (Producto == "GUARDAPOLVO") {
            let stock = await stockDB
              .find({
                $and: [
                  { CantidadTotal: 0  },
                  { TipoProducto: "GUARDAPOLVO" },
                ],
              })
              .sort({TipoProducto: 1,  Modelo: 1 })
              .then((document) => {
                const contex = {
                  stocks: document.map((document) => {
                    return {
                      CodigoT: document.CodigoT,
                      CodigoG: document.CodigoG,
                      Modelo: document.Modelo,
                      Vehiculo: document.Vehiculo,
                      CantidadTotal: document.CantidadTotal,
                      CostoFOB: document.CostoFOB.toFixed(2),
                      CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                      TipoProducto: (document.TipoProducto).toUpperCase(),
                      Costo: document.Costo.toFixed(2),
                      CostoTotal: document.CostoTotal.toFixed(2),
                      CostoGranMayor: document.CostoGranMayor.toFixed(2),
                      CostoGranMayorTotal:
                        document.CostoGranMayorTotal.toFixed(2),
                      CostoMayor: document.CostoMayor.toFixed(2),
                      Vehiculo: document.Vehiculo,
                      Posicion: (document.Posicion).toUpperCase(),
                      CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                      CostoDetal: document.CostoDetal.toFixed(2),
                      CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                    };
                  }),
                };
                for (i = 0; i < contex.stocks.length; i++) {
                  let Descripcion = "";
                  let PorcentajeCosto
                  let PorcentajeCostoGranMayor
                  let PorcentajeCostoMayor
                  let PorcentajeCostoDetal
                  for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                    if (
                      contex.stocks[i].Vehiculo[x].Modelo ==
                      contex.stocks[i].Vehiculo[
                        contex.stocks[i].Vehiculo.length - 1
                      ].Modelo
                    ) {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                    } else {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                    }
                  }
                  contex.stocks[i].Descripcion = Descripcion;
                  PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                  PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                  
                  contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                  contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                  contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                  contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
                }
                Stock = contex.stocks;
              });
  
            if (Costos == "CostoFOB") {
              let Titulo = "Costo FOB - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_fob", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Costo - Sin stock") {
              let Titulo = "Report de stock con costo";
              res.render("facturacion/reporte_pdf/stock_pdf_costo", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "GranMayor - Sin stock") {
              let Titulo = "Reporte de stock con costo gran Mayor";
              res.render("facturacion/reporte_pdf/stock_pdf_gran", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor - Sin stock") {
              let Titulo = "Resporte de stock con costo mayor";
              res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal - Sin stock") {
              let Titulo = "Reporte de stock con costo detal";
              res.render("facturacion/reporte_pdf/stock_pdf_detal", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Todos - Sin stock") {
              res.redirect("/facturacion/stock");
            }
          }
          if (Producto == "TODOS") {
            let stock = await stockDB
              .find({ CantidadTotal:  0  })
              .sort({TipoProducto: 1,  Modelo: 1 })
              .then((document) => {
                const contex = {
                  stocks: document.map((document) => {
                    return {
                      CodigoT: document.CodigoT,
                      CodigoG: document.CodigoG,
                      Modelo: document.Modelo,
                      CantidadTotal: document.CantidadTotal,
                      CostoFOB: document.CostoFOB.toFixed(2),
                      CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                      TipoProducto: (document.TipoProducto).toUpperCase(),
                      Costo: document.Costo.toFixed(2),
                      CostoTotal: document.CostoTotal.toFixed(2),
                      CostoGranMayor: document.CostoGranMayor.toFixed(2),
                      CostoGranMayorTotal:
                      document.CostoGranMayorTotal.toFixed(2),
                      Vehiculo: document.Vehiculo,
                      Posicion: (document.Posicion).toUpperCase(),
                      CostoMayor: document.CostoMayor.toFixed(2),
                      CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                      CostoDetal: document.CostoDetal.toFixed(2),
                      CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                    };
                  }),
                };
                for (i = 0; i < contex.stocks.length; i++) {
                  let Descripcion = "";
                  let PorcentajeCosto
                  let PorcentajeCostoGranMayor
                  let PorcentajeCostoMayor
                  let PorcentajeCostoDetal
                  for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                    if (
                      contex.stocks[i].Vehiculo[x].Modelo ==
                      contex.stocks[i].Vehiculo[
                        contex.stocks[i].Vehiculo.length - 1
                      ].Modelo
                    ) {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                    } else {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                    }
                  }
                  contex.stocks[i].Descripcion = Descripcion;
                  PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                  PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                  
                  contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                  contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                  contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                  contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
                }
                Stock = contex.stocks;
              });
  
            if (Costos == "CostoFOB") {
              let Titulo = "Costo FOB Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_fob", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Costo") {
              let Titulo = "Costo - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_costo", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "GranMayor") {
              let Titulo = "Costo gran mayor - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_gran", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let Titulo = "Costo mayor - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let Titulo = "Costo detal - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_detal", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Todos") {
              res.redirect("/facturacion/stock");
            }
          }
        } else {
          let Stock;
          if (Producto == "AMORTIGUADOR") {
            let stock = await stockDB
              .find({ TipoProducto: "AMORTIGUADOR" })
              .sort({TipoProducto: 1,  Modelo: 1 })
              .then((document) => {
                const contex = {
                  stocks: document.map((document) => {
                    return {
                      CodigoT: document.CodigoT,
                      CodigoG: document.CodigoG,
                      Modelo: document.Modelo,
                      CantidadTotal: document.CantidadTotal,
                      TipoProducto: (document.TipoProducto).toUpperCase(),
                      CostoFOB: document.CostoFOB.toFixed(2),
                      CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                      Costo: document.Costo.toFixed(2),
                      CostoTotal: document.CostoTotal.toFixed(2),
                      CostoGranMayor: document.CostoGranMayor.toFixed(2),
                      CostoGranMayorTotal:
                        document.CostoGranMayorTotal.toFixed(2),
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                      CostoMayor: document.CostoMayor.toFixed(2),
                      CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                      CostoDetal: document.CostoDetal.toFixed(2),
                      CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                    };
                  }),
                };
                for (i = 0; i < contex.stocks.length; i++) {
                  let Descripcion = "";
                  let PorcentajeCosto
                  let PorcentajeCostoGranMayor
                  let PorcentajeCostoMayor
                  let PorcentajeCostoDetal
                  for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                    if (
                      contex.stocks[i].Vehiculo[x].Modelo ==
                      contex.stocks[i].Vehiculo[
                        contex.stocks[i].Vehiculo.length - 1
                      ].Modelo
                    ) {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                    } else {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                    }
                  }
                  contex.stocks[i].Descripcion = Descripcion;
                  PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                  PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                  
                  contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                  contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                  contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                  contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
                }
                Stock = contex.stocks;
              });
  
            if (Costos == "CostoFOB") {
              let Titulo = "Costo FOB -Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_fob", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Costo") {
              let Titulo = "Costo - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_costo", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "GranMayor") {
              let Titulo = "Costo gran mayor - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_gran", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let Titulo = "Costo mayor - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let Titulo = "Costo detal - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_detal", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Todos") {
              res.redirect("/facturacion/stock");
            }
          }
          if (Producto == "BASE DE AMORTIGUADOR") {
            let stock = await stockDB
              .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
              .sort({TipoProducto: 1,  Modelo: 1 })
              .then((document) => {
                const contex = {
                  stocks: document.map((document) => {
                    return {
                      CodigoT: document.CodigoT,
                      CodigoG: document.CodigoG,
                      Modelo: document.Modelo,
                      CantidadTotal: document.CantidadTotal,
                      TipoProducto: (document.TipoProducto).toUpperCase(),
                      CostoFOB: document.CostoFOB.toFixed(2),
                      CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                      Costo: document.Costo.toFixed(2),
                      CostoTotal: document.CostoTotal.toFixed(2),
                      CostoGranMayor: document.CostoGranMayor.toFixed(2),
                      CostoGranMayorTotal:
                        document.CostoGranMayorTotal.toFixed(2),
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                      CostoMayor: document.CostoMayor.toFixed(2),
                      CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                      CostoDetal: document.CostoDetal.toFixed(2),
                      CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                    };
                  }),
                };
                for (i = 0; i < contex.stocks.length; i++) {
                  let Descripcion = "";
                  let PorcentajeCosto
                  let PorcentajeCostoGranMayor
                  let PorcentajeCostoMayor
                  let PorcentajeCostoDetal
                  for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                    if (
                      contex.stocks[i].Vehiculo[x].Modelo ==
                      contex.stocks[i].Vehiculo[
                        contex.stocks[i].Vehiculo.length - 1
                      ].Modelo
                    ) {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                    } else {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                    }
                  }
                  contex.stocks[i].Descripcion = Descripcion;
                  PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                  PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                  
                  contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                  contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                  contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                  contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
                }
                Stock = contex.stocks;
              });
  
            if (Costos == "CostoFOB") {
              let Titulo = "Costo FOB - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_fob", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Costo") {
              let Titulo = "Costo - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_costo", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "GranMayor") {
              let Titulo = "Costo gran mayor - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_gran", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let Titulo = "Costo mayor - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let Titulo = "Costo detal - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_detal", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Todos") {
              res.redirect("/facturacion/stock");
            }
          }
          if (Producto == "GUARDAPOLVO") {
            let stock = await stockDB
              .find({ TipoProducto: "GUARDAPOLVO" })
              .sort({TipoProducto: 1,  Modelo: 1 })
              .then((document) => {
                const contex = {
                  stocks: document.map((document) => {
                    return {
                      CodigoT: document.CodigoT,
                      CodigoG: document.CodigoG,
                      Modelo: document.Modelo,
                      CantidadTotal: document.CantidadTotal,
                      TipoProducto: (document.TipoProducto).toUpperCase(),
                      CostoFOB: document.CostoFOB.toFixed(2),
                      CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                      Costo: document.Costo.toFixed(2),
                      CostoTotal: document.CostoTotal.toFixed(2),
                      CostoGranMayor: document.CostoGranMayor.toFixed(2),
                      CostoGranMayorTotal:
                        document.CostoGranMayorTotal.toFixed(2),
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                      CostoMayor: document.CostoMayor.toFixed(2),
                      CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                      CostoDetal: document.CostoDetal.toFixed(2),
                      CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                    };
                  }),
                };
                for (i = 0; i < contex.stocks.length; i++) {
                  let Descripcion = "";
                  let PorcentajeCosto
                  let PorcentajeCostoGranMayor
                  let PorcentajeCostoMayor
                  let PorcentajeCostoDetal
                  for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                    if (
                      contex.stocks[i].Vehiculo[x].Modelo ==
                      contex.stocks[i].Vehiculo[
                        contex.stocks[i].Vehiculo.length - 1
                      ].Modelo
                    ) {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                    } else {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                    }
                  }
                  contex.stocks[i].Descripcion = Descripcion;
                  PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                  PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                  
                  contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                  contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                  contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                  contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
                }
                Stock = contex.stocks;
              });
  
            if (Costos == "CostoFOB") {
              let Titulo = "Costo FOB - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_fob", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Costo") {
              let Titulo = "Costo - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_costo", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "GranMayor") {
              let Titulo = "Costo gran mayor - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_gran", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let Titulo = "Costo mayor - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let Titulo = "Costo detal - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_detal", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Todos") {
              res.redirect("/facturacion/stock");
            }
          }
          if (Producto == "TODOS") {
            let stock = await stockDB
              .find()
              .sort({TipoProducto: 1,  Modelo: 1 })
              .then((document) => {
                const contex = {
                  stocks: document.map((document) => {
                    return {
                      CodigoT: document.CodigoT,
                      CodigoG: document.CodigoG,
                      Modelo: document.Modelo,
                      CantidadTotal: document.CantidadTotal,
                      TipoProducto: (document.TipoProducto).toUpperCase(),
                      CostoFOB: document.CostoFOB.toFixed(2),
                      CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                      Costo: document.Costo.toFixed(2),
                      CostoTotal: document.CostoTotal.toFixed(2),
                      CostoGranMayor: document.CostoGranMayor.toFixed(2),
                      CostoGranMayorTotal:
                        document.CostoGranMayorTotal.toFixed(2),
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                      CostoMayor: document.CostoMayor.toFixed(2),
                      CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                      CostoDetal: document.CostoDetal.toFixed(2),
                      CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                    };
                  }),
                };
                for (i = 0; i < contex.stocks.length; i++) {
                  let Descripcion = "";
                  let PorcentajeCosto
                  let PorcentajeCostoGranMayor
                  let PorcentajeCostoMayor
                  let PorcentajeCostoDetal
                  for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                    if (
                      contex.stocks[i].Vehiculo[x].Modelo ==
                      contex.stocks[i].Vehiculo[
                        contex.stocks[i].Vehiculo.length - 1
                      ].Modelo
                    ) {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                    } else {
                      Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                    }
                  }
                  contex.stocks[i].Descripcion = Descripcion;
                  PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                  PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                  PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                  
                  contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                  contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                  contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                  contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
                }
                Stock = contex.stocks;
              });
            if (Costos == "CostoFOB") {
              let Titulo = "Costo FOB - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_fob", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Costo") {
              let Titulo = "Costo - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_costo", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "GranMayor") {
              let Titulo = "Costo gran mayor - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_gran", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let Titulo = "Costo - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let Titulo = "Costo detal - Sin stock";
              res.render("facturacion/reporte_pdf/stock_pdf_detal", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Todos") {
              res.redirect("/facturacion/stock");
            }
          }
        }
      }
    }  
  if(Estado == "Stock"){
    if (Formato == "Excel") {
      if (Producto == "AMORTIGUADOR") {
        if (MayoresACero == 1) {
          let stock = await stockDB
            .find({
              $and: [
                { CantidadTotal: { $gt: 0 } },
                { TipoProducto: "AMORTIGUADOR" },
              ],
            })
            .sort({TipoProducto: 1,  Modelo: 1 });
          if (Costos == "CostoFOB") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo FOB").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo FOB total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoFOBTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costoFOB.xlsx", res);
          }
          if (Costos == "Costo") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo FOB total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo.xlsx", res);
          }
          if (Costos == "GranMayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo gran mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo gran mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoGranMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_gran_mayor.xlsx", res);
          }
          if (Costos == "Mayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_mayor.xlsx", res);
          }
          if (Costos == "Detal") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo detal").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo detal total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_detal.xlsx", res);
          }
          if (Costos == "Todos") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo FOB").style(style);
            ws.cell(1, 8).string("Costo gran mayor").style(style);
            ws.cell(1, 9).string("Costo mayor").style(style);
            ws.cell(1, 10).string("Costo detal").style(style);
            ws.cell(1, 11).string("Cantidad Total").style(style);
            ws.cell(1, 12).string("Costo total").style(style);
            ws.cell(1, 13).string("Costo FOB total").style(style);
            ws.cell(1, 14).string("Costo gran mayor total").style(style);
            ws.cell(1, 15).string("Costo mayor total").style(style);
            ws.cell(1, 16).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              costo += +stock[i].CostoTotal;
              fob += +stock[i].CostoFOBTotal;
              gran += +stock[i].CostoGranMayorTotal;
              mayor += +stock[i].CostoMayorTotal;
              detal += ++stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 10).string("Totales").style(styleTotal);
            ws.cell(fila, 11).number(cantidad);
            ws.cell(fila, 12).number(costo);
            ws.cell(fila, 13).number(fob);
            ws.cell(fila, 14).number(gran);
            ws.cell(fila, 15).number(mayor);
            ws.cell(fila, 16).number(detal);

            wb.write("Stock.xlsx", res);
          }
        } else {
          let stock = await stockDB
            .find({ TipoProducto: "AMORTIGUADOR" })
            .sort({TipoProducto: 1,  Modelo: 1 });
          if (Costos == "CostoFOB") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo FOB").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo FOB total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoFOBTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costoFOB.xlsx", res);
          }
          if (Costos == "Costo") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo.xlsx", res);
          }
          if (Costos == "GranMayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo gran mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo gran mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoGranMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_gran_mayor.xlsx", res);
          }
          if (Costos == "Mayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_mayor.xlsx", res);
          }
          if (Costos == "Detal") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo detal").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo detal total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_detal.xlsx", res);
          }
          if (Costos == "Todos") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo FOB").style(style);
            ws.cell(1, 8).string("Costo gran mayor").style(style);
            ws.cell(1, 9).string("Costo mayor").style(style);
            ws.cell(1, 10).string("Costo detal").style(style);
            ws.cell(1, 11).string("Cantidad Total").style(style);
            ws.cell(1, 12).string("Costo total").style(style);
            ws.cell(1, 13).string("Costo FOB total").style(style);
            ws.cell(1, 14).string("Costo gran mayor total").style(style);
            ws.cell(1, 15).string("Costo mayor total").style(style);
            ws.cell(1, 16).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              costo += +stock[i].CostoTotal;
              fob += +stock[i].CostoFOBTotal;
              gran += +stock[i].CostoGranMayorTotal;
              mayor += +stock[i].CostoMayorTotal;
              detal += ++stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 10).string("Totales").style(styleTotal);
            ws.cell(fila, 11).number(cantidad);
            ws.cell(fila, 12).number(costo);
            ws.cell(fila, 13).number(fob);
            ws.cell(fila, 14).number(gran);
            ws.cell(fila, 15).number(mayor);
            ws.cell(fila, 16).number(detal);

            wb.write("Stock.xlsx", res);
          }
        }
      }
      if (Producto == "BASE DE AMORTIGUADOR") {
        if (MayoresACero == 1) {
          let stock = await stockDB
            .find({
              $and: [{ CantidadTotal: { $gt: 0 } }, { TipoProducto: "BASE DE AMORTIGUADOR" }],
            })
            .sort({TipoProducto: 1,  Modelo: 1 });
          if (Costos == "CostoFOB") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo FOB").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo FOB total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoFOBTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costoFOB.xlsx", res);
          }
          if (Costos == "Costo") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo.xlsx", res);
          }
          if (Costos == "GranMayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo gran mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo gran mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoGranMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_gran_mayor.xlsx", res);
          }
          if (Costos == "Mayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_mayor.xlsx", res);
          }
          if (Costos == "Detal") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo detal").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo detal total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_detal.xlsx", res);
          }
          if (Costos == "Todos") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo FOB").style(style);
            ws.cell(1, 8).string("Costo gran mayor").style(style);
            ws.cell(1, 9).string("Costo mayor").style(style);
            ws.cell(1, 10).string("Costo detal").style(style);
            ws.cell(1, 11).string("Cantidad Total").style(style);
            ws.cell(1, 12).string("Costo total").style(style);
            ws.cell(1, 1).string("Costo FOB total").style(style);
            ws.cell(1, 14).string("Costo gran mayor total").style(style);
            ws.cell(1, 15).string("Costo mayor total").style(style);
            ws.cell(1, 16).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              costo += +stock[i].CostoTotal;
              fob += +stock[i].CostoFOBTotal;
              gran += +stock[i].CostoGranMayorTotal;
              mayor += +stock[i].CostoMayorTotal;
              detal += ++stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 10).string("Totales").style(styleTotal);
            ws.cell(fila, 11).number(cantidad);
            ws.cell(fila, 12).number(costo);
            ws.cell(fila, 13).number(fob);
            ws.cell(fila, 14).number(gran);
            ws.cell(fila, 15).number(mayor);
            ws.cell(fila, 16).number(detal);

            wb.write("Stock.xlsx", res);
          }
        } else {
          let stock = await stockDB
            .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
            .sort({TipoProducto: 1,  Modelo: 1 });
          if (Costos == "CostoFOB") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo FOB").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo FOB total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoFOBTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costoFOB.xlsx", res);
          }
          if (Costos == "Costo") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo.xlsx", res);
          }
          if (Costos == "GranMayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo gran mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo gran mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoGranMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_gran_mayor.xlsx", res);
          }
          if (Costos == "Mayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_mayor.xlsx", res);
          }
          if (Costos == "Detal") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo detal").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo detal total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_detal.xlsx", res);
          }
          if (Costos == "Todos") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo FOB").style(style);
            ws.cell(1, 8).string("Costo gran mayor").style(style);
            ws.cell(1, 9).string("Costo mayor").style(style);
            ws.cell(1, 10).string("Costo detal").style(style);
            ws.cell(1, 11).string("Cantidad Total").style(style);
            ws.cell(1, 12).string("Costo total").style(style);
            ws.cell(1, 1).string("Costo FOB total").style(style);
            ws.cell(1, 14).string("Costo gran mayor total").style(style);
            ws.cell(1, 15).string("Costo mayor total").style(style);
            ws.cell(1, 16).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              costo += +stock[i].CostoTotal;
              fob += +stock[i].CostoFOBTotal;
              gran += +stock[i].CostoGranMayorTotal;
              mayor += +stock[i].CostoMayorTotal;
              detal += ++stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 10).string("Totales").style(styleTotal);
            ws.cell(fila, 11).number(cantidad);
            ws.cell(fila, 12).number(costo);
            ws.cell(fila, 13).number(fob);
            ws.cell(fila, 14).number(gran);
            ws.cell(fila, 15).number(mayor);
            ws.cell(fila, 16).number(detal);

            wb.write("Stock.xlsx", res);
          }
        }
      }
      if (Producto == "GUARDAPOLVO") {
        if (MayoresACero == 1) {
          let stock = await stockDB
            .find({
              $and: [
                { CantidadTotal: { $gt: 0 } },
                { TipoProducto: "GUARDAPOLVO" },
              ],
            })
            .sort({TipoProducto: 1,  Modelo: 1 });
          if (Costos == "CostoFOB") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo FOB").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo FOB total").style(style);
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoFOBTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costoFOB.xlsx", res);
          }
          if (Costos == "Costo") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo.xlsx", res);
          }
          if (Costos == "GranMayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo gran mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo gran mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoGranMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_gran_mayor.xlsx", res);
          }
          if (Costos == "Mayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_mayor.xlsx", res);
          }
          if (Costos == "Detal") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo detal").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo detal total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_detal.xlsx", res);
          }
          if (Costos == "Todos") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo FOB").style(style);
            ws.cell(1, 8).string("Costo gran mayor").style(style);
            ws.cell(1, 9).string("Costo mayor").style(style);
            ws.cell(1, 10).string("Costo detal").style(style);
            ws.cell(1, 11).string("Cantidad Total").style(style);
            ws.cell(1, 12).string("Costo total").style(style);
            ws.cell(1, 1).string("Costo FOB total").style(style);
            ws.cell(1, 14).string("Costo gran mayor total").style(style);
            ws.cell(1, 15).string("Costo mayor total").style(style);
            ws.cell(1, 16).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              costo += +stock[i].CostoTotal;
              fob += +stock[i].CostoFOBTotal;
              gran += +stock[i].CostoGranMayorTotal;
              mayor += +stock[i].CostoMayorTotal;
              detal += ++stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 10).string("Totales").style(styleTotal);
            ws.cell(fila, 11).number(cantidad);
            ws.cell(fila, 12).number(costo);
            ws.cell(fila, 13).number(fob);
            ws.cell(fila, 14).number(gran);
            ws.cell(fila, 15).number(mayor);
            ws.cell(fila, 16).number(detal);

            wb.write("Stock.xlsx", res);
          }
        } else {
          let stock = await stockDB
            .find({ TipoProducto: "GUARDAPOLVO" })
            .sort({TipoProducto: 1,  Modelo: 1 });
          if (Costos == "CostoFOB") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo FOB").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo FOB total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoFOBTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costoFOB.xlsx", res);
          }
          if (Costos == "Costo") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo.xlsx", res);
          }
          if (Costos == "GranMayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo gran mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo gran mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoGranMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_gran_mayor.xlsx", res);
          }
          if (Costos == "Mayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_mayor.xlsx", res);
          }
          if (Costos == "Detal") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo detal").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo detal total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_detal.xlsx", res);
          }
          if (Costos == "Todos") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo FOB").style(style);
            ws.cell(1, 8).string("Costo gran mayor").style(style);
            ws.cell(1, 9).string("Costo mayor").style(style);
            ws.cell(1, 10).string("Costo detal").style(style);
            ws.cell(1, 11).string("Cantidad Total").style(style);
            ws.cell(1, 12).string("Costo total").style(style);
            ws.cell(1, 1).string("Costo FOB total").style(style);
            ws.cell(1, 14).string("Costo gran mayor total").style(style);
            ws.cell(1, 15).string("Costo mayor total").style(style);
            ws.cell(1, 16).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              costo += +stock[i].CostoTotal;
              fob += +stock[i].CostoFOBTotal;
              gran += +stock[i].CostoGranMayorTotal;
              mayor += +stock[i].CostoMayorTotal;
              detal += ++stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 10).string("Totales").style(styleTotal);
            ws.cell(fila, 11).number(cantidad);
            ws.cell(fila, 12).number(costo);
            ws.cell(fila, 13).number(fob);
            ws.cell(fila, 14).number(gran);
            ws.cell(fila, 15).number(mayor);
            ws.cell(fila, 16).number(detal);

            wb.write("Stock.xlsx", res);
          }
        }
      }
      if (Producto == "TODOS") {
        if (MayoresACero == 1) {
          let stock = await stockDB
            .find({ CantidadTotal: { $gt: 0 } })
            .sort({TipoProducto: 1,  Modelo: 1 });
          if (Costos == "CostoFOB") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo FOB").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo FOB total").style(style);
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoFOBTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costoFOB.xlsx", res);
          }
          if (Costos == "Costo") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo.xlsx", res);
          }
          if (Costos == "GranMayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo gran mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo gran mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoGranMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_gran_mayor.xlsx", res);
          }
          if (Costos == "Mayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_mayor.xlsx", res);
          }
          if (Costos == "Detal") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo detal").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo detal total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_detal.xlsx", res);
          }
          if (Costos == "Todos") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo FOB").style(style);
            ws.cell(1, 8).string("Costo gran mayor").style(style);
            ws.cell(1, 9).string("Costo mayor").style(style);
            ws.cell(1, 10).string("Costo detal").style(style);
            ws.cell(1, 11).string("Cantidad Total").style(style);
            ws.cell(1, 12).string("Costo total").style(style);
            ws.cell(1, 1).string("Costo FOB total").style(style);
            ws.cell(1, 14).string("Costo gran mayor total").style(style);
            ws.cell(1, 15).string("Costo mayor total").style(style);
            ws.cell(1, 16).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              costo += +stock[i].CostoTotal;
              fob += +stock[i].CostoFOBTotal;
              gran += +stock[i].CostoGranMayorTotal;
              mayor += +stock[i].CostoMayorTotal;
              detal += ++stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 10).string("Totales").style(styleTotal);
            ws.cell(fila, 11).number(cantidad);
            ws.cell(fila, 12).number(costo);
            ws.cell(fila, 13).number(fob);
            ws.cell(fila, 14).number(gran);
            ws.cell(fila, 15).number(mayor);
            ws.cell(fila, 16).number(detal);

            wb.write("Stock.xlsx", res);
          }
        } else {
          let stock = await stockDB.find().sort({TipoProducto: 1,  Modelo: 1 });
          if (Costos == "CostoFOB") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo FOB").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo FOB total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoFOBTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costoFOB.xlsx", res);
          }
          if (Costos == "Costo") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo.xlsx", res);
          }
          if (Costos == "GranMayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo gran mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo gran mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoGranMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_gran_mayor.xlsx", res);
          }
          if (Costos == "Mayor") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo mayor").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo mayor total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoMayorTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_mayor.xlsx", res);
          }
          if (Costos == "Detal") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo detal").style(style);
            ws.cell(1, 7).string("Cantidad Total").style(style);
            ws.cell(1, 8).string("Costo detal total").style(style);

            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              precioTotal += +stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 6).string("Totales").style(styleTotal);
            ws.cell(fila, 7).number(cantidad);
            ws.cell(fila, 8).number(precioTotal);

            wb.write("Stock_costo_detal.xlsx", res);
          }
          if (Costos == "Todos") {
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Codigo homólogo").style(style);
            ws.cell(1, 3).string("Producto").style(style);
            ws.cell(1, 4).string("Descripción").style(style);
            ws.cell(1, 5).string("Posición").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo FOB").style(style);
            ws.cell(1, 8).string("Costo gran mayor").style(style);
            ws.cell(1, 9).string("Costo mayor").style(style);
            ws.cell(1, 10).string("Costo detal").style(style);
            ws.cell(1, 11).string("Cantidad Total").style(style);
            ws.cell(1, 12).string("Costo total").style(style);
            ws.cell(1, 1).string("Costo FOB total").style(style);
            ws.cell(1, 14).string("Costo gran mayor total").style(style);
            ws.cell(1, 15).string("Costo mayor total").style(style);
            ws.cell(1, 16).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let Descripcion = "";
              for (x = 0; x < stock[i].Vehiculo.length; x++) {
                if (
                  stock[i].Vehiculo[x].Modelo ==
                  stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                }
              }

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].CodigoG);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoFOB);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].CantidadTotal);
              ws.cell(fila, columna++).number(stock[i].CostoTotal);
              ws.cell(fila, columna++).number(stock[i].CostoFOBTotal);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoMayorTotal);
              ws.cell(fila, columna++).number(stock[i].CostoDetalTotal);

              cantidad += +stock[i].CantidadTotal;
              costo += +stock[i].CostoTotal;
              fob += +stock[i].CostoFOBTotal;
              gran += +stock[i].CostoGranMayorTotal;
              mayor += +stock[i].CostoMayorTotal;
              detal += ++stock[i].CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 10).string("Totales").style(styleTotal);
            ws.cell(fila, 11).number(cantidad);
            ws.cell(fila, 12).number(costo);
            ws.cell(fila, 13).number(fob);
            ws.cell(fila, 14).number(gran);
            ws.cell(fila, 15).number(mayor);
            ws.cell(fila, 16).number(detal);

            wb.write("Stock.xlsx", res);
          }
        }
      }
    }
    //empieza pdf
    if (Formato == "PDF") {
      if (MayoresACero == 1) {
        let Stock;

        if (Producto == "AMORTIGUADOR") {
          let stock = await stockDB
            .find({
              $and: [
                { CantidadTotal: { $gt: 0 } },
                { TipoProducto: "AMORTIGUADOR" },
              ],
            })
            .sort({TipoProducto: 1,  Modelo: 1 })
            .then((document) => {
              const contex = {
                stocks: document.map((document) => {
                  return {
                    CodigoT: document.CodigoT,
                    CodigoG: document.CodigoG,
                    Modelo: document.Modelo,
                    Posicion: (document.Posicion).toUpperCase(),
                    CantidadTotal: document.CantidadTotal,
                    CostoFOB: document.CostoFOB.toFixed(2),
                    CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                    TipoProducto: (document.TipoProducto).toUpperCase(),
                    Costo: document.Costo.toFixed(2),
                    CostoTotal: document.CostoTotal.toFixed(2),
                    CostoGranMayor: document.CostoGranMayor.toFixed(2),
                    CostoGranMayorTotal:
                    document.CostoGranMayorTotal.toFixed(2),
                    CostoMayor: document.CostoMayor.toFixed(2),
                    Vehiculo: document.Vehiculo,
                    Posicion: (document.Posicion).toUpperCase(),
                    CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                    CostoDetal: document.CostoDetal.toFixed(2),
                    CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                  };
                }),
              };
              for (i = 0; i < contex.stocks.length; i++) {
                let Descripcion = "";
                let PorcentajeCosto
                let PorcentajeCostoGranMayor
                let PorcentajeCostoMayor
                let PorcentajeCostoDetal
                for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                  if (
                    contex.stocks[i].Vehiculo[x].Modelo ==
                    contex.stocks[i].Vehiculo[
                      contex.stocks[i].Vehiculo.length - 1
                    ].Modelo
                  ) {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                  }
                }
                contex.stocks[i].Descripcion = Descripcion;
                PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                
                contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
              }
              Stock = contex.stocks;
            });

          if (Costos == "CostoFOB") {
            let Titulo = "Costo FOB";
            res.render("facturacion/reporte_pdf/stock_pdf_fob", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Costo") {
            let Titulo = "Report de stock con costo";
            res.render("facturacion/reporte_pdf/stock_pdf_costo", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "GranMayor") {
            let Titulo = "Reporte de stock con costo gran Mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_gran", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Mayor") {
            let Titulo = "Resporte de stock con costo mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Detal") {
            let Titulo = "Reporte de stock con costo detal";
            res.render("facturacion/reporte_pdf/stock_pdf_detal", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Todos") {
            res.redirect("/facturacion/reporte-stock");
          }
        }
        if (Producto == "BASE DE AMORTIGUADOR") {
          let stock = await stockDB
            .find({
              $and: [{ CantidadTotal: { $gt: 0 } }, { TipoProducto: "BASE DE AMORTIGUADOR" }],
            })
            .sort({TipoProducto: 1,  Modelo: 1 })
            .then((document) => {
              const contex = {
                stocks: document.map((document) => {
                  return {
                    CodigoT: document.CodigoT,
                    CodigoG: document.CodigoG,
                    Modelo: document.Modelo,
                    Vehiculo: document.Vehiculo,
                    CantidadTotal: document.CantidadTotal,
                    CostoFOB: document.CostoFOB.toFixed(2),
                    CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                    TipoProducto: (document.TipoProducto).toUpperCase(),
                    Costo: document.Costo.toFixed(2),
                    CostoTotal: document.CostoTotal.toFixed(2),
                    CostoGranMayor: document.CostoGranMayor.toFixed(2),
                    CostoGranMayorTotal:
                    document.CostoGranMayorTotal.toFixed(2),
                    Vehiculo: document.Vehiculo,
                    Posicion: (document.Posicion).toUpperCase(),
                    CostoMayor: (document.CostoMayor).toFixed(2),
                    CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                    CostoDetal: document.CostoDetal.toFixed(2),
                    CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                  };
                }),
              };
              for (i = 0; i < contex.stocks.length; i++) {
                let Descripcion = "";
                let PorcentajeCosto
                let PorcentajeCostoGranMayor
                let PorcentajeCostoMayor
                let PorcentajeCostoDetal
                for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                  if (
                    contex.stocks[i].Vehiculo[x].Modelo ==
                    contex.stocks[i].Vehiculo[
                      contex.stocks[i].Vehiculo.length - 1
                    ].Modelo
                  ) {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                  }
                }
                contex.stocks[i].Descripcion = Descripcion;
                PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                
                contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
              }
              Stock = contex.stocks;
            });

          if (Costos == "CostoFOB") {
            let Titulo = "Costo FOB";
            res.render("facturacion/reporte_pdf/stock_pdf_fob", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Costo") {
            let Titulo = "Report de stock con costo";
            res.render("facturacion/reporte_pdf/stock_pdf_costo", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "GranMayor") {
            let Titulo = "Reporte de stock con costo gran Mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_gran", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Mayor") {
            let Titulo = "Resporte de stock con costo mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Detal") {
            let Titulo = "Reporte de stock con costo detal";
            res.render("facturacion/reporte_pdf/stock_pdf_detal", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Todos") {
            res.redirect("/facturacion/stock");
          }
        }
        if (Producto == "GUARDAPOLVO") {
          let stock = await stockDB
            .find({
              $and: [
                { CantidadTotal: { $gt: 0 } },
                { TipoProducto: "GUARDAPOLVO" },
              ],
            })
            .sort({TipoProducto: 1,  Modelo: 1 })
            .then((document) => {
              const contex = {
                stocks: document.map((document) => {
                  return {
                    CodigoT: document.CodigoT,
                    CodigoG: document.CodigoG,
                    Modelo: document.Modelo,
                    Vehiculo: document.Vehiculo,
                    CantidadTotal: document.CantidadTotal,
                    CostoFOB: document.CostoFOB.toFixed(2),
                    CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                    TipoProducto: (document.TipoProducto).toUpperCase(),
                    Costo: document.Costo.toFixed(2),
                    CostoTotal: document.CostoTotal.toFixed(2),
                    CostoGranMayor: document.CostoGranMayor.toFixed(2),
                    CostoGranMayorTotal:
                      document.CostoGranMayorTotal.toFixed(2),
                    CostoMayor: document.CostoMayor.toFixed(2),
                    Vehiculo: document.Vehiculo,
                    Posicion: (document.Posicion).toUpperCase(),
                    CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                    CostoDetal: document.CostoDetal.toFixed(2),
                    CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                  };
                }),
              };
              for (i = 0; i < contex.stocks.length; i++) {
                let Descripcion = "";
                let PorcentajeCosto
                let PorcentajeCostoGranMayor
                let PorcentajeCostoMayor
                let PorcentajeCostoDetal
                for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                  if (
                    contex.stocks[i].Vehiculo[x].Modelo ==
                    contex.stocks[i].Vehiculo[
                      contex.stocks[i].Vehiculo.length - 1
                    ].Modelo
                  ) {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                  }
                }
                contex.stocks[i].Descripcion = Descripcion;
                PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                
                contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
              }
              Stock = contex.stocks;
            });

          if (Costos == "CostoFOB") {
            let Titulo = "Costo FOB";
            res.render("facturacion/reporte_pdf/stock_pdf_fob", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Costo") {
            let Titulo = "Report de stock con costo";
            res.render("facturacion/reporte_pdf/stock_pdf_costo", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "GranMayor") {
            let Titulo = "Reporte de stock con costo gran Mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_gran", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Mayor") {
            let Titulo = "Resporte de stock con costo mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Detal") {
            let Titulo = "Reporte de stock con costo detal";
            res.render("facturacion/reporte_pdf/stock_pdf_detal", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Todos") {
            res.redirect("/facturacion/stock");
          }
        }
        if (Producto == "TODOS") {
          let stock = await stockDB
            .find({ CantidadTotal: { $gt: 0 } })
            .sort({TipoProducto: 1,  Modelo: 1 })
            .then((document) => {
              const contex = {
                stocks: document.map((document) => {
                  return {
                    CodigoT: document.CodigoT,
                    CodigoG: document.CodigoG,
                    Modelo: document.Modelo,
                    CantidadTotal: document.CantidadTotal,
                    CostoFOB: document.CostoFOB.toFixed(2),
                    CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                    TipoProducto: (document.TipoProducto).toUpperCase(),
                    Costo: document.Costo.toFixed(2),
                    CostoTotal: document.CostoTotal.toFixed(2),
                    CostoGranMayor: document.CostoGranMayor.toFixed(2),
                    CostoGranMayorTotal:
                    document.CostoGranMayorTotal.toFixed(2),
                    Vehiculo: document.Vehiculo,
                    Posicion: (document.Posicion).toUpperCase(),
                    CostoMayor: document.CostoMayor.toFixed(2),
                    CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                    CostoDetal: document.CostoDetal.toFixed(2),
                    CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                  };
                }),
              };
              for (i = 0; i < contex.stocks.length; i++) {
                let Descripcion = "";
                let PorcentajeCosto
                let PorcentajeCostoGranMayor
                let PorcentajeCostoMayor
                let PorcentajeCostoDetal
                for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                  if (
                    contex.stocks[i].Vehiculo[x].Modelo ==
                    contex.stocks[i].Vehiculo[
                      contex.stocks[i].Vehiculo.length - 1
                    ].Modelo
                  ) {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                  }
                }
                contex.stocks[i].Descripcion = Descripcion;
                PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                
                contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
              }
              Stock = contex.stocks;
            });

          if (Costos == "CostoFOB") {
            let Titulo = "Costo FOB";
            res.render("facturacion/reporte_pdf/stock_pdf_fob", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Costo") {
            let Titulo = "Report de stock con costo";
            res.render("facturacion/reporte_pdf/stock_pdf_costo", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "GranMayor") {
            let Titulo = "Reporte de stock con costo gran Mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_gran", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Mayor") {
            let Titulo = "Resporte de stock con costo mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Detal") {
            let Titulo = "Reporte de stock con costo detal";
            res.render("facturacion/reporte_pdf/stock_pdf_detal", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Todos") {
            res.redirect("/facturacion/stock");
          }
        }
      } else {
        let Stock;
        if (Producto == "AMORTIGUADOR") {
          let stock = await stockDB
            .find({ TipoProducto: "AMORTIGUADOR" })
            .sort({TipoProducto: 1,  Modelo: 1 })
            .then((document) => {
              const contex = {
                stocks: document.map((document) => {
                  return {
                    CodigoT: document.CodigoT,
                    CodigoG: document.CodigoG,
                    Modelo: document.Modelo,
                    CantidadTotal: document.CantidadTotal,
                    TipoProducto: (document.TipoProducto).toUpperCase(),
                    CostoFOB: document.CostoFOB.toFixed(2),
                    CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                    Costo: document.Costo.toFixed(2),
                    CostoTotal: document.CostoTotal.toFixed(2),
                    CostoGranMayor: document.CostoGranMayor.toFixed(2),
                    CostoGranMayorTotal:
                      document.CostoGranMayorTotal.toFixed(2),
                      Vehiculo: document.Vehiculo,
                      Posicion: (document.Posicion).toUpperCase(),
                    CostoMayor: document.CostoMayor.toFixed(2),
                    CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                    CostoDetal: document.CostoDetal.toFixed(2),
                    CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                  };
                }),
              };
              for (i = 0; i < contex.stocks.length; i++) {
                let Descripcion = "";
                let PorcentajeCosto
                let PorcentajeCostoGranMayor
                let PorcentajeCostoMayor
                let PorcentajeCostoDetal
                for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                  if (
                    contex.stocks[i].Vehiculo[x].Modelo ==
                    contex.stocks[i].Vehiculo[
                      contex.stocks[i].Vehiculo.length - 1
                    ].Modelo
                  ) {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                  }
                }
                contex.stocks[i].Descripcion = Descripcion;
                PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                
                contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
              }
              Stock = contex.stocks;
            });

          if (Costos == "CostoFOB") {
            let Titulo = "Reporte de stock con costo FOB";
            res.render("facturacion/reporte_pdf/stock_pdf_fob", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Costo") {
            let Titulo = "Reporte de stock con costo";
            res.render("facturacion/reporte_pdf/stock_pdf_costo", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "GranMayor") {
            let Titulo = "Reporte de stock con costo gran mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_gran", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Mayor") {
            let Titulo = "Reporte de stock con costo mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Detal") {
            let Titulo = "Reporte de stock  con costo detal";
            res.render("facturacion/reporte_pdf/stock_pdf_detal", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Todos") {
            res.redirect("/facturacion/stock");
          }
        }
        if (Producto == "BASE DE AMORTIGUADOR") {
          let stock = await stockDB
            .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
            .sort({TipoProducto: 1,  Modelo: 1 })
            .then((document) => {
              const contex = {
                stocks: document.map((document) => {
                  return {
                    CodigoT: document.CodigoT,
                    CodigoG: document.CodigoG,
                    Modelo: document.Modelo,
                    CantidadTotal: document.CantidadTotal,
                    TipoProducto: (document.TipoProducto).toUpperCase(),
                    CostoFOB: document.CostoFOB.toFixed(2),
                    CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                    Costo: document.Costo.toFixed(2),
                    CostoTotal: document.CostoTotal.toFixed(2),
                    CostoGranMayor: document.CostoGranMayor.toFixed(2),
                    CostoGranMayorTotal:
                      document.CostoGranMayorTotal.toFixed(2),
                      Vehiculo: document.Vehiculo,
                      Posicion: (document.Posicion).toUpperCase(),
                    CostoMayor: document.CostoMayor.toFixed(2),
                    CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                    CostoDetal: document.CostoDetal.toFixed(2),
                    CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                  };
                }),
              };
              for (i = 0; i < contex.stocks.length; i++) {
                let Descripcion = "";
                let PorcentajeCosto
                let PorcentajeCostoGranMayor
                let PorcentajeCostoMayor
                let PorcentajeCostoDetal
                for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                  if (
                    contex.stocks[i].Vehiculo[x].Modelo ==
                    contex.stocks[i].Vehiculo[
                      contex.stocks[i].Vehiculo.length - 1
                    ].Modelo
                  ) {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                  }
                }
                contex.stocks[i].Descripcion = Descripcion;
                PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                
                contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
              }
              Stock = contex.stocks;
            });

          if (Costos == "CostoFOB") {
            let Titulo = "Reporte de stock con costo FOB";
            res.render("facturacion/reporte_pdf/stock_pdf_fob", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Costo") {
            let Titulo = "Reporte de stock con costo";
            res.render("facturacion/reporte_pdf/stock_pdf_costo", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "GranMayor") {
            let Titulo = "Reporte de stock con costo gran mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_gran", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Mayor") {
            let Titulo = "Reporte de stock con costo mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Detal") {
            let Titulo = "Reporte de stock  con costo detal";
            res.render("facturacion/reporte_pdf/stock_pdf_detal", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Todos") {
            res.redirect("/facturacion/stock");
          }
        }
        if (Producto == "GUARDAPOLVO") {
          let stock = await stockDB
            .find({ TipoProducto: "GUARDAPOLVO" })
            .sort({TipoProducto: 1,  Modelo: 1 })
            .then((document) => {
              const contex = {
                stocks: document.map((document) => {
                  return {
                    CodigoT: document.CodigoT,
                    CodigoG: document.CodigoG,
                    Modelo: document.Modelo,
                    CantidadTotal: document.CantidadTotal,
                    TipoProducto: (document.TipoProducto).toUpperCase(),
                    CostoFOB: document.CostoFOB.toFixed(2),
                    CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                    Costo: document.Costo.toFixed(2),
                    CostoTotal: document.CostoTotal.toFixed(2),
                    CostoGranMayor: document.CostoGranMayor.toFixed(2),
                    CostoGranMayorTotal:
                      document.CostoGranMayorTotal.toFixed(2),
                      Vehiculo: document.Vehiculo,
                      Posicion: (document.Posicion).toUpperCase(),
                    CostoMayor: document.CostoMayor.toFixed(2),
                    CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                    CostoDetal: document.CostoDetal.toFixed(2),
                    CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                  };
                }),
              };
              for (i = 0; i < contex.stocks.length; i++) {
                let Descripcion = "";
                let PorcentajeCosto
                let PorcentajeCostoGranMayor
                let PorcentajeCostoMayor
                let PorcentajeCostoDetal
                for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                  if (
                    contex.stocks[i].Vehiculo[x].Modelo ==
                    contex.stocks[i].Vehiculo[
                      contex.stocks[i].Vehiculo.length - 1
                    ].Modelo
                  ) {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                  }
                }
                contex.stocks[i].Descripcion = Descripcion;
                PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                
                contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
              }
              Stock = contex.stocks;
            });

          if (Costos == "CostoFOB") {
            let Titulo = "Reporte de stock con costo FOB";
            res.render("facturacion/reporte_pdf/stock_pdf_fob", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Costo") {
            let Titulo = "Reporte de stock con costo";
            res.render("facturacion/reporte_pdf/stock_pdf_costo", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "GranMayor") {
            let Titulo = "Reporte de stock con costo gran mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_gran", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Mayor") {
            let Titulo = "Reporte de stock con costo mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Detal") {
            let Titulo = "Reporte de stock  con costo detal";
            res.render("facturacion/reporte_pdf/stock_pdf_detal", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Todos") {
            res.redirect("/facturacion/stock");
          }
        }
        if (Producto == "TODOS") {
          let stock = await stockDB
            .find()
            .sort({TipoProducto: 1,  Modelo: 1 })
            .then((document) => {
              const contex = {
                stocks: document.map((document) => {
                  return {
                    CodigoT: document.CodigoT,
                    CodigoG: document.CodigoG,
                    Modelo: document.Modelo,
                    CantidadTotal: document.CantidadTotal,
                    TipoProducto: (document.TipoProducto).toUpperCase(),
                    CostoFOB: document.CostoFOB.toFixed(2),
                    CostoFOBTotal: document.CostoFOBTotal.toFixed(2),
                    Costo: document.Costo.toFixed(2),
                    CostoTotal: document.CostoTotal.toFixed(2),
                    CostoGranMayor: document.CostoGranMayor.toFixed(2),
                    CostoGranMayorTotal:
                      document.CostoGranMayorTotal.toFixed(2),
                      Vehiculo: document.Vehiculo,
                      Posicion: (document.Posicion).toUpperCase(),
                    CostoMayor: document.CostoMayor.toFixed(2),
                    CostoMayorTotal: document.CostoMayorTotal.toFixed(2),
                    CostoDetal: document.CostoDetal.toFixed(2),
                    CostoDetalTotal: document.CostoDetalTotal.toFixed(2),
                  };
                }),
              };
              for (i = 0; i < contex.stocks.length; i++) {
                let Descripcion = "";
                let PorcentajeCosto
                let PorcentajeCostoGranMayor
                let PorcentajeCostoMayor
                let PorcentajeCostoDetal
                for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                  if (
                    contex.stocks[i].Vehiculo[x].Modelo ==
                    contex.stocks[i].Vehiculo[
                      contex.stocks[i].Vehiculo.length - 1
                    ].Modelo
                  ) {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                  }
                }
                contex.stocks[i].Descripcion = Descripcion;
                PorcentajeCosto = (((contex.stocks[i].Costo * 100) / contex.stocks[i].CostoFOB) - 100 ).toFixed(2) 
                PorcentajeCostoGranMayor = (((contex.stocks[i].CostoGranMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoMayor = (((contex.stocks[i].CostoMayor * 100) / contex.stocks[i].Costo) - 100 ).toFixed(2) 
                PorcentajeCostoDetal = (((contex.stocks[i].CostoDetal * 100) / contex.stocks[i].Costo) - 100).toFixed(2) 
                
                contex.stocks[i].Costo = `${contex.stocks[i].Costo} (${PorcentajeCosto}%)`
                contex.stocks[i].CostoGranMayor = `${contex.stocks[i].CostoGranMayor} (${PorcentajeCostoGranMayor}%)`
                contex.stocks[i].CostoMayor = `${contex.stocks[i].CostoMayor} (${PorcentajeCostoMayor}%)`
                contex.stocks[i].CostoDetal = `${contex.stocks[i].CostoDetal} (${PorcentajeCostoDetal}%)`
              }
              Stock = contex.stocks;
            });
          if (Costos == "CostoFOB") {
            let Titulo = "Reporte de stock con costo FOB";
            res.render("facturacion/reporte_pdf/stock_pdf_fob", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Costo") {
            let Titulo = "Reporte de stock con costo";
            res.render("facturacion/reporte_pdf/stock_pdf_costo", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "GranMayor") {
            let Titulo = "Reporte de stock con costo gran mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_gran", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Mayor") {
            let Titulo = "Reporte de stock con costo mayor";
            res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Detal") {
            let Titulo = "Reporte de stock  con costo detal";
            res.render("facturacion/reporte_pdf/stock_pdf_detal", {
              Stock,
              Titulo,
            });
          }
          if (Costos == "Todos") {
            res.redirect("/facturacion/stock");
          }
        }
      }
    }
  }
  if(Estado == "Produccion"){
    let ordenes = await ordenesProveedorDB.find({Estado : "Produccion"})
    if(MayoresACero){
    if(Formato == "Excel"){
      if(Producto == "AMORTIGUADOR"){
          let Stock = []
          let unicos
          for( i= 0; i< ordenes.length; i++){
                stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                Stock.push(stocks)
          }   
          let stock = []
          for(r=0; r< Stock.length; r++){
            for(z=0; z< Stock[r].length; z++){
              stock.push(Stock[r][z])
            } 
          }
          for(x=0; x < stock.length; x++){  
            let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
            let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
            let unico 
            if(repetidos.length > 1){
              let Cantidad = 0
              let PrecioTotal = 0
              for(z = 0; z < repetidos.length; z++){
                Cantidad += repetidos[z].Cantidad
                PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
              }
              stock[x].Cantidad = Cantidad
              stock[x].PrecioTotal = PrecioTotal
            }
            if(repetidos2.length> 1){
              for(p=0; p< repetidos2.length; p++){
                for(h=0; h< repetidos2.length; h++){
                  if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                    unico = repetidos2[p]
                  }
                }
              }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
            }
          }         
          if(Costos == "CostoFOB"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo FOB").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo FOB total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;

            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(stock[i].PrecioTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +stock[i].PrecioTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Amortiguadores en produccion -COSTOFOB-.xlsx", res);


          }
          if(Costos == "Costo"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].Costo).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Amortiguadores en produccion -COSTO-.xlsx", res);
  


          }
          if(Costos == "GranMayor"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo gran mayor").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo gran mayor total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Amortiguadores en produccion-GRANMAYOR-.xlsx", res);
  

          }
          if(Costos == "Mayor"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo mayor").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo mayor total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Amortiguadores en produccion -MAYOR-.xlsx", res);
  

          }
          if(Costos == "Detal"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo detal").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo detal total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Amortiguadores en produccion -DETAL-.xlsx", res);
  

          }
          if(Costos == "Todos"){

            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo FOB").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo gran mayor").style(style);
            ws.cell(1, 8).string("Costo mayor").style(style);
            ws.cell(1, 9).string("Costo detal").style(style);
            ws.cell(1, 10).string("Cantidad Total").style(style);
            ws.cell(1, 11).string("Costo total").style(style);
            ws.cell(1, 12).string("Costo FOB total").style(style);
            ws.cell(1, 13).string("Costo gran mayor total").style(style);
            ws.cell(1, 14).string("Costo mayor total").style(style);
            ws.cell(1, 15).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              
              let CostoFOBTotal = (+stock[i].Cantidad * +stock[i].PrecioUnidad).toFixed(2)
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              let CostoGranMayorTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
              let CostoMayorTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              let CostoDetalTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
  

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoFOBTotal);
              ws.cell(fila, columna++).number(CostoTotal);
              ws.cell(fila, columna++).number(CostoGranMayorTotal);
              ws.cell(fila, columna++).number(CostoMayorTotal);
              ws.cell(fila, columna++).number(CostoDetalTotal);

              cantidad += +stock[i].Cantidad;
              fob += +CostoFOBTotal;
              costo += +CostoTotal;
              gran += +CostoGranMayorTotal;
              mayor += +CostoMayorTotal;
              detal += +CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 9).string("Totales").style(styleTotal);
            ws.cell(fila, 10).number(cantidad);
            ws.cell(fila, 11).number(costo);
            ws.cell(fila, 12).number(fob);
            ws.cell(fila, 13).number(gran);
            ws.cell(fila, 14).number(mayor);
            ws.cell(fila, 15).number(detal);

            wb.write("Amortiguadores en produccion.xlsx", res);

          }
        
      }if(Producto == "Base de amoritguador"){
        let Stock = []
          let unicos
          for( i= 0; i< ordenes.length; i++){
                stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR" || data.TipoProducto == "BASE DE AMORTIGUADOR")
                Stock.push(stocks)
          }   
          let stock = []
          for(r=0; r< Stock.length; r++){
            for(z=0; z< Stock[r].length; z++){
              stock.push(Stock[r][z])
            } 
          }
          for(x=0; x < stock.length; x++){  
            let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
            let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
            let unico 
            if(repetidos.length > 1){
              let Cantidad = 0
              let PrecioTotal = 0
              for(z = 0; z < repetidos.length; z++){
                Cantidad += repetidos[z].Cantidad
                PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
              }
              stock[x].Cantidad = Cantidad
              stock[x].PrecioTotal = PrecioTotal
            }
            if(repetidos2.length> 1){
              for(p=0; p< repetidos2.length; p++){
                for(h=0; h< repetidos2.length; h++){
                  if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                    unico = repetidos2[p]
                  }
                }
              }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
            }
          }         
          if(Costos == "CostoFOB"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo FOB").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo FOB total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;

            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(stock[i].PrecioTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +stock[i].PrecioTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion -COSTOFOB-.xlsx", res);


          }
          if(Costos == "Costo"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].Costo).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Bases en produccion -COSTO-.xlsx", res);
  


          }
          if(Costos == "GranMayor"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo gran mayor").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo gran mayor total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Bases en produccion-GRANMAYOR-.xlsx", res);
  

          }
          if(Costos == "Mayor"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo mayor").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo mayor total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Bases en produccion -MAYOR-.xlsx", res);
  

          }
          if(Costos == "Detal"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo detal").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo detal total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Bases en produccion -DETAL-.xlsx", res);
  

          }
          if(Costos == "Todos"){

            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo FOB").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo gran mayor").style(style);
            ws.cell(1, 8).string("Costo mayor").style(style);
            ws.cell(1, 9).string("Costo detal").style(style);
            ws.cell(1, 10).string("Cantidad Total").style(style);
            ws.cell(1, 11).string("Costo total").style(style);
            ws.cell(1, 12).string("Costo FOB total").style(style);
            ws.cell(1, 13).string("Costo gran mayor total").style(style);
            ws.cell(1, 14).string("Costo mayor total").style(style);
            ws.cell(1, 15).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              
              let CostoFOBTotal = (+stock[i].Cantidad * +stock[i].PrecioUnidad).toFixed(2)
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              let CostoGranMayorTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
              let CostoMayorTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              let CostoDetalTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
  

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoFOBTotal);
              ws.cell(fila, columna++).number(CostoTotal);
              ws.cell(fila, columna++).number(CostoGranMayorTotal);
              ws.cell(fila, columna++).number(CostoMayorTotal);
              ws.cell(fila, columna++).number(CostoDetalTotal);

              cantidad += +stock[i].Cantidad;
              fob += +CostoFOBTotal;
              costo += +CostoTotal;
              gran += +CostoGranMayorTotal;
              mayor += +CostoMayorTotal;
              detal += +CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 9).string("Totales").style(styleTotal);
            ws.cell(fila, 10).number(cantidad);
            ws.cell(fila, 11).number(costo);
            ws.cell(fila, 12).number(fob);
            ws.cell(fila, 13).number(gran);
            ws.cell(fila, 14).number(mayor);
            ws.cell(fila, 15).number(detal);

            wb.write("Bases en produccion.xlsx", res);

          }

      }if(Producto == "GUARDAPOLVO"){
        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO" || data.TipoProducto == "GUARDAPOLVO")
              Stock.push(stocks)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }         
        if(Costos == "CostoFOB"){
        ws.cell(1, 1).string("Codigo Thomson").style(style);
        ws.cell(1, 2).string("Producto").style(style);
        ws.cell(1, 3).string("Descripción").style(style);
        ws.cell(1, 4).string("Posición").style(style);
        ws.cell(1, 5).string("Costo FOB").style(style);
        ws.cell(1, 6).string("Cantidad Total").style(style);
        ws.cell(1, 7).string("Costo FOB total").style(style);

        let cantidad = 0;
        let precioTotal = 0;
        let fila = 2;
        for (i = 0; i < stock.length; i++) {
          columna = 1;

          ws.cell(fila, columna++).string(stock[i].CodigoT);
          ws.cell(fila, columna++).string(stock[i].TipoProducto);
          ws.cell(fila, columna++).string(stock[i].Descripcion);
          ws.cell(fila, columna++).string(stock[i].Posicion);
          ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
          ws.cell(fila, columna++).number(stock[i].Cantidad);
          ws.cell(fila, columna++).number(stock[i].PrecioTotal);

          cantidad += +stock[i].Cantidad;
          precioTotal += +stock[i].PrecioTotal;
          fila++;
        }

        fila++;

        ws.cell(fila, 5).string("Totales").style(styleTotal);
        ws.cell(fila, 6).number(cantidad);
        ws.cell(fila, 7).number(precioTotal);

        wb.write("Bases en produccion -COSTOFOB-.xlsx", res);


        }
        if(Costos == "Costo"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].Costo).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].Costo);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion -COSTO-.xlsx", res);



        }
        if(Costos == "GranMayor"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo gran mayor").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo gran mayor total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion-GRANMAYOR-.xlsx", res);


        }
        if(Costos == "Mayor"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo mayor").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo mayor total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoMayor);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 6).string("Totales").style(styleTotal);
          ws.cell(fila, 7).number(cantidad);
          ws.cell(fila, 8).number(precioTotal);

          wb.write("Bases en produccion -MAYOR-.xlsx", res);


        }
        if(Costos == "Detal"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo detal").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo detal total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoDetal);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion -DETAL-.xlsx", res);


        }
        if(Costos == "Todos"){

          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo FOB").style(style);
          ws.cell(1, 6).string("Costo").style(style);
          ws.cell(1, 7).string("Costo gran mayor").style(style);
          ws.cell(1, 8).string("Costo mayor").style(style);
          ws.cell(1, 9).string("Costo detal").style(style);
          ws.cell(1, 10).string("Cantidad Total").style(style);
          ws.cell(1, 11).string("Costo total").style(style);
          ws.cell(1, 12).string("Costo FOB total").style(style);
          ws.cell(1, 13).string("Costo gran mayor total").style(style);
          ws.cell(1, 14).string("Costo mayor total").style(style);
          ws.cell(1, 15).string("Costo detal total").style(style);

          let cantidad = 0;
          let costo = 0;
          let fob = 0;
          let gran = 0;
          let mayor = 0;
          let detal = 0;
          let fila = 2;

          for (i = 0; i < stock.length; i++) {
            columna = 1;
            
            let CostoFOBTotal = (+stock[i].Cantidad * +stock[i].PrecioUnidad).toFixed(2)
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            let CostoGranMayorTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
            let CostoMayorTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            let CostoDetalTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)


            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
            ws.cell(fila, columna++).number(stock[i].Costo);
            ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
            ws.cell(fila, columna++).number(stock[i].CostoMayor);
            ws.cell(fila, columna++).number(stock[i].CostoDetal);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoFOBTotal);
            ws.cell(fila, columna++).number(CostoTotal);
            ws.cell(fila, columna++).number(CostoGranMayorTotal);
            ws.cell(fila, columna++).number(CostoMayorTotal);
            ws.cell(fila, columna++).number(CostoDetalTotal);

            cantidad += +stock[i].Cantidad;
            fob += +CostoFOBTotal;
            costo += +CostoTotal;
            gran += +CostoGranMayorTotal;
            mayor += +CostoMayorTotal;
            detal += +CostoDetalTotal;

            fila++;
          }

          fila++;

          ws.cell(fila, 9).string("Totales").style(styleTotal);
          ws.cell(fila, 10).number(cantidad);
          ws.cell(fila, 11).number(costo);
          ws.cell(fila, 12).number(fob);
          ws.cell(fila, 13).number(gran);
          ws.cell(fila, 14).number(mayor);
          ws.cell(fila, 15).number(detal);

          wb.write("Bases en produccion.xlsx", res);

        }

      }if(Producto == "TODOS"){

        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              Stock.push(ordenes[i].Productos)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }         
        if(Costos == "CostoFOB"){
        ws.cell(1, 1).string("Codigo Thomson").style(style);
        ws.cell(1, 2).string("Producto").style(style);
        ws.cell(1, 3).string("Descripción").style(style);
        ws.cell(1, 4).string("Posición").style(style);
        ws.cell(1, 5).string("Costo FOB").style(style);
        ws.cell(1, 6).string("Cantidad Total").style(style);
        ws.cell(1, 7).string("Costo FOB total").style(style);

        let cantidad = 0;
        let precioTotal = 0;
        let fila = 2;
        for (i = 0; i < stock.length; i++) {
          columna = 1;

          ws.cell(fila, columna++).string(stock[i].CodigoT);
          ws.cell(fila, columna++).string(stock[i].TipoProducto);
          ws.cell(fila, columna++).string(stock[i].Descripcion);
          ws.cell(fila, columna++).string(stock[i].Posicion);
          ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
          ws.cell(fila, columna++).number(stock[i].Cantidad);
          ws.cell(fila, columna++).number(stock[i].PrecioTotal);

          cantidad += +stock[i].Cantidad;
          precioTotal += +stock[i].PrecioTotal;
          fila++;
        }

        fila++;

        ws.cell(fila, 5).string("Totales").style(styleTotal);
        ws.cell(fila, 6).number(cantidad);
        ws.cell(fila, 7).number(precioTotal);

        wb.write("Bases en produccion -COSTOFOB-.xlsx", res);


        }
        if(Costos == "Costo"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].Costo).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].Costo);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion -COSTO-.xlsx", res);



        }
        if(Costos == "GranMayor"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo gran mayor").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo gran mayor total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion-GRANMAYOR-.xlsx", res);


        }
        if(Costos == "Mayor"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo mayor").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo mayor total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoMayor);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion -MAYOR-.xlsx", res);


        }
        if(Costos == "Detal"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo detal").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo detal total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoDetal);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion -DETAL-.xlsx", res);


        }
        if(Costos == "Todos"){

          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo FOB").style(style);
          ws.cell(1, 6).string("Costo").style(style);
          ws.cell(1, 7).string("Costo gran mayor").style(style);
          ws.cell(1, 8).string("Costo mayor").style(style);
          ws.cell(1, 9).string("Costo detal").style(style);
          ws.cell(1, 10).string("Cantidad Total").style(style);
          ws.cell(1, 11).string("Costo total").style(style);
          ws.cell(1, 12).string("Costo FOB total").style(style);
          ws.cell(1, 13).string("Costo gran mayor total").style(style);
          ws.cell(1, 14).string("Costo mayor total").style(style);
          ws.cell(1, 15).string("Costo detal total").style(style);

          let cantidad = 0;
          let costo = 0;
          let fob = 0;
          let gran = 0;
          let mayor = 0;
          let detal = 0;
          let fila = 2;

          for (i = 0; i < stock.length; i++) {
            columna = 1;
            
            let CostoFOBTotal = (+stock[i].Cantidad * +stock[i].PrecioUnidad).toFixed(2)
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            let CostoGranMayorTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
            let CostoMayorTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            let CostoDetalTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)


            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
            ws.cell(fila, columna++).number(stock[i].Costo);
            ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
            ws.cell(fila, columna++).number(stock[i].CostoMayor);
            ws.cell(fila, columna++).number(stock[i].CostoDetal);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoFOBTotal);
            ws.cell(fila, columna++).number(CostoTotal);
            ws.cell(fila, columna++).number(CostoGranMayorTotal);
            ws.cell(fila, columna++).number(CostoMayorTotal);
            ws.cell(fila, columna++).number(CostoDetalTotal);

            cantidad += +stock[i].Cantidad;
            fob += +CostoFOBTotal;
            costo += +CostoTotal;
            gran += +CostoGranMayorTotal;
            mayor += +CostoMayorTotal;
            detal += +CostoDetalTotal;

            fila++;
          }

          fila++;

          ws.cell(fila, 9).string("Totales").style(styleTotal);
          ws.cell(fila, 10).number(cantidad);
          ws.cell(fila, 11).number(costo);
          ws.cell(fila, 12).number(fob);
          ws.cell(fila, 13).number(gran);
          ws.cell(fila, 14).number(mayor);
          ws.cell(fila, 15).number(detal);

          wb.write("Bases en produccion.xlsx", res);

        }

      }
    }if(Formato == "PDF"){
      if(Producto == "AMORTIGUADOR"){
        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
              Stock.push(stocks)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }
        stock = stock.map((data) => {
          return{
            CodigoT: data.CodigoT,
            CodigoG: "-",
            TipoProducto: data.TipoProducto,
            Descripcion: data.Descripcion,
            Posicion: data.Posicion,
            CantidadTotal: data.Cantidad,
            Costo: data.Costo,
            CostoTotal: (+data.Costo * +data.Cantidad).toFixed(2),
            CostoFOB: data.PrecioUnidad,
            CostoFOBTotal: (+data.PrecioUnidad * +data.Cantidad).toFixed(2),
            CostoGranMayor: data.CostoGranMayor,
            CostoGranMayorTotal: (+data.CostoGranMayor * +data.Cantidad).toFixed(2),
            CostoMayor: data.CostoMayor,
            CostoMayorTotal: (+data.CostoMayor * +data.Cantidad).toFixed(2),
            CostoDetal: data.CostoDetal,
            CostoDetalTotal: (+data.CostoDetal * +data.Cantidad).toFixed(2),
          }
        })
        if (Costos == "CostoFOB") {
          let Titulo = "Amortiguadores en produccion - Costo FOB";
          res.render("facturacion/reporte_pdf/stock_pdf_fob", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Costo") {
          let Titulo = "Amortiguadores en produccion - Costo";
          res.render("facturacion/reporte_pdf/stock_pdf_costo", {
            stock,
            Titulo,
          });
        }
        if (Costos == "GranMayor") {
          let Titulo = "Amortiguadores en produccion - Costo gran mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_gran", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Mayor") {
          let Titulo = "Amortiguadores en produccion - Costo mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Detal") {
          let Titulo = "Amortiguadores en produccion - Costo detal";
          res.render("facturacion/reporte_pdf/stock_pdf_detal", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Todos") {
          res.redirect("/facturacion/reporte-stock");
        } 

      }
      if(Producto == "BASE DE AMORTIGUADOR"){
        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR" || data.TipoProducto == "BASE DE AMORTIGUADOR")
              Stock.push(stocks)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }
        stock = stock.map((data) => {
          return{
            CodigoT: data.CodigoT,
            CodigoG: "-",
            TipoProducto: data.TipoProducto,
            Descripcion: data.Descripcion,
            Posicion: data.Posicion,
            CantidadTotal: data.Cantidad,
            Costo: data.Costo,
            CostoTotal: (+data.Costo * +data.Cantidad).toFixed(2),
            CostoFOB: data.PrecioUnidad,
            CostoFOBTotal: (+data.PrecioUnidad * +data.Cantidad).toFixed(2),
            CostoGranMayor: data.CostoGranMayor,
            CostoGranMayorTotal: (+data.CostoGranMayor * +data.Cantidad).toFixed(2),
            CostoMayor: data.CostoMayor,
            CostoMayorTotal: (+data.CostoMayor * +data.Cantidad).toFixed(2),
            CostoDetal: data.CostoDetal,
            CostoDetalTotal: (+data.CostoDetal * +data.Cantidad).toFixed(2),
          }
        })
        if (Costos == "CostoFOB") {
          let Titulo = "bases de amortiguador en produccion - Costo FOB";
          res.render("facturacion/reporte_pdf/stock_pdf_fob", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Costo") {
          let Titulo = "bases de amortiguador en produccion - Costo";
          res.render("facturacion/reporte_pdf/stock_pdf_costo", {
            stock,
            Titulo,
          });
        }
        if (Costos == "GranMayor") {
          let Titulo = "bases de amortiguador en produccion - Costo gran mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_gran", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Mayor") {
          let Titulo = "bases de amortiguador en produccion - Costo mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Detal") {
          let Titulo = "bases de amortiguador en produccion - Costo detal";
          res.render("facturacion/reporte_pdf/stock_pdf_detal", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Todos") {
          res.redirect("/facturacion/reporte-stock");
        }   
      }
      if(Producto == "GUARDAPOLVO"){
        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO" || data.TipoProducto == "GUARDAPOLVO")
              Stock.push(stocks)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }
        stock = stock.map((data) => {
          return{
            CodigoT: data.CodigoT,
            CodigoG: "-",
            TipoProducto: data.TipoProducto,
            Descripcion: data.Descripcion,
            Posicion: data.Posicion,
            CantidadTotal: data.Cantidad,
            Costo: data.Costo,
            CostoTotal: (+data.Costo * +data.Cantidad).toFixed(2),
            CostoFOB: data.PrecioUnidad,
            CostoFOBTotal: (+data.PrecioUnidad * +data.Cantidad).toFixed(2),
            CostoGranMayor: data.CostoGranMayor,
            CostoGranMayorTotal: (+data.CostoGranMayor * +data.Cantidad).toFixed(2),
            CostoMayor: data.CostoMayor,
            CostoMayorTotal: (+data.CostoMayor * +data.Cantidad).toFixed(2),
            CostoDetal: data.CostoDetal,
            CostoDetalTotal: (+data.CostoDetal * +data.Cantidad).toFixed(2),
          }
        })
        if (Costos == "CostoFOB") {
          let Titulo = "Guardapolvos en produccion - Costo FOB";
          res.render("facturacion/reporte_pdf/stock_pdf_fob", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Costo") {
          let Titulo = "Guardapolvos en produccion - Costo";
          res.render("facturacion/reporte_pdf/stock_pdf_costo", {
            stock,
            Titulo,
          });
        }
        if (Costos == "GranMayor") {
          let Titulo = "Guardapolvos en produccion - Costo gran mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_gran", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Mayor") {
          let Titulo = "Guardapolvos en produccion - Costo mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Detal") {
          let Titulo = "Guardapolvos en produccion - Costo detal";
          res.render("facturacion/reporte_pdf/stock_pdf_detal", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Todos") {
          res.redirect("/facturacion/reporte-stock");
        }   
      }
      if(Producto == "TODOS"){
        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              Stock.push(ordenes[i].Productos)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }
        stock = stock.map((data) => {
          return{
            CodigoT: data.CodigoT,
            CodigoG: "-",
            TipoProducto: data.TipoProducto,
            Descripcion: data.Descripcion,
            Posicion: data.Posicion,
            CantidadTotal: data.Cantidad,
            Costo: data.Costo,
            CostoTotal: (+data.Costo * +data.Cantidad).toFixed(2),
            CostoFOB: data.PrecioUnidad,
            CostoFOBTotal: (+data.PrecioUnidad * +data.Cantidad).toFixed(2),
            CostoGranMayor: data.CostoGranMayor,
            CostoGranMayorTotal: (+data.CostoGranMayor * +data.Cantidad).toFixed(2),
            CostoMayor: data.CostoMayor,
            CostoMayorTotal: (+data.CostoMayor * +data.Cantidad).toFixed(2),
            CostoDetal: data.CostoDetal,
            CostoDetalTotal: (+data.CostoDetal * +data.Cantidad).toFixed(2),
          }
        })
        if (Costos == "CostoFOB") {
          let Titulo = "Productos en produccion - Costo FOB";
          res.render("facturacion/reporte_pdf/stock_pdf_fob", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Costo") {
          let Titulo = "Productos en produccion - Costo";
          res.render("facturacion/reporte_pdf/stock_pdf_costo", {
            stock,
            Titulo,
          });
        }
        if (Costos == "GranMayor") {
          let Titulo = "Productos en produccion - Costo gran mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_gran", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Mayor") {
          let Titulo = "Productos en produccion - Costo mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Detal") {
          let Titulo = "Productos en produccion - Costo detal";
          res.render("facturacion/reporte_pdf/stock_pdf_detal", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Todos") {
          res.redirect("/facturacion/reporte-stock");
        }    
      }
    }
  }

  }
  if(Estado == "Transito"){
    let ordenes = await ordenesProveedorDB.find({Estado : "Transito"})
    if(MayoresACero){
    if(Formato == "Excel"){
      if(Producto == "AMORTIGUADOR"){
          let Stock = []
          let unicos
          for( i= 0; i< ordenes.length; i++){
                stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                Stock.push(stocks)
          }   
          let stock = []
          for(r=0; r< Stock.length; r++){
            for(z=0; z< Stock[r].length; z++){
              stock.push(Stock[r][z])
            } 
          }
          for(x=0; x < stock.length; x++){  
            let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
            let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
            let unico 
            if(repetidos.length > 1){
              let Cantidad = 0
              let PrecioTotal = 0
              for(z = 0; z < repetidos.length; z++){
                Cantidad += repetidos[z].Cantidad
                PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
              }
              stock[x].Cantidad = Cantidad
              stock[x].PrecioTotal = PrecioTotal
            }
            if(repetidos2.length> 1){
              for(p=0; p< repetidos2.length; p++){
                for(h=0; h< repetidos2.length; h++){
                  if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                    unico = repetidos2[p]
                  }
                }
              }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
            }
          }         
          if(Costos == "CostoFOB"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo FOB").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo FOB total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;

            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(stock[i].PrecioTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +stock[i].PrecioTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Amortiguadores en transito -COSTOFOB-.xlsx", res);


          }
          if(Costos == "Costo"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].Costo).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Amortiguadores en transito -COSTO-.xlsx", res);
  


          }
          if(Costos == "GranMayor"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo gran mayor").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo gran mayor total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Amortiguadores en transito-GRANMAYOR-.xlsx", res);
  

          }
          if(Costos == "Mayor"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo mayor").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo mayor total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Amortiguadores en transito -MAYOR-.xlsx", res);
  

          }
          if(Costos == "Detal"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo detal").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo detal total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Amortiguadores en transito -DETAL-.xlsx", res);
  

          }
          if(Costos == "Todos"){

            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo FOB").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo gran mayor").style(style);
            ws.cell(1, 8).string("Costo mayor").style(style);
            ws.cell(1, 9).string("Costo detal").style(style);
            ws.cell(1, 10).string("Cantidad Total").style(style);
            ws.cell(1, 11).string("Costo total").style(style);
            ws.cell(1, 12).string("Costo FOB total").style(style);
            ws.cell(1, 13).string("Costo gran mayor total").style(style);
            ws.cell(1, 14).string("Costo mayor total").style(style);
            ws.cell(1, 15).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              
              let CostoFOBTotal = (+stock[i].Cantidad * +stock[i].PrecioUnidad).toFixed(2)
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              let CostoGranMayorTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
              let CostoMayorTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              let CostoDetalTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
  

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoFOBTotal);
              ws.cell(fila, columna++).number(CostoTotal);
              ws.cell(fila, columna++).number(CostoGranMayorTotal);
              ws.cell(fila, columna++).number(CostoMayorTotal);
              ws.cell(fila, columna++).number(CostoDetalTotal);

              cantidad += +stock[i].Cantidad;
              fob += +CostoFOBTotal;
              costo += +CostoTotal;
              gran += +CostoGranMayorTotal;
              mayor += +CostoMayorTotal;
              detal += +CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 9).string("Totales").style(styleTotal);
            ws.cell(fila, 10).number(cantidad);
            ws.cell(fila, 11).number(costo);
            ws.cell(fila, 12).number(fob);
            ws.cell(fila, 13).number(gran);
            ws.cell(fila, 14).number(mayor);
            ws.cell(fila, 15).number(detal);

            wb.write("Amortiguadores en transito.xlsx", res);

          }
        
      }if(Producto == "Base de amoritguador"){
        let Stock = []
          let unicos
          for( i= 0; i< ordenes.length; i++){
                stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR" || data.TipoProducto == "BASE DE AMORTIGUADOR")
                Stock.push(stocks)
          }   
          let stock = []
          for(r=0; r< Stock.length; r++){
            for(z=0; z< Stock[r].length; z++){
              stock.push(Stock[r][z])
            } 
          }
          for(x=0; x < stock.length; x++){  
            let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
            let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
            let unico 
            if(repetidos.length > 1){
              let Cantidad = 0
              let PrecioTotal = 0
              for(z = 0; z < repetidos.length; z++){
                Cantidad += repetidos[z].Cantidad
                PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
              }
              stock[x].Cantidad = Cantidad
              stock[x].PrecioTotal = PrecioTotal
            }
            if(repetidos2.length> 1){
              for(p=0; p< repetidos2.length; p++){
                for(h=0; h< repetidos2.length; h++){
                  if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                    unico = repetidos2[p]
                  }
                }
              }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
            }
          }         
          if(Costos == "CostoFOB"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo FOB").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo FOB total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;

            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(stock[i].PrecioTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +stock[i].PrecioTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en transito -COSTOFOB-.xlsx", res);


          }
          if(Costos == "Costo"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].Costo).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Bases en transito -COSTO-.xlsx", res);
  


          }
          if(Costos == "GranMayor"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo gran mayor").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo gran mayor total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Bases en transito-GRANMAYOR-.xlsx", res);
  

          }
          if(Costos == "Mayor"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo mayor").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo mayor total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Bases en transito -MAYOR-.xlsx", res);
  

          }
          if(Costos == "Detal"){
            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo detal").style(style);
            ws.cell(1, 6).string("Cantidad Total").style(style);
            ws.cell(1, 7).string("Costo detal total").style(style);
  
            let cantidad = 0;
            let precioTotal = 0;
            let fila = 2;
            for (i = 0; i < stock.length; i++) {
              columna = 1;
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoTotal);
  
              cantidad += +stock[i].Cantidad;
              precioTotal += +CostoTotal;
              fila++;
            }
  
            fila++;
  
            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(cantidad);
            ws.cell(fila, 7).number(precioTotal);
  
            wb.write("Bases en transito -DETAL-.xlsx", res);
  

          }
          if(Costos == "Todos"){

            ws.cell(1, 1).string("Codigo Thomson").style(style);
            ws.cell(1, 2).string("Producto").style(style);
            ws.cell(1, 3).string("Descripción").style(style);
            ws.cell(1, 4).string("Posición").style(style);
            ws.cell(1, 5).string("Costo FOB").style(style);
            ws.cell(1, 6).string("Costo").style(style);
            ws.cell(1, 7).string("Costo gran mayor").style(style);
            ws.cell(1, 8).string("Costo mayor").style(style);
            ws.cell(1, 9).string("Costo detal").style(style);
            ws.cell(1, 10).string("Cantidad Total").style(style);
            ws.cell(1, 11).string("Costo total").style(style);
            ws.cell(1, 12).string("Costo FOB total").style(style);
            ws.cell(1, 13).string("Costo gran mayor total").style(style);
            ws.cell(1, 14).string("Costo mayor total").style(style);
            ws.cell(1, 15).string("Costo detal total").style(style);

            let cantidad = 0;
            let costo = 0;
            let fob = 0;
            let gran = 0;
            let mayor = 0;
            let detal = 0;
            let fila = 2;

            for (i = 0; i < stock.length; i++) {
              columna = 1;
              
              let CostoFOBTotal = (+stock[i].Cantidad * +stock[i].PrecioUnidad).toFixed(2)
              let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              let CostoGranMayorTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
              let CostoMayorTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
              let CostoDetalTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
  

              ws.cell(fila, columna++).string(stock[i].CodigoT);
              ws.cell(fila, columna++).string(stock[i].TipoProducto);
              ws.cell(fila, columna++).string(stock[i].Descripcion);
              ws.cell(fila, columna++).string(stock[i].Posicion);
              ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
              ws.cell(fila, columna++).number(stock[i].Costo);
              ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
              ws.cell(fila, columna++).number(stock[i].CostoMayor);
              ws.cell(fila, columna++).number(stock[i].CostoDetal);
              ws.cell(fila, columna++).number(stock[i].Cantidad);
              ws.cell(fila, columna++).number(CostoFOBTotal);
              ws.cell(fila, columna++).number(CostoTotal);
              ws.cell(fila, columna++).number(CostoGranMayorTotal);
              ws.cell(fila, columna++).number(CostoMayorTotal);
              ws.cell(fila, columna++).number(CostoDetalTotal);

              cantidad += +stock[i].Cantidad;
              fob += +CostoFOBTotal;
              costo += +CostoTotal;
              gran += +CostoGranMayorTotal;
              mayor += +CostoMayorTotal;
              detal += +CostoDetalTotal;

              fila++;
            }

            fila++;

            ws.cell(fila, 9).string("Totales").style(styleTotal);
            ws.cell(fila, 10).number(cantidad);
            ws.cell(fila, 11).number(costo);
            ws.cell(fila, 12).number(fob);
            ws.cell(fila, 13).number(gran);
            ws.cell(fila, 14).number(mayor);
            ws.cell(fila, 15).number(detal);

            wb.write("Bases en produccion.xlsx", res);

          }

      }if(Producto == "GUARDAPOLVO"){
        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO" || data.TipoProducto == "GUARDAPOLVO")
              Stock.push(stocks)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }         
        if(Costos == "CostoFOB"){
        ws.cell(1, 1).string("Codigo Thomson").style(style);
        ws.cell(1, 2).string("Producto").style(style);
        ws.cell(1, 3).string("Descripción").style(style);
        ws.cell(1, 4).string("Posición").style(style);
        ws.cell(1, 5).string("Costo FOB").style(style);
        ws.cell(1, 6).string("Cantidad Total").style(style);
        ws.cell(1, 7).string("Costo FOB total").style(style);

        let cantidad = 0;
        let precioTotal = 0;
        let fila = 2;
        for (i = 0; i < stock.length; i++) {
          columna = 1;

          ws.cell(fila, columna++).string(stock[i].CodigoT);
          ws.cell(fila, columna++).string(stock[i].TipoProducto);
          ws.cell(fila, columna++).string(stock[i].Descripcion);
          ws.cell(fila, columna++).string(stock[i].Posicion);
          ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
          ws.cell(fila, columna++).number(stock[i].Cantidad);
          ws.cell(fila, columna++).number(stock[i].PrecioTotal);

          cantidad += +stock[i].Cantidad;
          precioTotal += +stock[i].PrecioTotal;
          fila++;
        }

        fila++;

        ws.cell(fila, 5).string("Totales").style(styleTotal);
        ws.cell(fila, 6).number(cantidad);
        ws.cell(fila, 7).number(precioTotal);

        wb.write("guardapolvos en transito -COSTOFOB-.xlsx", res);


        }
        if(Costos == "Costo"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].Costo).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].Costo);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Guardapolvos en transito -COSTO-.xlsx", res);



        }
        if(Costos == "GranMayor"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo gran mayor").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo gran mayor total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion-GRANMAYOR-.xlsx", res);


        }
        if(Costos == "Mayor"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo mayor").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo mayor total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoMayor);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 6).string("Totales").style(styleTotal);
          ws.cell(fila, 7).number(cantidad);
          ws.cell(fila, 8).number(precioTotal);

          wb.write("Bases en produccion -MAYOR-.xlsx", res);


        }
        if(Costos == "Detal"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo detal").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo detal total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoDetal);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion -DETAL-.xlsx", res);


        }
        if(Costos == "Todos"){

          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo FOB").style(style);
          ws.cell(1, 6).string("Costo").style(style);
          ws.cell(1, 7).string("Costo gran mayor").style(style);
          ws.cell(1, 8).string("Costo mayor").style(style);
          ws.cell(1, 9).string("Costo detal").style(style);
          ws.cell(1, 10).string("Cantidad Total").style(style);
          ws.cell(1, 11).string("Costo total").style(style);
          ws.cell(1, 12).string("Costo FOB total").style(style);
          ws.cell(1, 13).string("Costo gran mayor total").style(style);
          ws.cell(1, 14).string("Costo mayor total").style(style);
          ws.cell(1, 15).string("Costo detal total").style(style);

          let cantidad = 0;
          let costo = 0;
          let fob = 0;
          let gran = 0;
          let mayor = 0;
          let detal = 0;
          let fila = 2;

          for (i = 0; i < stock.length; i++) {
            columna = 1;
            
            let CostoFOBTotal = (+stock[i].Cantidad * +stock[i].PrecioUnidad).toFixed(2)
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            let CostoGranMayorTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
            let CostoMayorTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            let CostoDetalTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)


            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
            ws.cell(fila, columna++).number(stock[i].Costo);
            ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
            ws.cell(fila, columna++).number(stock[i].CostoMayor);
            ws.cell(fila, columna++).number(stock[i].CostoDetal);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoFOBTotal);
            ws.cell(fila, columna++).number(CostoTotal);
            ws.cell(fila, columna++).number(CostoGranMayorTotal);
            ws.cell(fila, columna++).number(CostoMayorTotal);
            ws.cell(fila, columna++).number(CostoDetalTotal);

            cantidad += +stock[i].Cantidad;
            fob += +CostoFOBTotal;
            costo += +CostoTotal;
            gran += +CostoGranMayorTotal;
            mayor += +CostoMayorTotal;
            detal += +CostoDetalTotal;

            fila++;
          }

          fila++;

          ws.cell(fila, 9).string("Totales").style(styleTotal);
          ws.cell(fila, 10).number(cantidad);
          ws.cell(fila, 11).number(costo);
          ws.cell(fila, 12).number(fob);
          ws.cell(fila, 13).number(gran);
          ws.cell(fila, 14).number(mayor);
          ws.cell(fila, 15).number(detal);

          wb.write("Bases en produccion.xlsx", res);

        }

      }if(Producto == "TODOS"){

        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              Stock.push(ordenes[i].Productos)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }         
        if(Costos == "CostoFOB"){
        ws.cell(1, 1).string("Codigo Thomson").style(style);
        ws.cell(1, 2).string("Producto").style(style);
        ws.cell(1, 3).string("Descripción").style(style);
        ws.cell(1, 4).string("Posición").style(style);
        ws.cell(1, 5).string("Costo FOB").style(style);
        ws.cell(1, 6).string("Cantidad Total").style(style);
        ws.cell(1, 7).string("Costo FOB total").style(style);

        let cantidad = 0;
        let precioTotal = 0;
        let fila = 2;
        for (i = 0; i < stock.length; i++) {
          columna = 1;

          ws.cell(fila, columna++).string(stock[i].CodigoT);
          ws.cell(fila, columna++).string(stock[i].TipoProducto);
          ws.cell(fila, columna++).string(stock[i].Descripcion);
          ws.cell(fila, columna++).string(stock[i].Posicion);
          ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
          ws.cell(fila, columna++).number(stock[i].Cantidad);
          ws.cell(fila, columna++).number(stock[i].PrecioTotal);

          cantidad += +stock[i].Cantidad;
          precioTotal += +stock[i].PrecioTotal;
          fila++;
        }

        fila++;

        ws.cell(fila, 5).string("Totales").style(styleTotal);
        ws.cell(fila, 6).number(cantidad);
        ws.cell(fila, 7).number(precioTotal);

        wb.write("Bases en produccion -COSTOFOB-.xlsx", res);


        }
        if(Costos == "Costo"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].Costo).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].Costo);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion -COSTO-.xlsx", res);



        }
        if(Costos == "GranMayor"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo gran mayor").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo gran mayor total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion-GRANMAYOR-.xlsx", res);


        }
        if(Costos == "Mayor"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo mayor").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo mayor total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoMayor);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion -MAYOR-.xlsx", res);


        }
        if(Costos == "Detal"){
          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo detal").style(style);
          ws.cell(1, 6).string("Cantidad Total").style(style);
          ws.cell(1, 7).string("Costo detal total").style(style);

          let cantidad = 0;
          let precioTotal = 0;
          let fila = 2;
          for (i = 0; i < stock.length; i++) {
            columna = 1;
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)
            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].CostoDetal);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoTotal);

            cantidad += +stock[i].Cantidad;
            precioTotal += +CostoTotal;
            fila++;
          }

          fila++;

          ws.cell(fila, 5).string("Totales").style(styleTotal);
          ws.cell(fila, 6).number(cantidad);
          ws.cell(fila, 7).number(precioTotal);

          wb.write("Bases en produccion -DETAL-.xlsx", res);


        }
        if(Costos == "Todos"){

          ws.cell(1, 1).string("Codigo Thomson").style(style);
          ws.cell(1, 2).string("Producto").style(style);
          ws.cell(1, 3).string("Descripción").style(style);
          ws.cell(1, 4).string("Posición").style(style);
          ws.cell(1, 5).string("Costo FOB").style(style);
          ws.cell(1, 6).string("Costo").style(style);
          ws.cell(1, 7).string("Costo gran mayor").style(style);
          ws.cell(1, 8).string("Costo mayor").style(style);
          ws.cell(1, 9).string("Costo detal").style(style);
          ws.cell(1, 10).string("Cantidad Total").style(style);
          ws.cell(1, 11).string("Costo total").style(style);
          ws.cell(1, 12).string("Costo FOB total").style(style);
          ws.cell(1, 13).string("Costo gran mayor total").style(style);
          ws.cell(1, 14).string("Costo mayor total").style(style);
          ws.cell(1, 15).string("Costo detal total").style(style);

          let cantidad = 0;
          let costo = 0;
          let fob = 0;
          let gran = 0;
          let mayor = 0;
          let detal = 0;
          let fila = 2;

          for (i = 0; i < stock.length; i++) {
            columna = 1;
            
            let CostoFOBTotal = (+stock[i].Cantidad * +stock[i].PrecioUnidad).toFixed(2)
            let CostoTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            let CostoGranMayorTotal = (+stock[i].Cantidad * +stock[i].CostoGranMayor).toFixed(2)
            let CostoMayorTotal = (+stock[i].Cantidad * +stock[i].CostoMayor).toFixed(2)
            let CostoDetalTotal = (+stock[i].Cantidad * +stock[i].CostoDetal).toFixed(2)


            ws.cell(fila, columna++).string(stock[i].CodigoT);
            ws.cell(fila, columna++).string(stock[i].TipoProducto);
            ws.cell(fila, columna++).string(stock[i].Descripcion);
            ws.cell(fila, columna++).string(stock[i].Posicion);
            ws.cell(fila, columna++).number(stock[i].PrecioUnidad);
            ws.cell(fila, columna++).number(stock[i].Costo);
            ws.cell(fila, columna++).number(stock[i].CostoGranMayor);
            ws.cell(fila, columna++).number(stock[i].CostoMayor);
            ws.cell(fila, columna++).number(stock[i].CostoDetal);
            ws.cell(fila, columna++).number(stock[i].Cantidad);
            ws.cell(fila, columna++).number(CostoFOBTotal);
            ws.cell(fila, columna++).number(CostoTotal);
            ws.cell(fila, columna++).number(CostoGranMayorTotal);
            ws.cell(fila, columna++).number(CostoMayorTotal);
            ws.cell(fila, columna++).number(CostoDetalTotal);

            cantidad += +stock[i].Cantidad;
            fob += +CostoFOBTotal;
            costo += +CostoTotal;
            gran += +CostoGranMayorTotal;
            mayor += +CostoMayorTotal;
            detal += +CostoDetalTotal;

            fila++;
          }

          fila++;

          ws.cell(fila, 9).string("Totales").style(styleTotal);
          ws.cell(fila, 10).number(cantidad);
          ws.cell(fila, 11).number(costo);
          ws.cell(fila, 12).number(fob);
          ws.cell(fila, 13).number(gran);
          ws.cell(fila, 14).number(mayor);
          ws.cell(fila, 15).number(detal);

          wb.write("Bases en produccion.xlsx", res);

        }

      }
    }if(Formato == "PDF"){
      if(Producto == "AMORTIGUADOR"){
        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
              Stock.push(stocks)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }
        stock = stock.map((data) => {
          return{
            CodigoT: data.CodigoT,
            CodigoG: "-",
            TipoProducto: data.TipoProducto,
            Descripcion: data.Descripcion,
            Posicion: data.Posicion,
            CantidadTotal: data.Cantidad,
            Costo: data.Costo,
            CostoTotal: (+data.Costo * +data.Cantidad).toFixed(2),
            CostoFOB: data.PrecioUnidad,
            CostoFOBTotal: (+data.PrecioUnidad * +data.Cantidad).toFixed(2),
            CostoGranMayor: data.CostoGranMayor,
            CostoGranMayorTotal: (+data.CostoGranMayor * +data.Cantidad).toFixed(2),
            CostoMayor: data.CostoMayor,
            CostoMayorTotal: (+data.CostoMayor * +data.Cantidad).toFixed(2),
            CostoDetal: data.CostoDetal,
            CostoDetalTotal: (+data.CostoDetal * +data.Cantidad).toFixed(2),
          }
        })
        if (Costos == "CostoFOB") {
          let Titulo = "Amortiguadores en transito - Costo FOB";
          res.render("facturacion/reporte_pdf/stock_pdf_fob", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Costo") {
          let Titulo = "Amortiguadores en transito - Costo";
          res.render("facturacion/reporte_pdf/stock_pdf_costo", {
            stock,
            Titulo,
          });
        }
        if (Costos == "GranMayor") {
          let Titulo = "Amortiguadores en transito - Costo gran mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_gran", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Mayor") {
          let Titulo = "Amortiguadores en transito - Costo mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Detal") {
          let Titulo = "Amortiguadores en transito - Costo detal";
          res.render("facturacion/reporte_pdf/stock_pdf_detal", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Todos") {
          res.redirect("/facturacion/reporte-stock");
        } 

      }
      if(Producto == "BASE DE AMORTIGUADOR"){
        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR" || data.TipoProducto == "BASE DE AMORTIGUADOR")
              Stock.push(stocks)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }
        stock = stock.map((data) => {
          return{
            CodigoT: data.CodigoT,
            CodigoG: "-",
            TipoProducto: data.TipoProducto,
            Descripcion: data.Descripcion,
            Posicion: data.Posicion,
            CantidadTotal: data.Cantidad,
            Costo: data.Costo,
            CostoTotal: (+data.Costo * +data.Cantidad).toFixed(2),
            CostoFOB: data.PrecioUnidad,
            CostoFOBTotal: (+data.PrecioUnidad * +data.Cantidad).toFixed(2),
            CostoGranMayor: data.CostoGranMayor,
            CostoGranMayorTotal: (+data.CostoGranMayor * +data.Cantidad).toFixed(2),
            CostoMayor: data.CostoMayor,
            CostoMayorTotal: (+data.CostoMayor * +data.Cantidad).toFixed(2),
            CostoDetal: data.CostoDetal,
            CostoDetalTotal: (+data.CostoDetal * +data.Cantidad).toFixed(2),
          }
        })
        if (Costos == "CostoFOB") {
          let Titulo = "bases de amortiguador en transito - Costo FOB";
          res.render("facturacion/reporte_pdf/stock_pdf_fob", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Costo") {
          let Titulo = "bases de amortiguador en transito - Costo";
          res.render("facturacion/reporte_pdf/stock_pdf_costo", {
            stock,
            Titulo,
          });
        }
        if (Costos == "GranMayor") {
          let Titulo = "bases de amortiguador en transito - Costo gran mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_gran", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Mayor") {
          let Titulo = "bases de amortiguador en transito - Costo mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Detal") {
          let Titulo = "bases de amortiguador en transito - Costo detal";
          res.render("facturacion/reporte_pdf/stock_pdf_detal", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Todos") {
          res.redirect("/facturacion/reporte-stock");
        }   
      }
      if(Producto == "GUARDAPOLVO"){
        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO" || data.TipoProducto == "GUARDAPOLVO")
              Stock.push(stocks)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }
        stock = stock.map((data) => {
          return{
            CodigoT: data.CodigoT,
            CodigoG: "-",
            TipoProducto: data.TipoProducto,
            Descripcion: data.Descripcion,
            Posicion: data.Posicion,
            CantidadTotal: data.Cantidad,
            Costo: data.Costo,
            CostoTotal: (+data.Costo * +data.Cantidad).toFixed(2),
            CostoFOB: data.PrecioUnidad,
            CostoFOBTotal: (+data.PrecioUnidad * +data.Cantidad).toFixed(2),
            CostoGranMayor: data.CostoGranMayor,
            CostoGranMayorTotal: (+data.CostoGranMayor * +data.Cantidad).toFixed(2),
            CostoMayor: data.CostoMayor,
            CostoMayorTotal: (+data.CostoMayor * +data.Cantidad).toFixed(2),
            CostoDetal: data.CostoDetal,
            CostoDetalTotal: (+data.CostoDetal * +data.Cantidad).toFixed(2),
          }
        })
        if (Costos == "CostoFOB") {
          let Titulo = "Guardapolvos en transito - Costo FOB";
          res.render("facturacion/reporte_pdf/stock_pdf_fob", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Costo") {
          let Titulo = "Guardapolvos en transito - Costo";
          res.render("facturacion/reporte_pdf/stock_pdf_costo", {
            stock,
            Titulo,
          });
        }
        if (Costos == "GranMayor") {
          let Titulo = "Guardapolvos en transito - Costo gran mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_gran", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Mayor") {
          let Titulo = "Guardapolvos en transito - Costo mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Detal") {
          let Titulo = "Guardapolvos en transito - Costo detal";
          res.render("facturacion/reporte_pdf/stock_pdf_detal", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Todos") {
          res.redirect("/facturacion/reporte-stock");
        }   
      }
      if(Producto == "TODOS"){
        let Stock = []
        let unicos
        for( i= 0; i< ordenes.length; i++){
              Stock.push(ordenes[i].Productos)
        }   
        let stock = []
        for(r=0; r< Stock.length; r++){
          for(z=0; z< Stock[r].length; z++){
            stock.push(Stock[r][z])
          } 
        }
        for(x=0; x < stock.length; x++){  
          let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
          let unico 
          if(repetidos.length > 1){
            let Cantidad = 0
            let PrecioTotal = 0
            for(z = 0; z < repetidos.length; z++){
              Cantidad += repetidos[z].Cantidad
              PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
            }
            stock[x].Cantidad = Cantidad
            stock[x].PrecioTotal = PrecioTotal
          }
          if(repetidos2.length> 1){
            for(p=0; p< repetidos2.length; p++){
              for(h=0; h< repetidos2.length; h++){
                if(repetidos2[p].Cantidad > repetidos2[h].Cantidad){
                  unico = repetidos2[p]
                }
              }
            }
            stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
            stock.push(unico)
          }
        }
        stock = stock.map((data) => {
          return{
            CodigoT: data.CodigoT,
            CodigoG: "-",
            TipoProducto: data.TipoProducto,
            Descripcion: data.Descripcion,
            Posicion: data.Posicion,
            CantidadTotal: data.Cantidad,
            Costo: data.Costo,
            CostoTotal: (+data.Costo * +data.Cantidad).toFixed(2),
            CostoFOB: data.PrecioUnidad,
            CostoFOBTotal: (+data.PrecioUnidad * +data.Cantidad).toFixed(2),
            CostoGranMayor: data.CostoGranMayor,
            CostoGranMayorTotal: (+data.CostoGranMayor * +data.Cantidad).toFixed(2),
            CostoMayor: data.CostoMayor,
            CostoMayorTotal: (+data.CostoMayor * +data.Cantidad).toFixed(2),
            CostoDetal: data.CostoDetal,
            CostoDetalTotal: (+data.CostoDetal * +data.Cantidad).toFixed(2),
          }
        })
        if (Costos == "CostoFOB") {
          let Titulo = "Productos en transito - Costo FOB";
          res.render("facturacion/reporte_pdf/stock_pdf_fob", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Costo") {
          let Titulo = "Productos en transito - Costo";
          res.render("facturacion/reporte_pdf/stock_pdf_costo", {
            stock,
            Titulo,
          });
        }
        if (Costos == "GranMayor") {
          let Titulo = "Productos en transito - Costo gran mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_gran", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Mayor") {
          let Titulo = "Productos en transito - Costo mayor";
          res.render("facturacion/reporte_pdf/stock_pdf_mayor", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Detal") {
          let Titulo = "Productos en transito - Costo detal";
          res.render("facturacion/reporte_pdf/stock_pdf_detal", {
            stock,
            Titulo,
          });
        }
        if (Costos == "Todos") {
          res.redirect("/facturacion/reporte-stock");
        }    
      }
    }
  }

  }
  if(Estado == "Todos"){
    let ordenes = await ordenesProveedorDB.find()
      if(Formato == "Excel"){
        if(MayoresACero == 1){
          if(Producto == "AMORTIGUADOR"){
            let stockGeneral = await stockDB
            .find({$and: [{ CantidadTotal: { $gt: 0 } },{ TipoProducto: "AMORTIGUADOR" }]})
            .sort({TipoProducto: 1,  Modelo: 1 });
            let Stock = []
            let unicos
            for( i= 0; i< ordenes.length; i++){
                  stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                  stocks = stocks.map((data) => {
                    return{
                      CodigoT: data.CodigoT ,
                      CodigoG: "-",
                      CantidadTotal: data.Cantidad ,
                      CostoFOB: data.PrecioUnidad ,
                      PrecioTotal: data.PrecioTotal ,
                      Descripcion: data.Descripcion ,
                      Costo: data.Costo ,
                      CostoGranMayor: data.CostoGranMayor ,
                      CostoMayor: data.CostoMayor ,
                      CostoDetal: data.CostoDetal ,
                      TipoProducto: data.TipoProducto ,
                      Posicion: data.Posicion ,
                      Estado: ordenes[i].Estado,
                    }
                  }) 
                  Stock.push(stocks)
            }   
            let stock = []
            for(r=0; r< Stock.length; r++){
              for(z=0; z< Stock[r].length; z++){
                stock.push(Stock[r][z])
              } 
            }
            for(x=0; x < stock.length; x++){  
              let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let unico 
              if(repetidos.length > 1){

                let CantidadTotal = 0
                let PrecioTotal = 0
                for(z = 0; z < repetidos.length; z++){
                  CantidadTotal += repetidos[z].CantidadTotal
                  PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                }
                stock[x].CantidadTotal = CantidadTotal
                stock[x].PrecioTotal = PrecioTotal
              }
              if(repetidos2.length> 1){
                for(p=0; p< repetidos2.length; p++){
                  for(h=0; h< repetidos2.length; h++){
                    if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                      unico = repetidos2[p]
                    }
                  }
                }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
              }
            }

            stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
            for(m=0 ; m< stockGeneral.length; m++){
              let Descripcion = "";
              for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                if (
                stockGeneral[m].Vehiculo[x].Modelo ==
                stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
              }
              stockGeneral[m].Descripcion = Descripcion
            }
          }
            for(u=0; u< stock.length; u++){
              stockGeneral.push(stock[u])
            }
            stock = stockGeneral

            if(Costos == "CostoFOB"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo FOB total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoFOB).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoFOB);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo FOB-.xlsx", res);

            }
            if(Costos == "Costo"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].Costo).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo-.xlsx", res);

            }
            if(Costos == "GranMayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo gran mayor-.xlsx", res);


            }
            if(Costos == "Mayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo mayor-.xlsx", res);

            }
            if(Costos == "Detal"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo detal").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo detal-.xlsx", res);

            }
            if(Costos == "Todos"){
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Producto").style(style);
              ws.cell(1, 3).string("Descripción").style(style);
              ws.cell(1, 4).string("Posición").style(style);
              ws.cell(1, 5).string("Costo FOB").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Costo mayor").style(style);
              ws.cell(1, 9).string("Costo detal").style(style);
              ws.cell(1, 10).string("Cantidad Total").style(style);
              ws.cell(1, 11).string("Costo total").style(style);
              ws.cell(1, 12).string("Costo FOB total").style(style);
              ws.cell(1, 13).string("Costo gran mayor total").style(style);
              ws.cell(1, 14).string("Costo mayor total").style(style);
              ws.cell(1, 15).string("Costo detal total").style(style);
    
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
    
              for (t = 0; t < stock.length; t++) {
                columna = 1;
                
                let CostoFOBTotal = (+stock[t].CantidadTotal * +stock[t].PrecioUnidad).toFixed(2)
                let CostoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoGranMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                let CostoMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoDetalTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
    
    
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].PrecioUnidad);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).number(CostoFOBTotal);
                ws.cell(fila, columna++).number(CostoTotal);
                ws.cell(fila, columna++).number(CostoGranMayorTotal);
                ws.cell(fila, columna++).number(CostoMayorTotal);
                ws.cell(fila, columna++).number(CostoDetalTotal);
    
                cantidad += +stock[t].CantidadTotal;
                fob += +CostoFOBTotal;
                costo += +CostoTotal;
                gran += +CostoGranMayorTotal;
                mayor += +CostoMayorTotal;
                detal += +CostoDetalTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 9).string("Totales").style(styleTotal);
              ws.cell(fila, 10).number(cantidad);
              ws.cell(fila, 11).number(costo);
              ws.cell(fila, 12).number(fob);
              ws.cell(fila, 13).number(gran);
              ws.cell(fila, 14).number(mayor);
              ws.cell(fila, 15).number(detal);
    
              wb.write("Reporte de todos estados -Todos los costos-.xlsx", res);
              
            }
          }
          if(Producto == "BASE DE AMORTIGUADOR"){
            let stockGeneral = await stockDB
            .find({$and: [{ CantidadTotal: { $gt: 0 } },{ TipoProducto: "BASE DE AMORTIGUADOR" }]})
            .sort({TipoProducto: 1,  Modelo: 1 });
            let Stock = []
            let unicos
            for( i= 0; i< ordenes.length; i++){
                  stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                  stocks = stocks.map((data) => {
                    return{
                      CodigoT: data.CodigoT ,
                      CodigoG: "-",
                      CantidadTotal: data.Cantidad ,
                      CostoFOB: data.PrecioUnidad ,
                      PrecioTotal: data.PrecioTotal ,
                      Descripcion: data.Descripcion ,
                      Costo: data.Costo ,
                      CostoGranMayor: data.CostoGranMayor ,
                      CostoMayor: data.CostoMayor ,
                      CostoDetal: data.CostoDetal ,
                      TipoProducto: data.TipoProducto ,
                      Posicion: data.Posicion ,
                      Estado: ordenes[i].Estado,
                    }
                  }) 
                  Stock.push(stocks)
            }   
            let stock = []
            for(r=0; r< Stock.length; r++){
              for(z=0; z< Stock[r].length; z++){
                stock.push(Stock[r][z])
              } 
            }
            for(x=0; x < stock.length; x++){  
              let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let unico 
              if(repetidos.length > 1){

                let CantidadTotal = 0
                let PrecioTotal = 0
                for(z = 0; z < repetidos.length; z++){
                  CantidadTotal += repetidos[z].CantidadTotal
                  PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                }
                stock[x].CantidadTotal = CantidadTotal
                stock[x].PrecioTotal = PrecioTotal
              }
              if(repetidos2.length> 1){
                for(p=0; p< repetidos2.length; p++){
                  for(h=0; h< repetidos2.length; h++){
                    if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                      unico = repetidos2[p]
                    }
                  }
                }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
              }
            }

            stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
            for(m=0 ; m< stockGeneral.length; m++){
              let Descripcion = "";
              for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                if (
                stockGeneral[m].Vehiculo[x].Modelo ==
                stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
              }
              stockGeneral[m].Descripcion = Descripcion
            }
          }
            for(u=0; u< stock.length; u++){
              stockGeneral.push(stock[u])
            }
            stock = stockGeneral

            if(Costos == "CostoFOB"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo FOB total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoFOB).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoFOB);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo FOB-.xlsx", res);

            }
            if(Costos == "Costo"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].Costo).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo-.xlsx", res);

            }
            if(Costos == "GranMayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo gran mayor-.xlsx", res);


            }
            if(Costos == "Mayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo mayor-.xlsx", res);

            }
            if(Costos == "Detal"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo detal").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo detal-.xlsx", res);

            }
            if(Costos == "Todos"){
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Producto").style(style);
              ws.cell(1, 3).string("Descripción").style(style);
              ws.cell(1, 4).string("Posición").style(style);
              ws.cell(1, 5).string("Costo FOB").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Costo mayor").style(style);
              ws.cell(1, 9).string("Costo detal").style(style);
              ws.cell(1, 10).string("Cantidad Total").style(style);
              ws.cell(1, 11).string("Costo total").style(style);
              ws.cell(1, 12).string("Costo FOB total").style(style);
              ws.cell(1, 13).string("Costo gran mayor total").style(style);
              ws.cell(1, 14).string("Costo mayor total").style(style);
              ws.cell(1, 15).string("Costo detal total").style(style);
    
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
    
              for (t = 0; t < stock.length; t++) {
                columna = 1;
                
                let CostoFOBTotal = (+stock[t].CantidadTotal * +stock[t].PrecioUnidad).toFixed(2)
                let CostoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoGranMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                let CostoMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoDetalTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
    
    
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].PrecioUnidad);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).number(CostoFOBTotal);
                ws.cell(fila, columna++).number(CostoTotal);
                ws.cell(fila, columna++).number(CostoGranMayorTotal);
                ws.cell(fila, columna++).number(CostoMayorTotal);
                ws.cell(fila, columna++).number(CostoDetalTotal);
    
                cantidad += +stock[t].CantidadTotal;
                fob += +CostoFOBTotal;
                costo += +CostoTotal;
                gran += +CostoGranMayorTotal;
                mayor += +CostoMayorTotal;
                detal += +CostoDetalTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 9).string("Totales").style(styleTotal);
              ws.cell(fila, 10).number(cantidad);
              ws.cell(fila, 11).number(costo);
              ws.cell(fila, 12).number(fob);
              ws.cell(fila, 13).number(gran);
              ws.cell(fila, 14).number(mayor);
              ws.cell(fila, 15).number(detal);
    
              wb.write("Reporte de todos estados -Todos los costos-.xlsx", res);
              
            }

          }
          if(Producto == "GUARDAPOLVO"){
            let stockGeneral = await stockDB
            .find({$and: [{ CantidadTotal: { $gt: 0 } },{ TipoProducto: "GUARDAPOLVO" }]})
            .sort({TipoProducto: 1,  Modelo: 1 });
            let Stock = []
            let unicos
            for( i= 0; i< ordenes.length; i++){
                  stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                  stocks = stocks.map((data) => {
                    return{
                      CodigoT: data.CodigoT ,
                      CodigoG: "-",
                      CantidadTotal: data.Cantidad ,
                      CostoFOB: data.PrecioUnidad ,
                      PrecioTotal: data.PrecioTotal ,
                      Descripcion: data.Descripcion ,
                      Costo: data.Costo ,
                      CostoGranMayor: data.CostoGranMayor ,
                      CostoMayor: data.CostoMayor ,
                      CostoDetal: data.CostoDetal ,
                      TipoProducto: data.TipoProducto ,
                      Posicion: data.Posicion ,
                      Estado: ordenes[i].Estado,
                    }
                  }) 
                  Stock.push(stocks)
            }   
            let stock = []
            for(r=0; r< Stock.length; r++){
              for(z=0; z< Stock[r].length; z++){
                stock.push(Stock[r][z])
              } 
            }
            for(x=0; x < stock.length; x++){  
              let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let unico 
              if(repetidos.length > 1){

                let CantidadTotal = 0
                let PrecioTotal = 0
                for(z = 0; z < repetidos.length; z++){
                  CantidadTotal += repetidos[z].CantidadTotal
                  PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                }
                stock[x].CantidadTotal = CantidadTotal
                stock[x].PrecioTotal = PrecioTotal
              }
              if(repetidos2.length> 1){
                for(p=0; p< repetidos2.length; p++){
                  for(h=0; h< repetidos2.length; h++){
                    if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                      unico = repetidos2[p]
                    }
                  }
                }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
              }
            }

            stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
            for(m=0 ; m< stockGeneral.length; m++){
              let Descripcion = "";
              for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                if (
                stockGeneral[m].Vehiculo[x].Modelo ==
                stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
              }
              stockGeneral[m].Descripcion = Descripcion
            }
          }
            for(u=0; u< stock.length; u++){
              stockGeneral.push(stock[u])
            }
            stock = stockGeneral

            if(Costos == "CostoFOB"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo FOB total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoFOB).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoFOB);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo FOB-.xlsx", res);

            }
            if(Costos == "Costo"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].Costo).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo-.xlsx", res);

            }
            if(Costos == "GranMayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo gran mayor-.xlsx", res);


            }
            if(Costos == "Mayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo mayor-.xlsx", res);

            }
            if(Costos == "Detal"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo detal").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo detal-.xlsx", res);

            }
            if(Costos == "Todos"){
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Producto").style(style);
              ws.cell(1, 3).string("Descripción").style(style);
              ws.cell(1, 4).string("Posición").style(style);
              ws.cell(1, 5).string("Costo FOB").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Costo mayor").style(style);
              ws.cell(1, 9).string("Costo detal").style(style);
              ws.cell(1, 10).string("Cantidad Total").style(style);
              ws.cell(1, 11).string("Costo total").style(style);
              ws.cell(1, 12).string("Costo FOB total").style(style);
              ws.cell(1, 13).string("Costo gran mayor total").style(style);
              ws.cell(1, 14).string("Costo mayor total").style(style);
              ws.cell(1, 15).string("Costo detal total").style(style);
    
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
    
              for (t = 0; t < stock.length; t++) {
                columna = 1;
                
                let CostoFOBTotal = (+stock[t].CantidadTotal * +stock[t].PrecioUnidad).toFixed(2)
                let CostoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoGranMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                let CostoMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoDetalTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
    
    
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].PrecioUnidad);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).number(CostoFOBTotal);
                ws.cell(fila, columna++).number(CostoTotal);
                ws.cell(fila, columna++).number(CostoGranMayorTotal);
                ws.cell(fila, columna++).number(CostoMayorTotal);
                ws.cell(fila, columna++).number(CostoDetalTotal);
    
                cantidad += +stock[t].CantidadTotal;
                fob += +CostoFOBTotal;
                costo += +CostoTotal;
                gran += +CostoGranMayorTotal;
                mayor += +CostoMayorTotal;
                detal += +CostoDetalTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 9).string("Totales").style(styleTotal);
              ws.cell(fila, 10).number(cantidad);
              ws.cell(fila, 11).number(costo);
              ws.cell(fila, 12).number(fob);
              ws.cell(fila, 13).number(gran);
              ws.cell(fila, 14).number(mayor);
              ws.cell(fila, 15).number(detal);
    
              wb.write("Reporte de todos estados -Todos los costos-.xlsx", res);
              
            }

          }
          if(Producto == "TODOS"){
            let stockGeneral = await stockDB
            .find({CantidadTotal: { $gt: 0 }})
            .sort({TipoProducto: 1,  Modelo: 1 });
            let Stock = []
            let unicos
            for( i= 0; i< ordenes.length; i++){
                  stocks = ordenes[i].Productos
                  stocks = stocks.map((data) => {
                    return{
                      CodigoT: data.CodigoT ,
                      CodigoG: "-",
                      CantidadTotal: data.Cantidad ,
                      CostoFOB: data.PrecioUnidad ,
                      PrecioTotal: data.PrecioTotal ,
                      Descripcion: data.Descripcion ,
                      Costo: data.Costo ,
                      CostoGranMayor: data.CostoGranMayor ,
                      CostoMayor: data.CostoMayor ,
                      CostoDetal: data.CostoDetal ,
                      TipoProducto: data.TipoProducto ,
                      Posicion: data.Posicion ,
                      Estado: ordenes[i].Estado,
                    }
                  }) 
                  Stock.push(stocks)
            }   
            let stock = []
            for(r=0; r< Stock.length; r++){
              for(z=0; z< Stock[r].length; z++){
                stock.push(Stock[r][z])
              } 
            }
            for(x=0; x < stock.length; x++){  
              let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let unico 
              if(repetidos.length > 1){

                let CantidadTotal = 0
                let PrecioTotal = 0
                for(z = 0; z < repetidos.length; z++){
                  CantidadTotal += repetidos[z].CantidadTotal
                  PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                }
                stock[x].CantidadTotal = CantidadTotal
                stock[x].PrecioTotal = PrecioTotal
              }
              if(repetidos2.length> 1){
                for(p=0; p< repetidos2.length; p++){
                  for(h=0; h< repetidos2.length; h++){
                    if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                      unico = repetidos2[p]
                    }
                  }
                }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
              }
            }

            stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
            for(m=0 ; m< stockGeneral.length; m++){
              let Descripcion = "";
              for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                if (
                stockGeneral[m].Vehiculo[x].Modelo ==
                stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
              }
              stockGeneral[m].Descripcion = Descripcion
            }
          }
            for(u=0; u< stock.length; u++){
              stockGeneral.push(stock[u])
            }
            stock = stockGeneral

            if(Costos == "CostoFOB"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo FOB total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoFOB).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoFOB);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo FOB-.xlsx", res);

            }
            if(Costos == "Costo"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].Costo).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo-.xlsx", res);

            }
            if(Costos == "GranMayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo gran mayor-.xlsx", res);


            }
            if(Costos == "Mayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo mayor-.xlsx", res);

            }
            if(Costos == "Detal"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo detal").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo detal-.xlsx", res);

            }
            if(Costos == "Todos"){
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Producto").style(style);
              ws.cell(1, 3).string("Descripción").style(style);
              ws.cell(1, 4).string("Posición").style(style);
              ws.cell(1, 5).string("Costo FOB").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Costo mayor").style(style);
              ws.cell(1, 9).string("Costo detal").style(style);
              ws.cell(1, 10).string("Cantidad Total").style(style);
              ws.cell(1, 11).string("Costo total").style(style);
              ws.cell(1, 12).string("Costo FOB total").style(style);
              ws.cell(1, 13).string("Costo gran mayor total").style(style);
              ws.cell(1, 14).string("Costo mayor total").style(style);
              ws.cell(1, 15).string("Costo detal total").style(style);
    
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
    
              for (t = 0; t < stock.length; t++) {
                columna = 1;
                
                let CostoFOBTotal = (+stock[t].CantidadTotal * +stock[t].PrecioUnidad).toFixed(2)
                let CostoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoGranMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                let CostoMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoDetalTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
    
    
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].PrecioUnidad);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).number(CostoFOBTotal);
                ws.cell(fila, columna++).number(CostoTotal);
                ws.cell(fila, columna++).number(CostoGranMayorTotal);
                ws.cell(fila, columna++).number(CostoMayorTotal);
                ws.cell(fila, columna++).number(CostoDetalTotal);
    
                cantidad += +stock[t].CantidadTotal;
                fob += +CostoFOBTotal;
                costo += +CostoTotal;
                gran += +CostoGranMayorTotal;
                mayor += +CostoMayorTotal;
                detal += +CostoDetalTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 9).string("Totales").style(styleTotal);
              ws.cell(fila, 10).number(cantidad);
              ws.cell(fila, 11).number(costo);
              ws.cell(fila, 12).number(fob);
              ws.cell(fila, 13).number(gran);
              ws.cell(fila, 14).number(mayor);
              ws.cell(fila, 15).number(detal);
    
              wb.write("Reporte de todos estados -Todos los costos-.xlsx", res);
              
            }

          }
        }else{
          if(Producto == "AMORTIGUADOR"){
            let stockGeneral = await stockDB
            .find({ TipoProducto: "AMORTIGUADOR"})
            .sort({TipoProducto: 1,  Modelo: 1 });
            let Stock = []
            let unicos
            for( i= 0; i< ordenes.length; i++){
                  stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                  stocks = stocks.map((data) => {
                    return{
                      CodigoT: data.CodigoT ,
                      CodigoG: "-",
                      CantidadTotal: data.Cantidad ,
                      CostoFOB: data.PrecioUnidad ,
                      PrecioTotal: data.PrecioTotal ,
                      Descripcion: data.Descripcion ,
                      Costo: data.Costo ,
                      CostoGranMayor: data.CostoGranMayor ,
                      CostoMayor: data.CostoMayor ,
                      CostoDetal: data.CostoDetal ,
                      TipoProducto: data.TipoProducto ,
                      Posicion: data.Posicion ,
                      Estado: ordenes[i].Estado,
                    }
                  }) 
                  Stock.push(stocks)
            }   
            let stock = []
            for(r=0; r< Stock.length; r++){
              for(z=0; z< Stock[r].length; z++){
                stock.push(Stock[r][z])
              } 
            }
            for(x=0; x < stock.length; x++){  
              let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let unico 
              if(repetidos.length > 1){

                let CantidadTotal = 0
                let PrecioTotal = 0
                for(z = 0; z < repetidos.length; z++){
                  CantidadTotal += repetidos[z].CantidadTotal
                  PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                }
                stock[x].CantidadTotal = CantidadTotal
                stock[x].PrecioTotal = PrecioTotal
              }
              if(repetidos2.length> 1){
                for(p=0; p< repetidos2.length; p++){
                  for(h=0; h< repetidos2.length; h++){
                    if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                      unico = repetidos2[p]
                    }
                  }
                }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
              }
            }

            stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
            for(m=0 ; m< stockGeneral.length; m++){
              let Descripcion = "";
              for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                if (
                stockGeneral[m].Vehiculo[x].Modelo ==
                stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
              }
              stockGeneral[m].Descripcion = Descripcion
            }
          }
            for(u=0; u< stock.length; u++){
              stockGeneral.push(stock[u])
            }
            stock = stockGeneral

            if(Costos == "CostoFOB"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo FOB total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoFOB).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoFOB);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo FOB-.xlsx", res);

            }
            if(Costos == "Costo"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].Costo).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo-.xlsx", res);

            }
            if(Costos == "GranMayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo gran mayor-.xlsx", res);


            }
            if(Costos == "Mayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo mayor-.xlsx", res);

            }
            if(Costos == "Detal"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo detal").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo detal-.xlsx", res);

            }
            if(Costos == "Todos"){
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Producto").style(style);
              ws.cell(1, 3).string("Descripción").style(style);
              ws.cell(1, 4).string("Posición").style(style);
              ws.cell(1, 5).string("Costo FOB").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Costo mayor").style(style);
              ws.cell(1, 9).string("Costo detal").style(style);
              ws.cell(1, 10).string("Cantidad Total").style(style);
              ws.cell(1, 11).string("Costo total").style(style);
              ws.cell(1, 12).string("Costo FOB total").style(style);
              ws.cell(1, 13).string("Costo gran mayor total").style(style);
              ws.cell(1, 14).string("Costo mayor total").style(style);
              ws.cell(1, 15).string("Costo detal total").style(style);
    
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
    
              for (t = 0; t < stock.length; t++) {
                columna = 1;
                
                let CostoFOBTotal = (+stock[t].CantidadTotal * +stock[t].PrecioUnidad).toFixed(2)
                let CostoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoGranMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                let CostoMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoDetalTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
    
    
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].PrecioUnidad);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).number(CostoFOBTotal);
                ws.cell(fila, columna++).number(CostoTotal);
                ws.cell(fila, columna++).number(CostoGranMayorTotal);
                ws.cell(fila, columna++).number(CostoMayorTotal);
                ws.cell(fila, columna++).number(CostoDetalTotal);
    
                cantidad += +stock[t].CantidadTotal;
                fob += +CostoFOBTotal;
                costo += +CostoTotal;
                gran += +CostoGranMayorTotal;
                mayor += +CostoMayorTotal;
                detal += +CostoDetalTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 9).string("Totales").style(styleTotal);
              ws.cell(fila, 10).number(cantidad);
              ws.cell(fila, 11).number(costo);
              ws.cell(fila, 12).number(fob);
              ws.cell(fila, 13).number(gran);
              ws.cell(fila, 14).number(mayor);
              ws.cell(fila, 15).number(detal);
    
              wb.write("Reporte de todos estados -Todos los costos-.xlsx", res);
              
            }
          }
          if(Producto == "BASE DE AMORTIGUADOR"){
            let stockGeneral = await stockDB
            .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
            .sort({TipoProducto: 1,  Modelo: 1 });
            let Stock = []
            let unicos
            for( i= 0; i< ordenes.length; i++){
                  stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                  stocks = stocks.map((data) => {
                    return{
                      CodigoT: data.CodigoT ,
                      CodigoG: "-",
                      CantidadTotal: data.Cantidad ,
                      CostoFOB: data.PrecioUnidad ,
                      PrecioTotal: data.PrecioTotal ,
                      Descripcion: data.Descripcion ,
                      Costo: data.Costo ,
                      CostoGranMayor: data.CostoGranMayor ,
                      CostoMayor: data.CostoMayor ,
                      CostoDetal: data.CostoDetal ,
                      TipoProducto: data.TipoProducto ,
                      Posicion: data.Posicion ,
                      Estado: ordenes[i].Estado,
                    }
                  }) 
                  Stock.push(stocks)
            }   
            let stock = []
            for(r=0; r< Stock.length; r++){
              for(z=0; z< Stock[r].length; z++){
                stock.push(Stock[r][z])
              } 
            }
            for(x=0; x < stock.length; x++){  
              let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let unico 
              if(repetidos.length > 1){

                let CantidadTotal = 0
                let PrecioTotal = 0
                for(z = 0; z < repetidos.length; z++){
                  CantidadTotal += repetidos[z].CantidadTotal
                  PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                }
                stock[x].CantidadTotal = CantidadTotal
                stock[x].PrecioTotal = PrecioTotal
              }
              if(repetidos2.length> 1){
                for(p=0; p< repetidos2.length; p++){
                  for(h=0; h< repetidos2.length; h++){
                    if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                      unico = repetidos2[p]
                    }
                  }
                }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
              }
            }

            stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
            for(m=0 ; m< stockGeneral.length; m++){
              let Descripcion = "";
              for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                if (
                stockGeneral[m].Vehiculo[x].Modelo ==
                stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
              }
              stockGeneral[m].Descripcion = Descripcion
            }
          }
            for(u=0; u< stock.length; u++){
              stockGeneral.push(stock[u])
            }
            stock = stockGeneral

            if(Costos == "CostoFOB"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo FOB total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoFOB).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoFOB);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo FOB-.xlsx", res);

            }
            if(Costos == "Costo"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].Costo).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo-.xlsx", res);

            }
            if(Costos == "GranMayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo gran mayor-.xlsx", res);


            }
            if(Costos == "Mayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo mayor-.xlsx", res);

            }
            if(Costos == "Detal"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo detal").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo detal-.xlsx", res);

            }
            if(Costos == "Todos"){
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Producto").style(style);
              ws.cell(1, 3).string("Descripción").style(style);
              ws.cell(1, 4).string("Posición").style(style);
              ws.cell(1, 5).string("Costo FOB").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Costo mayor").style(style);
              ws.cell(1, 9).string("Costo detal").style(style);
              ws.cell(1, 10).string("Cantidad Total").style(style);
              ws.cell(1, 11).string("Costo total").style(style);
              ws.cell(1, 12).string("Costo FOB total").style(style);
              ws.cell(1, 13).string("Costo gran mayor total").style(style);
              ws.cell(1, 14).string("Costo mayor total").style(style);
              ws.cell(1, 15).string("Costo detal total").style(style);
    
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
    
              for (t = 0; t < stock.length; t++) {
                columna = 1;
                
                let CostoFOBTotal = (+stock[t].CantidadTotal * +stock[t].PrecioUnidad).toFixed(2)
                let CostoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoGranMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                let CostoMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoDetalTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
    
    
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].PrecioUnidad);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).number(CostoFOBTotal);
                ws.cell(fila, columna++).number(CostoTotal);
                ws.cell(fila, columna++).number(CostoGranMayorTotal);
                ws.cell(fila, columna++).number(CostoMayorTotal);
                ws.cell(fila, columna++).number(CostoDetalTotal);
    
                cantidad += +stock[t].CantidadTotal;
                fob += +CostoFOBTotal;
                costo += +CostoTotal;
                gran += +CostoGranMayorTotal;
                mayor += +CostoMayorTotal;
                detal += +CostoDetalTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 9).string("Totales").style(styleTotal);
              ws.cell(fila, 10).number(cantidad);
              ws.cell(fila, 11).number(costo);
              ws.cell(fila, 12).number(fob);
              ws.cell(fila, 13).number(gran);
              ws.cell(fila, 14).number(mayor);
              ws.cell(fila, 15).number(detal);
    
              wb.write("Reporte de todos estados -Todos los costos-.xlsx", res);
              
            }

          }
          if(Producto == "GUARDAPOLVO"){
            let stockGeneral = await stockDB
            .find({ TipoProducto: "GUARDAPOLVO" })
            .sort({TipoProducto: 1,  Modelo: 1 });
            let Stock = []
            let unicos
            for( i= 0; i< ordenes.length; i++){
                  stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                  stocks = stocks.map((data) => {
                    return{
                      CodigoT: data.CodigoT ,
                      CodigoG: "-",
                      CantidadTotal: data.Cantidad ,
                      CostoFOB: data.PrecioUnidad ,
                      PrecioTotal: data.PrecioTotal ,
                      Descripcion: data.Descripcion ,
                      Costo: data.Costo ,
                      CostoGranMayor: data.CostoGranMayor ,
                      CostoMayor: data.CostoMayor ,
                      CostoDetal: data.CostoDetal ,
                      TipoProducto: data.TipoProducto ,
                      Posicion: data.Posicion ,
                      Estado: ordenes[i].Estado,
                    }
                  }) 
                  Stock.push(stocks)
            }   
            let stock = []
            for(r=0; r< Stock.length; r++){
              for(z=0; z< Stock[r].length; z++){
                stock.push(Stock[r][z])
              } 
            }
            for(x=0; x < stock.length; x++){  
              let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let unico 
              if(repetidos.length > 1){

                let CantidadTotal = 0
                let PrecioTotal = 0
                for(z = 0; z < repetidos.length; z++){
                  CantidadTotal += repetidos[z].CantidadTotal
                  PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                }
                stock[x].CantidadTotal = CantidadTotal
                stock[x].PrecioTotal = PrecioTotal
              }
              if(repetidos2.length> 1){
                for(p=0; p< repetidos2.length; p++){
                  for(h=0; h< repetidos2.length; h++){
                    if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                      unico = repetidos2[p]
                    }
                  }
                }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
              }
            }

            stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
            for(m=0 ; m< stockGeneral.length; m++){
              let Descripcion = "";
              for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                if (
                stockGeneral[m].Vehiculo[x].Modelo ==
                stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
              }
              stockGeneral[m].Descripcion = Descripcion
            }
          }
            for(u=0; u< stock.length; u++){
              stockGeneral.push(stock[u])
            }
            stock = stockGeneral

            if(Costos == "CostoFOB"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo FOB total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoFOB).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoFOB);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo FOB-.xlsx", res);

            }
            if(Costos == "Costo"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].Costo).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo-.xlsx", res);

            }
            if(Costos == "GranMayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo gran mayor-.xlsx", res);


            }
            if(Costos == "Mayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo mayor-.xlsx", res);

            }
            if(Costos == "Detal"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo detal").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo detal-.xlsx", res);

            }
            if(Costos == "Todos"){
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Producto").style(style);
              ws.cell(1, 3).string("Descripción").style(style);
              ws.cell(1, 4).string("Posición").style(style);
              ws.cell(1, 5).string("Costo FOB").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Costo mayor").style(style);
              ws.cell(1, 9).string("Costo detal").style(style);
              ws.cell(1, 10).string("Cantidad Total").style(style);
              ws.cell(1, 11).string("Costo total").style(style);
              ws.cell(1, 12).string("Costo FOB total").style(style);
              ws.cell(1, 13).string("Costo gran mayor total").style(style);
              ws.cell(1, 14).string("Costo mayor total").style(style);
              ws.cell(1, 15).string("Costo detal total").style(style);
    
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
    
              for (t = 0; t < stock.length; t++) {
                columna = 1;
                
                let CostoFOBTotal = (+stock[t].CantidadTotal * +stock[t].PrecioUnidad).toFixed(2)
                let CostoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoGranMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                let CostoMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoDetalTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
    
    
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].PrecioUnidad);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).number(CostoFOBTotal);
                ws.cell(fila, columna++).number(CostoTotal);
                ws.cell(fila, columna++).number(CostoGranMayorTotal);
                ws.cell(fila, columna++).number(CostoMayorTotal);
                ws.cell(fila, columna++).number(CostoDetalTotal);
    
                cantidad += +stock[t].CantidadTotal;
                fob += +CostoFOBTotal;
                costo += +CostoTotal;
                gran += +CostoGranMayorTotal;
                mayor += +CostoMayorTotal;
                detal += +CostoDetalTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 9).string("Totales").style(styleTotal);
              ws.cell(fila, 10).number(cantidad);
              ws.cell(fila, 11).number(costo);
              ws.cell(fila, 12).number(fob);
              ws.cell(fila, 13).number(gran);
              ws.cell(fila, 14).number(mayor);
              ws.cell(fila, 15).number(detal);
    
              wb.write("Reporte de todos estados -Todos los costos-.xlsx", res);
              
            }

          }
          if(Producto == "TODOS"){
            let stockGeneral = await stockDB
            .find()
            .sort({TipoProducto: 1,  Modelo: 1 });
            let Stock = []
            let unicos
            for( i= 0; i< ordenes.length; i++){
                  stocks = ordenes[i].Productos
                  stocks = stocks.map((data) => {
                    return{
                      CodigoT: data.CodigoT ,
                      CodigoG: "-",
                      CantidadTotal: data.Cantidad ,
                      CostoFOB: data.PrecioUnidad ,
                      PrecioTotal: data.PrecioTotal ,
                      Descripcion: data.Descripcion ,
                      Costo: data.Costo ,
                      CostoGranMayor: data.CostoGranMayor ,
                      CostoMayor: data.CostoMayor ,
                      CostoDetal: data.CostoDetal ,
                      TipoProducto: data.TipoProducto ,
                      Posicion: data.Posicion ,
                      Estado: ordenes[i].Estado,
                    }
                  }) 
                  Stock.push(stocks)
            }   
            let stock = []
            for(r=0; r< Stock.length; r++){
              for(z=0; z< Stock[r].length; z++){
                stock.push(Stock[r][z])
              } 
            }
            for(x=0; x < stock.length; x++){  
              let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
              let unico 
              if(repetidos.length > 1){

                let CantidadTotal = 0
                let PrecioTotal = 0
                for(z = 0; z < repetidos.length; z++){
                  CantidadTotal += repetidos[z].CantidadTotal
                  PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                }
                stock[x].CantidadTotal = CantidadTotal
                stock[x].PrecioTotal = PrecioTotal
              }
              if(repetidos2.length> 1){
                for(p=0; p< repetidos2.length; p++){
                  for(h=0; h< repetidos2.length; h++){
                    if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                      unico = repetidos2[p]
                    }
                  }
                }
              stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
              stock.push(unico)
              }
            }

            stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
            for(m=0 ; m< stockGeneral.length; m++){
              let Descripcion = "";
              for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                if (
                stockGeneral[m].Vehiculo[x].Modelo ==
                stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
              }
              stockGeneral[m].Descripcion = Descripcion
            }
          }
            for(u=0; u< stock.length; u++){
              stockGeneral.push(stock[u])
            }
            stock = stockGeneral

            if(Costos == "CostoFOB"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo FOB").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo FOB total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;

    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoFOB).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoFOB);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
                
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo FOB-.xlsx", res);

            }
            if(Costos == "Costo"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].Costo).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo-.xlsx", res);

            }
            if(Costos == "GranMayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;

                
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)

                
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo gran mayor-.xlsx", res);


            }
            if(Costos == "Mayor"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo mayor").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo mayor-.xlsx", res);

            }
            if(Costos == "Detal"){
              ws.cell(1, 1).string("Estado").style(style);
              ws.cell(1, 2).string("Codigo Thomson").style(style);
              ws.cell(1, 3).string("Codigo homólogo").style(style);
              ws.cell(1, 4).string("Producto").style(style);
              ws.cell(1, 5).string("Descripción").style(style);
              ws.cell(1, 6).string("Posición").style(style);
              ws.cell(1, 7).string("Costo detal").style(style);
              ws.cell(1, 8).string("Cantidad Total").style(style);
              ws.cell(1, 9).string("Costo total").style(style);
    
              let cantidad = 0;
              let precioTotal = 0;
              let fila = 2;
              for (t = 0; t < stock.length; t++) {
                columna = 1;
    
                let costoTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
                ws.cell(fila, columna++).string(stock[t].Estado);
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].CodigoG);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).string(costoTotal);
    
                cantidad += +stock[t].CantidadTotal;
                precioTotal += +costoTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 7).string("Totales").style(styleTotal);
              ws.cell(fila, 8).number(cantidad);
              ws.cell(fila, 9).number(precioTotal);
    
              wb.write("Reporte todos estado -Costo detal-.xlsx", res);

            }
            if(Costos == "Todos"){
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Producto").style(style);
              ws.cell(1, 3).string("Descripción").style(style);
              ws.cell(1, 4).string("Posición").style(style);
              ws.cell(1, 5).string("Costo FOB").style(style);
              ws.cell(1, 6).string("Costo").style(style);
              ws.cell(1, 7).string("Costo gran mayor").style(style);
              ws.cell(1, 8).string("Costo mayor").style(style);
              ws.cell(1, 9).string("Costo detal").style(style);
              ws.cell(1, 10).string("Cantidad Total").style(style);
              ws.cell(1, 11).string("Costo total").style(style);
              ws.cell(1, 12).string("Costo FOB total").style(style);
              ws.cell(1, 13).string("Costo gran mayor total").style(style);
              ws.cell(1, 14).string("Costo mayor total").style(style);
              ws.cell(1, 15).string("Costo detal total").style(style);
    
              let cantidad = 0;
              let costo = 0;
              let fob = 0;
              let gran = 0;
              let mayor = 0;
              let detal = 0;
              let fila = 2;
    
              for (t = 0; t < stock.length; t++) {
                columna = 1;
                
                let CostoFOBTotal = (+stock[t].CantidadTotal * +stock[t].PrecioUnidad).toFixed(2)
                let CostoTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoGranMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoGranMayor).toFixed(2)
                let CostoMayorTotal = (+stock[t].CantidadTotal * +stock[t].CostoMayor).toFixed(2)
                let CostoDetalTotal = (+stock[t].CantidadTotal * +stock[t].CostoDetal).toFixed(2)
    
    
                ws.cell(fila, columna++).string(stock[t].CodigoT);
                ws.cell(fila, columna++).string(stock[t].TipoProducto);
                ws.cell(fila, columna++).string(stock[t].Descripcion);
                ws.cell(fila, columna++).string(stock[t].Posicion);
                ws.cell(fila, columna++).number(stock[t].PrecioUnidad);
                ws.cell(fila, columna++).number(stock[t].Costo);
                ws.cell(fila, columna++).number(stock[t].CostoGranMayor);
                ws.cell(fila, columna++).number(stock[t].CostoMayor);
                ws.cell(fila, columna++).number(stock[t].CostoDetal);
                ws.cell(fila, columna++).number(stock[t].CantidadTotal);
                ws.cell(fila, columna++).number(CostoFOBTotal);
                ws.cell(fila, columna++).number(CostoTotal);
                ws.cell(fila, columna++).number(CostoGranMayorTotal);
                ws.cell(fila, columna++).number(CostoMayorTotal);
                ws.cell(fila, columna++).number(CostoDetalTotal);
    
                cantidad += +stock[t].CantidadTotal;
                fob += +CostoFOBTotal;
                costo += +CostoTotal;
                gran += +CostoGranMayorTotal;
                mayor += +CostoMayorTotal;
                detal += +CostoDetalTotal;
    
                fila++;
              }
    
              fila++;
    
              ws.cell(fila, 9).string("Totales").style(styleTotal);
              ws.cell(fila, 10).number(cantidad);
              ws.cell(fila, 11).number(costo);
              ws.cell(fila, 12).number(fob);
              ws.cell(fila, 13).number(gran);
              ws.cell(fila, 14).number(mayor);
              ws.cell(fila, 15).number(detal);
    
              wb.write("Reporte de todos estados -Todos los costos-.xlsx", res);
              
            }

          }
        
        }
      }if(Formato == "PDF"){
        if(MayoresACero == 1){
          if(Producto == "AMORTIGUADOR"){
            let stockGeneral = await stockDB
            .find({$and: [{ CantidadTotal: { $gt: 0 } },{ TipoProducto: "AMORTIGUADOR" }]})
            .sort({TipoProducto: 1,  Modelo: 1 });
            if(Costos == "CostoFOB"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        Costo: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Amortiguadores - Costo FOB' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Costo"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.Costo ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.Costo ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Amortiguadores - Costo' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "GranMayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Amortiguadores - Costo gran mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Mayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        Costo: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    Costo: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Amortiguadores - Costo mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Detal"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        Costo: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    Costo: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Amortiguadores - Costo detal' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Todos"){
              res.redirect('/facturacion/reporte-stock')
            }

          }
          if(Producto == "BASE DE AMORTIGUADOR"){
            let stockGeneral = await stockDB
            .find({$and: [{ CantidadTotal: { $gt: 0 } },{ TipoProducto: "BASE DE AMORTIGUADOR" }]})
            .sort({TipoProducto: 1,  Modelo: 1 });
            if(Costos == "CostoFOB"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        Costo: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Base de amortiguador - Costo FOB' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Costo"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.Costo ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.Costo ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Base de amortiguador - Costo' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "GranMayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Base de amortiguador - Costo gran mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Mayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        Costo: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    Costo: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Base de amortiguador - Costo mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Detal"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        Costo: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    Costo: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Base de amortiguador - Costo detal' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Todos"){
              res.redirect('/facturacion/reporte-stock')
            }

          }
          if(Producto == "GUARDAPOLVO"){
            let stockGeneral = await stockDB
            .find({$and: [{ CantidadTotal: { $gt: 0 } },{ TipoProducto: "GUARDAPOLVO" }]})
            .sort({TipoProducto: 1,  Modelo: 1 });
            if(Costos == "CostoFOB"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        Costo: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Guardapolvo - Costo FOB' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Costo"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.Costo ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.Costo ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Guardapolvo - Costo' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "GranMayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Guardapolvo - Costo gran mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Mayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        Costo: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    Costo: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Guardapolvo - Costo mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Detal"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        Costo: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    Costo: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Guardapolvo - Costo detal' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Todos"){
              res.redirect('/facturacion/reporte-stock')
            }
          }
          if(Producto == "TODOS"){
            let stockGeneral = await stockDB
            .find({ CantidadTotal: { $gt: 0 }})
            .sort({TipoProducto: 1,  Modelo: 1 });
            if(Costos == "CostoFOB"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        Costo: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Costo FOB' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Costo"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.Costo ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.Costo ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Costo' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "GranMayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Costo gran mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Mayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        Costo: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    Costo: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Costo mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Detal"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        Costo: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    Costo: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Costo detal' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Todos"){
              res.redirect('/facturacion/reporte-stock')
            }
            

          }
        }else{
          if(Producto == "AMORTIGUADOR"){
            let stockGeneral = await stockDB
            .find({ TipoProducto: "AMORTIGUADOR" })
            .sort({TipoProducto: 1,  Modelo: 1 });
            if(Costos == "CostoFOB"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        Costo: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Amortiguador - Costo FOB' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Costo"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.Costo ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.Costo ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Amortiguador - Costo' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "GranMayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Amortiguador - Costo gran mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Mayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        Costo: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    Costo: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Amortiguador - Costo mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Detal"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        Costo: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    Costo: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Amortiguador - Costo detal' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Todos"){
              res.redirect('/facturacion/reporte-stock')
            }
          }
          if(Producto == "BASE DE AMORTIGUADOR"){
            let stockGeneral = await stockDB
            .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
            .sort({TipoProducto: 1,  Modelo: 1 });
            if(Costos == "CostoFOB"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        Costo: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Base de amortiguador - Costo FOB' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Costo"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.Costo ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.Costo ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Base de amortiguador - Costo' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "GranMayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Base de amortiguador - Costo gran mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Mayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        Costo: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    Costo: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Base de amortiguador - Costo mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Detal"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "BASE DE AMORTIGUADOR")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        Costo: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    Costo: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Base de amortiguador - Costo detal' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Todos"){
              res.redirect('/facturacion/reporte-stock')
            }

          }
          if(Producto == "GUARDAPOLVO"){
            let stockGeneral = await stockDB
            .find({ TipoProducto: "GUARDAPOLVO" })
            .sort({TipoProducto: 1,  Modelo: 1 });
            if(Costos == "CostoFOB"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        Costo: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Guardapolvo - Costo FOB' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Costo"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.Costo ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.Costo ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Guardapolvo - Costo' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "GranMayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Guardapolvo - Costo gran mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Mayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        Costo: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    Costo: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Guardapolvo - Costo mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Detal"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos.filter((data) => data.TipoProducto == "GUARDAPOLVO")
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        Costo: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    Costo: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Guardapolvo - Costo detal' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Todos"){
              res.redirect('/facturacion/reporte-stock')
            }
          }
          if(Producto == "TODOS"){
            let stockGeneral = await stockDB
            .find()
            .sort({TipoProducto: 1,  Modelo: 1 });
            if(Costos == "CostoFOB"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        Costo: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
              if(data.CantidadTotal == 0){
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Sin stock"
                }
              }else{
                return{
                  CodigoT: data.CodigoT,
                  CodigoG: data.CodigoG,
                  CantidadTotal: data.CantidadTotal ,
                  Vehiculo: data.Vehiculo,
                  CostoFOB: data.CostoFOB ,
                  Costo: data.Costo ,
                  CostoGranMayor: data.CostoGranMayor ,
                  CostoMayor: data.CostoMayor ,
                  CostoDetal: data.CostoDetal ,
                  TipoProducto: data.TipoProducto ,
                  Posicion: data.Posicion ,
                  Estado: "Stock"
                }
              }
            })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Costo FOB' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Costo"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.Costo ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.Costo ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Costo' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "GranMayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        Costo: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    Costo: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Costo gran mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Mayor"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        Costo: data.CostoMayor ,
                        CostoDetal: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    Costo: data.CostoMayor ,
                    CostoDetal: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Costo mayor' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Detal"){
              let Stock = []
              let unicos
              for( i= 0; i< ordenes.length; i++){
                    stocks = ordenes[i].Productos
                    stocks = stocks.map((data) => {
                      return{
                        CodigoT: data.CodigoT ,
                        CodigoG: "-",
                        CantidadTotal: data.Cantidad ,
                        CostoFOB: data.PrecioUnidad ,
                        PrecioTotal: data.PrecioTotal ,
                        Descripcion: data.Descripcion ,
                        CostoGranMayor: data.CostoGranMayor ,
                        CostoMayor: data.CostoMayor ,
                        Costo: data.CostoDetal ,
                        TipoProducto: data.TipoProducto ,
                        Posicion: data.Posicion ,
                        Estado: ordenes[i].Estado,
                      }
                    }) 
                    Stock.push(stocks)
              }   
              let stock = []
              for(r=0; r< Stock.length; r++){
                for(z=0; z< Stock[r].length; z++){
                  stock.push(Stock[r][z])
                } 
              }
              for(x=0; x < stock.length; x++){  
                let repetidos = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let repetidos2 = stock.filter((data) => data.CodigoT == stock[x].CodigoT)
                let unico 
                if(repetidos.length > 1){
  
                  let CantidadTotal = 0
                  let PrecioTotal = 0
                  for(z = 0; z < repetidos.length; z++){
                    CantidadTotal += repetidos[z].CantidadTotal
                    PrecioTotal = (+PrecioTotal + repetidos[z].PrecioTotal).toFixed(2)
                  }
                  stock[x].CantidadTotal = CantidadTotal
                  stock[x].PrecioTotal = PrecioTotal
                }
                if(repetidos2.length> 1){
                  for(p=0; p< repetidos2.length; p++){
                    for(h=0; h< repetidos2.length; h++){
                      if(repetidos2[p].CantidadTotal > repetidos2[h].CantidadTotal){
                        unico = repetidos2[p]
                      }
                    }
                  }
                stock = stock.filter((data) =>data.CodigoT != stock[x].CodigoT)
                stock.push(unico)
                }
              }
  
              stockGeneral = stockGeneral.map((data) => {
                  return{
                    CodigoT: data.CodigoT,
                    CodigoG: data.CodigoG,
                    CantidadTotal: data.CantidadTotal ,
                    Vehiculo: data.Vehiculo,
                    CostoFOB: data.CostoFOB ,
                    CostoGranMayor: data.CostoGranMayor ,
                    CostoMayor: data.CostoMayor ,
                    Costo: data.CostoDetal ,
                    TipoProducto: data.TipoProducto ,
                    Posicion: data.Posicion ,
                    Estado: "Stock"
                  }
              })
              for(m=0 ; m< stockGeneral.length; m++){
                let Descripcion = "";
                for (x = 0; x < stockGeneral[m].Vehiculo.length; x++) {
                  if (
                  stockGeneral[m].Vehiculo[x].Modelo ==
                  stockGeneral[m].Vehiculo[stockGeneral[m].Vehiculo.length - 1].Modelo
                ) {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}`;
                } else {
                  Descripcion += `${stockGeneral[m].Vehiculo[x].Marca} ${stockGeneral[m].Vehiculo[x].Modelo} ${stockGeneral[m].Vehiculo[x].Desde}-${stockGeneral[m].Vehiculo[x].Hasta}, `;
                }
                stockGeneral[m].Descripcion = Descripcion
              }
            }
              for(u=0; u< stock.length; u++){
                stockGeneral.push(stock[u])
              }
              stock = stockGeneral
              let Titulo = 'Reporte todos los estados - Costo detal' 
              res.render('facturacion/reporte_pdf/stock_todos',{
                stock,
                Titulo
              })
              
            }
            if(Costos == "Todos"){
              res.redirect('/facturacion/reporte-stock')
            }
          }
        }
      }
  }
  
});
//ruta para descargar reporte facturas

router.post("/facturacion/reporte-factura", isAuthenticatedFacturacion,
  async (req, res) => {
    const {
      Excel,
      PDF,
      Desde,
      Hasta,
      Cobradas,
      Cliente,
      Vendedor,
      NoCobradas,
    } = req.body;

    let fechaDesde = new Date(Desde).getTime();
    let fechaHasta = new Date(Hasta).getTime();

    const xl = require("excel4node");

    const wb = new xl.Workbook();

    const ws = wb.addWorksheet("Stock Thomson");

    const style = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#FFFF00",
        fgColor: "#FFFF00",
      },
    });

    const styleTotal = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#EE0A1F",
        fgColor: "#EE0A1F",
      },
    });

    ws.cell(1, 1).string("Número factura").style(style);
    ws.cell(1, 2).string("Fecha emisión").style(style);
    ws.cell(1, 3).string("Fecha de vencimiento").style(style);
    ws.cell(1, 4).string("Cliente").style(style);
    ws.cell(1, 5).string("Vendedor").style(style);
    ws.cell(1, 6).string("Neto").style(style);
    ws.cell(1, 7).string("Saldo").style(style);

    if (Excel) {
      if (Desde && Hasta) {
        if (Cliente == 0 && Vendedor == 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Cobrado" },
                ],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write("Facturas_cobradas.xlsx", res);
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Por cobrar" },
                ],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write("Facturas_por_cobrar.xlsx", res);
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                ],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write("Facturas.xlsx", res);
          }
          //cliente existe y es uno especifico
        }
        if (Cliente && Cliente != 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Cobrado" },
                  { Cliente: Cliente },
                ],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_cobradas_${Cliente}.xlsx`, res);
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Por cobrar" },
                  { Cliente: Cliente },
                ],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_por_cobrar_${Cliente}.xlsx`, res);
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Cliente: Cliente },
                ],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_${Cliente}.xlsx`, res);
          }

          //Vendedor existe y es uno especifico
        }
        if (Vendedor && Vendedor != 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Cobrado" },
                  { Vendedor: Vendedor },
                ],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_cobradas_${Vendedor}.xlsx`, res);
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Por cobrar" },
                  { Vendedor: Vendedor },
                ],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_por_cobrar_${Vendedor}.xlsx`, res);
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Vendedor: Vendedor },
                ],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_${Vendedor}.xlsx`, res);
          }

          //Cuando no se introduce ninguna fecha
        }
      }
      if (!Desde && !Hasta) {
        if (Cliente == 0 && Vendedor == 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({ Estado: "Cobrado" })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write("Facturas_cobradas.xlsx", res);
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({ Estado: "Por cobrar" })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write("Facturas_por_cobrar.xlsx", res);
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB.find().sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write("Factura.xlsx", res);
          }
          //cliente existe y es uno especifico
        }
        if (Cliente && Cliente != 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({
                $and: [{ Estado: "Cobrado" }, { Cliente: Cliente }],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_cobradas_${Cliente}.xlsx`, res);
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [{ Estado: "Por cobrar" }, { Cliente: Cliente }],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_por_cobrar_${Cliente}.xlsx`, res);
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find({ Cliente: Cliente })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_${Cliente}.xlsx`, res);
          }

          //Vendedor existe y es uno especifico
        }
        if (Vendedor && Vendedor != 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({
                $and: [{ Estado: "Cobrado" }, { Vendedor: Vendedor }],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_cobradas_${Vendedor}.xlsx`, res);
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [{ Estado: "Por cobrar" }, { Vendedor: Vendedor }],
              })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_por_cobrar_${Vendedor}.xlsx`, res);
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find({ Vendedor: Vendedor })
              .sort({ date: "desc" });
            let fila = 2,
              neto = 0,
              saldo = 0;

            for (i = 0; i < factura.length; i++) {
              columna = 1;
              let registro = factura[i].date;
              registro = registro.toString().substr(0, 10);
              let vencimiento = factura[i].Vencimiento;
              vencimiento = vencimiento.toISOString().substr(0, 10).toString();
              let ultimoPago = factura[i].FechaUltimoPago;
              ultimoPago = ultimoPago.toString().substr(0, 10);

              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).string(registro);
              ws.cell(fila, columna++).string(vencimiento);
              ws.cell(fila, columna++).string(factura[i].Cliente);
              ws.cell(fila, columna++).string(factura[i].Vendedor);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);

              neto += +factura[i].PrecioTotal;
              saldo += +factura[i].PendienteAPagar;

              fila++;
            }

            fila++;

            ws.cell(fila, 5).string("Totales").style(styleTotal);
            ws.cell(fila, 6).number(neto);
            ws.cell(fila, 7).number(saldo);

            wb.write(`Facturas_${Vendedor}.xlsx`, res);
          }
        }
      }
      if ((Desde && !Hasta) || (!Desde && Hasta)) {
        res.redirect("/facturacion/ventas");
      }
    }
    if (PDF) {
      if (Desde && Hasta) {
        if (Cliente == 0 && Vendedor == 0) {
          if (Cobradas) {
            await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Cobrado" },
                ],
              })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Por cobrar" },
                ],
              })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                ],
              })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
        }
        if (Cliente && Cliente != 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Cobrado" },
                  { Cliente: Cliente },
                ],
              })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Por cobrar" },
                  { Cliente: Cliente },
                ],
              })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Cliente: Cliente },
                ],
              })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
        }
        if (Vendedor && Vendedor != 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Cobrado" },
                  { Vendedor: Vendedor },
                ],
              })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Estado: "Por cobrar" },
                  { Vendedor: Vendedor },
                ],
              })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [
                  { Timestamp: { $gte: fechaDesde } },
                  { Timestamp: { $lte: fechaHasta } },
                  { Vendedor: Vendedor },
                ],
              })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
        }
      }
      if (!Desde && !Hasta) {
        if (Cliente == 0 && Vendedor == 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({ Estado: "Cobrado" })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({ Estado: "Por cobrar" })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find()
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
        }
        if (Cliente && Cliente != 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({ $and: [{ Estado: "Cobrado" }, { Cliente: Cliente }] })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({ $and: [{ Estado: "Por cobrar" }, { Cliente: Cliente }] })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find({ $and: [{ Cliente: Cliente }] })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
        }
        if (Vendedor && Vendedor != 0) {
          if (Cobradas) {
            let factura = await facturaDB
              .find({ $and: [{ Estado: "Cobrado" }, { Vendedor: Vendedor }] })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (NoCobradas) {
            let factura = await facturaDB
              .find({
                $and: [{ Estado: "Por cobrar" }, { Vendedor: Vendedor }],
              })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
          if (!Cobradas && !NoCobradas) {
            let factura = await facturaDB
              .find({ $and: [{ Vendedor: Vendedor }] })
              .sort({ date: "desc" })
              .then((document) => {
                const contex = {
                  facturas: document.map((document) => {
                    return {
                      Factura: document.Factura,
                      Cliente: document.Cliente,
                      date: document.date.substr(0, 10),
                      Vencimiento: document.Vencimiento.toISOString().substr(
                        0,
                        10
                      ),
                      Vendedor: document.Vendedor,
                      PrecioTotal: document.PrecioTotal,
                      PendienteAPagar: document.PendienteAPagar,
                      _id: document._id,
                    };
                  }),
                };
                res.render("facturacion/reporte_pdf/reporte_pdf", {
                  facturas: contex.facturas,
                });
              });
          }
        }
      }
    }
    if (!PDF && !Excel) {
      res.redirect("/facturacion/ventas");
    }
  }
);

//POST para enviar informacion de reportes
router.post( "/facturacion/info-cliente-vendedor",isAuthenticatedCliente,
  async (req, res) => {
    await clienteDB
      .find()
      .sort({ date: "desc" })
      .then(async (documentos) => {
        const contexto = {
          clientes: documentos.map((documento) => {
            return {
              Empresa: documento.Empresa,
            };
          }),
        };
        await stockDB
          .find()
          .sort({ date: "desc" })
          .then(async (documents) => {
            const context = {
              stock: documents.map((documents) => {
                return {
                  _id: documents._id,
                };
              }),
            };
            await facturaDB
              .find()
              .sort({ date: "desc" })
              .then(async (document) => {
                const contex = {
                  factura: document.map((document) => {
                    return {
                      _id: document._id,
                    };
                  }),
                };
                await vendedorDB
                  .find()
                  .sort({ date: "desc" })
                  .then((document) => {
                    const contextoVendedor = {
                      vendedor: document.map((documentos) => {
                        return {
                          Nombres: documentos.Nombres,
                        };
                      }),
                    };
                    const datos = [
                      contexto.clientes,
                      contextoVendedor.vendedor,
                    ];
                    res.status(202).send(JSON.stringify(datos));
                  });
              });
          });
      });
  }
);
//reporte de historial de movimientos
router.post("/reporte-historial", isAuthenticatedInventario, async (req, res) => {
  const { Desde, Hasta, Codigo, Formato } = req.body;
  let fechaDesde = new Date(Desde).getTime();
  let fechaHasta = new Date(Hasta).getTime();
  const xl = require("excel4node");

  const wb = new xl.Workbook();

  const ws = wb.addWorksheet("Stock Thomson");

  const style = wb.createStyle({
    font: {
      color: "#000000",
      size: 11,
    },
    fill: {
      type: "pattern",
      patternType: "solid",
      bgColor: "#FFFF00",
      fgColor: "#FFFF00",
    },
  });

  ws.cell(1, 1).string("Codigo de movimiento").style(style);
  ws.cell(1, 2).string("Tipo de movimiento").style(style);
  ws.cell(1, 3).string("Codigo producto").style(style);
  ws.cell(1, 4).string("Fecha de movimiento").style(style);
  ws.cell(1, 5).string("Cantidad anterior").style(style);
  ws.cell(1, 6).string("Cantidad movida").style(style);
  ws.cell(1, 7).string("Cantidad nueva").style(style);
  ws.cell(1, 8).string("Comentario").style(style);

  const styleTotal = wb.createStyle({
    font: {
      color: "#000000",
      size: 11,
    },
    fill: {
      type: "pattern",
      patternType: "solid",
      bgColor: "#EE0A1F",
      fgColor: "#EE0A1F",
    },
  });

  if (Formato == "Excel") {
    if (Desde && Hasta) {
      if (Codigo == 0) {
        let stock = await stockDB
          .find({
            $and: [
              { "HistorialMovimiento.Timestamp": { $gte: fechaDesde } },
              { "HistorialMovimiento.Timestamp": { $lte: fechaHasta } },
            ],
          })
          .sort({ date: "desc" });
        let historial;
        for (i = 0; i < stock.length; i++) {
          historial = stock[i].HistorialMovimiento.filter(
            (historial) =>
              historial.Timestamp > fechaDesde &&
              historial.Timestamp < fechaHasta
          );
          stock[i].HistorialMovimiento = historial;
        }

        let fila = 2;
        for (z = 0; z < stock.length; z++) {
          for (x = 0; x < stock[z].HistorialMovimiento.length; x++) {
            columna = 1;
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].CodigoMovimiento);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].TipoMovimiento);
            ws.cell(fila, columna++).string(stock[z].CodigoT);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].FechaMovimiento);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadAnterior);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadMovida);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadNueva);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].Comentario);

            fila++;
          }
        }
        wb.write(`Reporte_movimientos.xlsx`, res);
      } else {
        let stock = await stockDB
          .find({
            $and: [
              { "HistorialMovimiento.Timestamp": { $gte: fechaDesde } },
              { "HistorialMovimiento.Timestamp": { $lte: fechaHasta } },
              { CodigoT: Codigo },
            ],
          })
          .sort({ date: "desc" });
        let historial;
        for (i = 0; i < stock.length; i++) {
          historial = stock[i].HistorialMovimiento.filter(
            (historial) =>
              historial.Timestamp > fechaDesde &&
              historial.Timestamp < fechaHasta
          );
          stock[i].HistorialMovimiento = historial;
        }

        let fila = 2;
        for (z = 0; z < stock.length; z++) {
          for (x = 0; x < stock[z].HistorialMovimiento.length; x++) {
            columna = 1;
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].CodigoMovimiento);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].TipoMovimiento);
            ws.cell(fila, columna++).string(stock[z].CodigoT);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].FechaMovimiento);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadAnterior);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadMovida);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadNueva);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].Comentario);

            fila++;
          }
        }
        wb.write(`Reporte_movimientos_${Codigo}.xlsx`, res);
      }
    }
    if (!Desde && !Hasta) {
      if (Codigo == 0) {
        let stock = await stockDB.find().sort({ date: "desc" });

        let fila = 2;
        for (z = 0; z < stock.length; z++) {
          for (x = 0; x < stock[z].HistorialMovimiento.length; x++) {
            if(!stock[z].HistorialMovimiento[x].CodigoMovimiento){
              stock[z].HistorialMovimiento[x].CodigoMovimiento = 0
            }
            if(!stock[z].HistorialMovimiento[x].TipoMovimiento){
              stock[z].HistorialMovimiento[x].TipoMovimiento = 0
            }
            if(!stock[z].HistorialMovimiento[x].CantidadAnterior){
              stock[z].HistorialMovimiento[x].CantidadAnterior = 0
            }
            columna = 1;
            ws.cell(fila, columna++).number(+stock[z].HistorialMovimiento[x].CodigoMovimiento);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].TipoMovimiento);
            ws.cell(fila, columna++).string(stock[z].CodigoT);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].FechaMovimiento);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadAnterior);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadMovida);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadNueva);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].Comentario);
            fila++;
          }
        }
        wb.write(`Reporte_movimientos.xlsx`, res);
      } else {
        let stock = await stockDB
          .find({ CodigoT: Codigo })
          .sort({ date: "desc" });

        let fila = 2;
        for (z = 0; z < stock.length; z++) {
          for (x = 0; x < stock[z].HistorialMovimiento.length; x++) {
            columna = 1;
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].CodigoMovimiento);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].TipoMovimiento);
            ws.cell(fila, columna++).string(stock[z].CodigoT);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].FechaMovimiento);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadAnterior);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadMovida);
            ws.cell(fila, columna++).number(stock[z].HistorialMovimiento[x].CantidadNueva);
            ws.cell(fila, columna++).string(stock[z].HistorialMovimiento[x].Comentario);

            fila++;
          }
        }
        wb.write(`Reporte_movimientos_${Codigo}.xlsx`, res);
      }
    }
    if ((Desde && !Hasta) || (!Desde && Hasta)) {
      let errors = [
        {
          text: "Tiene que introducir ambas fechas o en su defecto dejar ambas vacias",
        },
      ];
      res.render("", {
        errors,
      });
    }
  }
  if (Formato == "PDF") {
    if (Desde && Hasta) {
      if (Codigo == 0) {
        let stock = await stockDB
          .find({
            $and: [
              { "HistorialMovimiento.Timestamp": { $gte: fechaDesde } },
              { "HistorialMovimiento.Timestamp": { $lte: fechaHasta } },
            ],
          })
          .sort({ date: "desc" });
        let historial;
        for (i = 0; i < stock.length; i++) {
          historial = stock[i].HistorialMovimiento.filter(
            (historial) =>
              historial.Timestamp > fechaDesde &&
              historial.Timestamp < fechaHasta
          );
          stock[i].HistorialMovimiento = historial;
        }

        let historiales = [];
        for (x = 0; x < stock.length; x++) {
          let HistorialMovimiento = stock[x].HistorialMovimiento;
          Historial = {
            movimiento: HistorialMovimiento.map((data) => {
              return {
                CodigoMovimiento: data.CodigoMovimiento,
                TipoMovimiento: data.TipoMovimiento,
                Codigo: stock[x].CodigoT,
                FechaMovimiento: data.FechaMovimiento,
                CantidadAnterior: data.CantidadAnterior,
                CantidadMovida: data.CantidadMovida,
                CantidadNueva: data.CantidadNueva,
                Comentario: data.Comentario,
              };
            }),
          };
          historiales.push(Historial.movimiento);
        }
        let Historiales = [];
        for (z = 0; z < historiales.length; z++) {
          Historiales.push(historiales[z][0]);
        }
        res.render("facturacion/reporte_pdf/reporte_movimientos", {
          Historiales,
        });
      } else {
        let stock = await stockDB
          .find({
            $and: [
              { "HistorialMovimiento.Timestamp": { $gte: fechaDesde } },
              { "HistorialMovimiento.Timestamp": { $lte: fechaHasta } },
              { CodigoT: Codigo },
            ],
          })
          .sort({ date: "desc" });
        let historial;
        for (i = 0; i < stock.length; i++) {
          historial = stock[i].HistorialMovimiento.filter(
            (historial) =>
              historial.Timestamp > fechaDesde &&
              historial.Timestamp < fechaHasta
          );
          stock[i].HistorialMovimiento = historial;
        }
        let historiales = [];
        for (x = 0; x < stock.length; x++) {
          let HistorialMovimiento = stock[x].HistorialMovimiento;
          Historial = {
            movimiento: HistorialMovimiento.map((data) => {
              return {
                CodigoMovimiento: data.CodigoMovimiento,
                TipoMovimiento: data.TipoMovimiento,
                Codigo: stock[x].CodigoT,
                FechaMovimiento: data.FechaMovimiento,
                CantidadAnterior: data.CantidadAnterior,
                CantidadMovida: data.CantidadMovida,
                CantidadNueva: data.CantidadNueva,
                Comentario: data.Comentario,
              };
            }),
          };
          historiales.push(Historial.movimiento);
        }
        res.render("facturacion/reporte_pdf/reporte_movimientos", {
          Historiales: Historial.movimiento,
        });
      }
    }
    if (!Desde && !Hasta) {
      if (Codigo == 0) {
        let stock = await stockDB.find().sort({ date: "desc" });
        let historiales = [];
        for (x = 0; x < stock.length; x++) {
          let HistorialMovimiento = stock[x].HistorialMovimiento;
          Historial = {
            movimiento: HistorialMovimiento.map((data) => {
              return {
                CodigoMovimiento: data.CodigoMovimiento,
                TipoMovimiento: data.TipoMovimiento,
                Codigo: stock[x].CodigoT,
                FechaMovimiento: data.FechaMovimiento,
                CantidadAnterior: data.CantidadAnterior,
                CantidadMovida: data.CantidadMovida,
                CantidadNueva: data.CantidadNueva,
                Comentario: data.Comentario,
              };
            }),
          };
          historiales.push(Historial.movimiento);
        }
        let Historiales = [];
        for (z = 0; z < historiales.length; z++) {
          for (x = 0; x < historiales[z].length; x++) {
            Historiales.push(historiales[z][x]);
          }
        }
        res.render("facturacion/reporte_pdf/reporte_movimientos", {
          Historiales,
        });
      } else {
        let stock = await stockDB
          .find({ CodigoT: Codigo })
          .sort({ date: "desc" });
        let historial;
        let historiales = [];
        for (x = 0; x < stock.length; x++) {
          let HistorialMovimiento = stock[x].HistorialMovimiento;
          Historial = {
            movimiento: HistorialMovimiento.map((data) => {
              return {
                CodigoMovimiento: data.CodigoMovimiento,
                TipoMovimiento: data.TipoMovimiento,
                Codigo: stock[x].CodigoT,
                FechaMovimiento: data.FechaMovimiento,
                CantidadAnterior: data.CantidadAnterior,
                CantidadMovida: data.CantidadMovida,
                CantidadNueva: data.CantidadNueva,
                Comentario: data.Comentario,
              };
            }),
          };
          historiales.push(Historial.movimiento);
        }
        let Historiales = [];
        for (z = 0; z < historiales[0].length; z++) {
          Historiales.push(historiales[0][z]);
        }
        res.render("facturacion/reporte_pdf/reporte_movimientos", {
          Historiales,
        });
      }
    }
  }
});

//Reporte de vendedores

router.post("/reporte-vendedores", isAuthenticatedVendedor, async (req, res) => {
  const { Desde, Hasta, Nombres, Formato,Estado, TipoFecha} = req.body;

  let fechaDesde = new Date(Desde).getTime();
  let fechaHasta = new Date(Hasta).getTime();
  const xl = require("excel4node");
  const wb = new xl.Workbook();



  //estefanie2
  if (Formato == "Excel") {
    if (Desde && Hasta) {
      if (Nombres == 0) {
        //todos
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        let notas 
        if(Estado == "Todas"){
          notas = await facturaDB.find()
        }
        if(Estado == "Cobrado"){
          notas = await facturaDB.find({Estado: "Cobrado"})
        }
        if(Estado == "Por cobrar"){
          notas = await facturaDB.find({Estado: "Por cobrar"})
        }
        if(TipoFecha == "Registro"){
          notas = notas.filter((data) => data.Timestamp >= fechaDesde && data.Timestamp <= fechaHasta)
        }
        if(TipoFecha == "Vencimiento"){
          notas = notas.filter((data) => data.Vencimiento >= Desde && data.Vencimiento <= Hasta)
        }
        facturas = notas.map((data) => {
         return{
           Fecha: data.date,
           Numero: data.Factura,
           Cliente: data.Cliente,
           Estado: data.Estado,
           ComisionVendedor: data.GananciasVendedor,
           Vendedor: data.Vendedor,
           CantidadTotal: data.CantidadTotal,
           PendienteAPagar: data.PendienteAPagar,
           PrecioTotal: data.PrecioTotal,
         }
       }) 
       let data = []
       let PrecioTotalTotal = 0
       let PendienteAPagarTotal = 0
       let ComisionTotal = 0
       for(i=0; i< facturas.length; i++){
         let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
         if(!validacion){
           let Vendedor = facturas[i].Vendedor
           let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
           for(z=0; z< facturasVendedor.length ;z++ ){
             PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
             PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
             ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
           }
           let factura = {
             Vendedor: facturas[i].Vendedor,
             Cliente: facturas[i].Cliente,
             ComisionTotal: ComisionTotal,
             PrecioTotalTotal :  PrecioTotalTotal,
             PendienteAPagarTotal: PendienteAPagarTotal,
             Facturas : []
           }
           PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
           PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
           PrecioTotalTotal = 0
           PendienteAPagarTotal = 0
           ComisionTotal = 0
           data.push(factura)
         }
       }
       for(x=0; x< facturas.length; x++){
         data.map((data) => {
           if(data.Vendedor == facturas[x].Vendedor){
             return{
               Cliente: data.Cliente,
               Vendedor: data.Vendedor,
               PrecioTotalTotal:  data.PrecioTotalTotal,
               PendienteAPagarTotal:  data.PendienteAPagarTotal,
               ComisionTotal:  data.ComisionTotal,
               Facturas: data.Facturas.push({
                 Fecha: facturas[x].Fecha,
                 Numero: facturas[x].Numero, 
                 Cliente: facturas[x].Cliente, 
                 Vendedor: facturas[x].Vendedor, 
                 ComisionVendedor: facturas[x].ComisionVendedor, 
                 CantidadTotal: facturas[x].CantidadTotal, 
                 PendienteAPagar: facturas[x].PendienteAPagar,
                 PrecioTotal: facturas[x].PrecioTotal, 
                 Estado: facturas[x].Estado, 
               }),
             }
           }else{
             return{
               Cliente: data.Cliente,
               PrecioTotalTotal: data.PrecioTotalTotal,
               PendienteAPagarTotal: data.PendienteAPagarTotal,
               Facturas: data.Facturas,
             }
           }
         })
       }
       let Facturas = data.map((data) => {
         return{
           Cliente :data.Cliente,
           Vendedor :data.Vendedor,
           PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
           PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
           ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
           Facturas : data.Facturas.map((data2) => {
             return{
               Fecha: data2.Fecha,
               Estado: data2.Estado,
               Numero: data2.Numero,
               Cliente: data2.Cliente,
               Vendedor: data2.Vendedor,
               ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
               CantidadTotal: data2.CantidadTotal,
               PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
               PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
             }
           }) 
         }
       })
       PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
       PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)

      const ws = wb.addWorksheet("Ventas");

      const style = wb.createStyle({
        font: {
          color: "#000000",
          size: 11,
        },
        fill: {
          type: "pattern",
          patternType: "solid",
          bgColor: "#FFFF00",
          fgColor: "#FFFF00",
        },
      });

      
      ws.cell(2, 2,2,10, true).string("REPORTE TODOS LOS VENDEDORES").style(style);
      
      const styleTotal = wb.createStyle({
        font: {
          color: "#000000",
          size: 11,
        },
        fill: {
          type: "pattern",
          patternType: "solid",
          bgColor: "#EE0A1F",
          fgColor: "#EE0A1F",
        },
      });

        let fila = 3
        
      for(i=0; i< Facturas.length; i++){
        let columna = 2
        fila++ 
   
        fila++  
        ws.cell(fila, columna, fila, 10, true).string(Facturas[i].Vendedor).style(style);
        fila++ 
        ws.cell(fila, columna++).string("Fecha de compra").style(style);
        ws.cell(fila, columna++).string("Estado").style(style);
        ws.cell(fila, columna++).string("Factura").style(style);
        ws.cell(fila, columna++).string("Cliente").style(style);
        ws.cell(fila, columna++).string("Vendedor").style(style);
        ws.cell(fila, columna++).string("Comision").style(style);
        ws.cell(fila, columna++).string("Cantidad total").style(style);
        ws.cell(fila, columna++).string("Pendiente a pagar").style(style);
        ws.cell(fila, columna++).string("Precio total").style(style);
        for(r=0; r< Facturas[i].Facturas.length; r++){
          fila++
          columna = 2
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Fecha)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Estado)
          ws.cell(fila, columna++).number(Facturas[i].Facturas[r].Numero)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Cliente)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Vendedor)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].ComisionVendedor)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].CantidadTotal)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PendienteAPagar)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PrecioTotal)
        }
      }
        //descarga excel
        wb.write(`Reportes_vendedores.xlsx`, res);
      } else {

        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        let notas 
        if(Estado == "Todas"){
          notas = await facturaDB.find({Vendedor: Nombres})
        }
        if(Estado == "Cobrado"){
          notas = await facturaDB.find({$and : [{Estado: "Cobrado"},{Vendedor: Nombres}]})
        }
        if(Estado == "Por cobrar"){
          notas = await facturaDB.find({$and : [{Estado: "Por cobrar"},{Vendedor: Nombres}]})
        }
        if(TipoFecha == "Registro"){
          notas = notas.filter((data) => data.Timestamp >= fechaDesde && data.Timestamp <= fechaHasta)
        }
        if(TipoFecha == "Vencimiento"){
          notas = notas.filter((data) => data.Vencimiento >= Desde && data.Vencimiento <= Hasta)
        }
        facturas = notas.map((data) => {
         return{
           Fecha: data.date,
           Numero: data.Factura,
           Cliente: data.Cliente,
           Estado: data.Estado,
           ComisionVendedor: data.GananciasVendedor,
           Vendedor: data.Vendedor,
           CantidadTotal: data.CantidadTotal,
           PendienteAPagar: data.PendienteAPagar,
           PrecioTotal: data.PrecioTotal,
         }
       }) 
       let data = []
       let PrecioTotalTotal = 0
       let PendienteAPagarTotal = 0
       let ComisionTotal = 0
       for(i=0; i< facturas.length; i++){
         let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
         if(!validacion){
           let Vendedor = facturas[i].Vendedor
           let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
           for(z=0; z< facturasVendedor.length ;z++ ){
             PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
             PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
             ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
           }
           let factura = {
             Vendedor: facturas[i].Vendedor,
             Cliente: facturas[i].Cliente,
             ComisionTotal: ComisionTotal,
             PrecioTotalTotal :  PrecioTotalTotal,
             PendienteAPagarTotal: PendienteAPagarTotal,
             Facturas : []
           }
           PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
           PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
           PrecioTotalTotal = 0
           PendienteAPagarTotal = 0
           ComisionTotal = 0
           data.push(factura)
         }
       }
       for(x=0; x< facturas.length; x++){
         data.map((data) => {
           if(data.Vendedor == facturas[x].Vendedor){
             return{
               Cliente: data.Cliente,
               Vendedor: data.Vendedor,
               PrecioTotalTotal:  data.PrecioTotalTotal,
               PendienteAPagarTotal:  data.PendienteAPagarTotal,
               ComisionTotal:  data.ComisionTotal,
               Facturas: data.Facturas.push({
                 Fecha: facturas[x].Fecha,
                 Numero: facturas[x].Numero, 
                 Cliente: facturas[x].Cliente, 
                 Vendedor: facturas[x].Vendedor, 
                 ComisionVendedor: facturas[x].ComisionVendedor, 
                 CantidadTotal: facturas[x].CantidadTotal, 
                 PendienteAPagar: facturas[x].PendienteAPagar,
                 PrecioTotal: facturas[x].PrecioTotal, 
                 Estado: facturas[x].Estado, 
               }),
             }
           }else{
             return{
               Cliente: data.Cliente,
               PrecioTotalTotal: data.PrecioTotalTotal,
               PendienteAPagarTotal: data.PendienteAPagarTotal,
               Facturas: data.Facturas,
             }
           }
         })
       }
       let Facturas = data.map((data) => {
         return{
           Cliente :data.Cliente,
           Vendedor :data.Vendedor,
           PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
           PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
           ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
           Facturas : data.Facturas.map((data2) => {
             return{
               Fecha: data2.Fecha,
               Estado: data2.Estado,
               Numero: data2.Numero,
               Cliente: data2.Cliente,
               Vendedor: data2.Vendedor,
               ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
               CantidadTotal: data2.CantidadTotal,
               PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
               PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
             }
           }) 
         }
       })
       PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
       PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)

      const ws = wb.addWorksheet("VENTAS");

      const style = wb.createStyle({
        font: {
          color: "#000000",
          size: 11,
        },
        fill: {
          type: "pattern",
          patternType: "solid",
          bgColor: "#FFFF00",
          fgColor: "#FFFF00",
        },
      });

      
      ws.cell(2, 2,2,10, true).string("REPORTE DE VENDEDOR").style(style);
      
      const styleTotal = wb.createStyle({
        font: {
          color: "#000000",
          size: 11,
        },
        fill: {
          type: "pattern",
          patternType: "solid",
          bgColor: "#EE0A1F",
          fgColor: "#EE0A1F",
        },
      });

        let fila = 3
        
      for(i=0; i< Facturas.length; i++){
        let columna = 2
        fila++ 
   
        fila++  
        ws.cell(fila, columna, fila, 10, true).string(Facturas[i].Vendedor).style(style);
        fila++ 
        ws.cell(fila, columna++).string("Fecha de compra").style(style);
        ws.cell(fila, columna++).string("Estado").style(style);
        ws.cell(fila, columna++).string("Factura").style(style);
        ws.cell(fila, columna++).string("Cliente").style(style);
        ws.cell(fila, columna++).string("Vendedor").style(style);
        ws.cell(fila, columna++).string("Comision").style(style);
        ws.cell(fila, columna++).string("Cantidad total").style(style);
        ws.cell(fila, columna++).string("Pendiente a pagar").style(style);
        ws.cell(fila, columna++).string("Precio total").style(style);
        for(r=0; r< Facturas[i].Facturas.length; r++){
          fila++
          columna = 2
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Fecha)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Estado)
          ws.cell(fila, columna++).number(Facturas[i].Facturas[r].Numero)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Cliente)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Vendedor)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].ComisionVendedor)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].CantidadTotal)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PendienteAPagar)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PrecioTotal)
        }
      }

        wb.write(`Reporte_cliente${Nombres}.xlsx`, res);
      }
    }

    if (!Desde && !Hasta) {
     //sin fecha apertura
     if (Nombres == 0) {
      //todos
      let PendienteAPagarGeneral = 0
      let PrecioTotalGeneral = 0
      let notas 
      if(Estado == "Todas"){
        notas = await facturaDB.find()
      }
      if(Estado == "Cobrado"){
        notas = await facturaDB.find({Estado: "Cobrado"})
      }
      if(Estado == "Por cobrar"){
        notas = await facturaDB.find({Estado: "Por cobrar"})
      }
      facturas = notas.map((data) => {
       return{
         Fecha: data.date,
         Numero: data.Factura,
         Cliente: data.Cliente,
         Estado: data.Estado,
         ComisionVendedor: data.GananciasVendedor,
         Vendedor: data.Vendedor,
         CantidadTotal: data.CantidadTotal,
         PendienteAPagar: data.PendienteAPagar,
         PrecioTotal: data.PrecioTotal,
       }
     }) 
     let data = []
     let PrecioTotalTotal = 0
     let PendienteAPagarTotal = 0
     let ComisionTotal = 0
     for(i=0; i< facturas.length; i++){
       let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
       if(!validacion){
         let Vendedor = facturas[i].Vendedor
         let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
         for(z=0; z< facturasVendedor.length ;z++ ){
           PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
           PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
           ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
         }
         let factura = {
           Vendedor: facturas[i].Vendedor,
           Cliente: facturas[i].Cliente,
           ComisionTotal: ComisionTotal,
           PrecioTotalTotal :  PrecioTotalTotal,
           PendienteAPagarTotal: PendienteAPagarTotal,
           Facturas : []
         }
         PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
         PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
         PrecioTotalTotal = 0
         PendienteAPagarTotal = 0
         ComisionTotal = 0
         data.push(factura)
       }
     }
     for(x=0; x< facturas.length; x++){
       data.map((data) => {
         if(data.Vendedor == facturas[x].Vendedor){
           return{
             Cliente: data.Cliente,
             Vendedor: data.Vendedor,
             PrecioTotalTotal:  data.PrecioTotalTotal,
             PendienteAPagarTotal:  data.PendienteAPagarTotal,
             ComisionTotal:  data.ComisionTotal,
             Facturas: data.Facturas.push({
               Fecha: facturas[x].Fecha,
               Numero: facturas[x].Numero, 
               Cliente: facturas[x].Cliente, 
               Vendedor: facturas[x].Vendedor, 
               ComisionVendedor: facturas[x].ComisionVendedor, 
               CantidadTotal: facturas[x].CantidadTotal, 
               PendienteAPagar: facturas[x].PendienteAPagar,
               PrecioTotal: facturas[x].PrecioTotal, 
               Estado: facturas[x].Estado, 
             }),
           }
         }else{
           return{
             Cliente: data.Cliente,
             PrecioTotalTotal: data.PrecioTotalTotal,
             PendienteAPagarTotal: data.PendienteAPagarTotal,
             Facturas: data.Facturas,
           }
         }
       })
     }
     let Facturas = data.map((data) => {
       return{
         Cliente :data.Cliente,
         Vendedor :data.Vendedor,
         PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
         PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
         ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
         Facturas : data.Facturas.map((data2) => {
           return{
             Fecha: data2.Fecha,
             Estado: data2.Estado,
             Numero: data2.Numero,
             Cliente: data2.Cliente,
             Vendedor: data2.Vendedor,
             ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
             CantidadTotal: data2.CantidadTotal,
             PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
             PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
           }
         }) 
       }
     })
     PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
     PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)

    const ws = wb.addWorksheet("Ventas");

    const style = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#FFFF00",
        fgColor: "#FFFF00",
      },
    });

    
    ws.cell(2, 2,2,10, true).string("REPORTE TODOS LOS VENDEDORES").style(style);
    
    const styleTotal = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#EE0A1F",
        fgColor: "#EE0A1F",
      },
    });

      let fila = 3
      
    for(i=0; i< Facturas.length; i++){
      let columna = 2
      fila++ 
 
      fila++  
      ws.cell(fila, columna, fila, 10, true).string(Facturas[i].Vendedor).style(style);
      fila++ 
      ws.cell(fila, columna++).string("Fecha de compra").style(style);
      ws.cell(fila, columna++).string("Estado").style(style);
      ws.cell(fila, columna++).string("Factura").style(style);
      ws.cell(fila, columna++).string("Cliente").style(style);
      ws.cell(fila, columna++).string("Vendedor").style(style);
      ws.cell(fila, columna++).string("Comision").style(style);
      ws.cell(fila, columna++).string("Cantidad total").style(style);
      ws.cell(fila, columna++).string("Pendiente a pagar").style(style);
      ws.cell(fila, columna++).string("Precio total").style(style);
      for(r=0; r< Facturas[i].Facturas.length; r++){
        fila++
        columna = 2
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Fecha)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Estado)
        ws.cell(fila, columna++).number(Facturas[i].Facturas[r].Numero)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Cliente)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Vendedor)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].ComisionVendedor)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].CantidadTotal)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PendienteAPagar)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PrecioTotal)
      }
    }
      //descarga excel
      wb.write(`Reportes_ventas.xlsx`, res);
    } else {

      let PendienteAPagarGeneral = 0
      let PrecioTotalGeneral = 0
      let notas 
      if(Estado == "Todas"){
        notas = await facturaDB.find({Vendedor: Nombres})
      }
      if(Estado == "Cobrado"){
        notas = await facturaDB.find({$and : [{Estado: "Cobrado"},{Vendedor: Nombres}]})
      }
      if(Estado == "Por cobrar"){
        notas = await facturaDB.find({$and : [{Estado: "Por cobrar"},{Vendedor: Nombres}]})
      }
      facturas = notas.map((data) => {
       return{
         Fecha: data.date,
         Numero: data.Factura,
         Cliente: data.Cliente,
         Estado: data.Estado,
         ComisionVendedor: data.GananciasVendedor,
         Vendedor: data.Vendedor,
         CantidadTotal: data.CantidadTotal,
         PendienteAPagar: data.PendienteAPagar,
         PrecioTotal: data.PrecioTotal,
       }
     }) 
     let data = []
     let PrecioTotalTotal = 0
     let PendienteAPagarTotal = 0
     let ComisionTotal = 0
     for(i=0; i< facturas.length; i++){
       let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
       if(!validacion){
         let Vendedor = facturas[i].Vendedor
         let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
         for(z=0; z< facturasVendedor.length ;z++ ){
           PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
           PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
           ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
         }
         let factura = {
           Vendedor: facturas[i].Vendedor,
           Cliente: facturas[i].Cliente,
           ComisionTotal: ComisionTotal,
           PrecioTotalTotal :  PrecioTotalTotal,
           PendienteAPagarTotal: PendienteAPagarTotal,
           Facturas : []
         }
         PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
         PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
         PrecioTotalTotal = 0
         PendienteAPagarTotal = 0
         ComisionTotal = 0
         data.push(factura)
       }
     }
     for(x=0; x< facturas.length; x++){
       data.map((data) => {
         if(data.Vendedor == facturas[x].Vendedor){
           return{
             Cliente: data.Cliente,
             Vendedor: data.Vendedor,
             PrecioTotalTotal:  data.PrecioTotalTotal,
             PendienteAPagarTotal:  data.PendienteAPagarTotal,
             ComisionTotal:  data.ComisionTotal,
             Facturas: data.Facturas.push({
               Fecha: facturas[x].Fecha,
               Numero: facturas[x].Numero, 
               Cliente: facturas[x].Cliente, 
               Vendedor: facturas[x].Vendedor, 
               ComisionVendedor: facturas[x].ComisionVendedor, 
               CantidadTotal: facturas[x].CantidadTotal, 
               PendienteAPagar: facturas[x].PendienteAPagar,
               PrecioTotal: facturas[x].PrecioTotal, 
               Estado: facturas[x].Estado, 
             }),
           }
         }else{
           return{
             Cliente: data.Cliente,
             PrecioTotalTotal: data.PrecioTotalTotal,
             PendienteAPagarTotal: data.PendienteAPagarTotal,
             Facturas: data.Facturas,
           }
         }
       })
     }
     let Facturas = data.map((data) => {
       return{
         Cliente :data.Cliente,
         Vendedor :data.Vendedor,
         PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
         PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
         ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
         Facturas : data.Facturas.map((data2) => {
           return{
             Fecha: data2.Fecha,
             Estado: data2.Estado,
             Numero: data2.Numero,
             Cliente: data2.Cliente,
             Vendedor: data2.Vendedor,
             ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
             CantidadTotal: data2.CantidadTotal,
             PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
             PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
           }
         }) 
       }
     })
     PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
     PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)

    const ws = wb.addWorksheet("Ventas");

    const style = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#FFFF00",
        fgColor: "#FFFF00",
      },
    });

    
    ws.cell(2, 2,2,10, true).string("REPORTE TODOS LOS VENTAS").style(style);
    
    const styleTotal = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#EE0A1F",
        fgColor: "#EE0A1F",
      },
    });

      let fila = 3
      
    for(i=0; i< Facturas.length; i++){
      let columna = 2
      fila++ 
 
      fila++  
      ws.cell(fila, columna, fila, 10, true).string(Facturas[i].Vendedor).style(style);
      fila++ 
      ws.cell(fila, columna++).string("Fecha de compra").style(style);
      ws.cell(fila, columna++).string("Estado").style(style);
      ws.cell(fila, columna++).string("Factura").style(style);
      ws.cell(fila, columna++).string("Cliente").style(style);
      ws.cell(fila, columna++).string("Vendedor").style(style);
      ws.cell(fila, columna++).string("Comision").style(style);
      ws.cell(fila, columna++).string("Cantidad total").style(style);
      ws.cell(fila, columna++).string("Pendiente a pagar").style(style);
      ws.cell(fila, columna++).string("Precio total").style(style);
      for(r=0; r< Facturas[i].Facturas.length; r++){
        fila++
        columna = 2
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Fecha)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Estado)
        ws.cell(fila, columna++).number(Facturas[i].Facturas[r].Numero)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Cliente)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Vendedor)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].ComisionVendedor)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].CantidadTotal)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PendienteAPagar)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PrecioTotal)
      }
    }

      wb.write(`Reporte_vendedor${Nombres}.xlsx`, res);
    }
     //sin fecha cierre
    }

    if ((!Desde && Hasta) || (Desde && !Hasta)) {
      let errors = [{text:"Una de las fechas se encuentra vacía. Por favor, introduzca ambas fechas o en su defecto ninguna para generar los reportes."}]
      let cliente = await clienteDB.find().sort({"Empresa": 1})
      cliente = cliente.map((data) => {
        return{
          Empresa: data.Empresa,
        }
      })
      res.render('facturacion/cliente/reportes',{
        cliente,
        errors
      })
    }
  }

  if (Formato == "PDF") {
    if (Desde && Hasta) {
      if (Nombres == 0) {
       //abre anie
       let PendienteAPagarGeneral = 0
       let PrecioTotalGeneral = 0
       let notas 
       if(Estado == "Todas"){
         notas = await facturaDB.find()
       }
       if(Estado == "Cobrado"){
         notas = await facturaDB.find({Estado: "Cobrado"})
       }
       if(Estado == "Por cobrar"){
         notas = await facturaDB.find({Estado: "Por cobrar"})
       }
       if(TipoFecha == "Registro"){
        notas = notas.filter((data) => data.Timestamp >= fechaDesde && data.Timestamp <= fechaHasta)
      }
      if(TipoFecha == "Vencimiento"){
        notas = notas.filter((data) => data.Vencimiento >= Desde && data.Vencimiento <= Hasta)
      }
       facturas = notas.map((data) => {
        return{
          Fecha: data.date,
          Numero: data.Factura,
          Cliente: data.Cliente,
          Vencimiento: data.Vencimiento,
          Estado: data.Estado,
          ComisionVendedor: data.GananciasVendedor,
          Vendedor: data.Vendedor,
          CantidadTotal: data.CantidadTotal,
          PendienteAPagar: data.PendienteAPagar,
          PrecioTotal: data.PrecioTotal,
        }
      }) 
      let data = []
      let PrecioTotalTotal = 0
      let PendienteAPagarTotal = 0
      let ComisionTotalGeneral = 0
      let ComisionTotal = 0
      for(i=0; i< facturas.length; i++){
        let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
        if(!validacion){
          let Vendedor = facturas[i].Vendedor
          let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
          for(z=0; z< facturasVendedor.length ;z++ ){
            PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
            PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
            ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
          }
          let factura = {
            Vendedor: facturas[i].Vendedor,
            Cliente: facturas[i].Cliente,
            ComisionTotal: ComisionTotal,
            PrecioTotalTotal :  PrecioTotalTotal,
            PendienteAPagarTotal: PendienteAPagarTotal,
            Facturas : []
          }
          PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
          PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
          ComisionTotalGeneral = (+ComisionTotalGeneral + +ComisionTotal).toFixed(2)
          PrecioTotalTotal = 0
          PendienteAPagarTotal = 0
          ComisionTotal = 0
          data.push(factura)
        }
      }
      for(x=0; x< facturas.length; x++){
        data.map((data) => {
          if(data.Vendedor == facturas[x].Vendedor){
            return{
              Cliente: data.Cliente,
              Vendedor: data.Vendedor,
              PrecioTotalTotal:  data.PrecioTotalTotal,
              PendienteAPagarTotal:  data.PendienteAPagarTotal,
              ComisionTotal:  data.ComisionTotal,
              Facturas: data.Facturas.push({
                Fecha: facturas[x].Fecha,
                Vencimiento: facturas[x].Vencimiento,
                Numero: facturas[x].Numero, 
                Cliente: facturas[x].Cliente, 
                Vendedor: facturas[x].Vendedor, 
                ComisionVendedor: facturas[x].ComisionVendedor, 
                CantidadTotal: facturas[x].CantidadTotal, 
                PendienteAPagar: facturas[x].PendienteAPagar,
                PrecioTotal: facturas[x].PrecioTotal, 
                Estado: facturas[x].Estado, 
              }),
            }
          }else{
            return{
              Cliente: data.Cliente,
              PrecioTotalTotal: data.PrecioTotalTotal,
              PendienteAPagarTotal: data.PendienteAPagarTotal,
              Facturas: data.Facturas,
            }
          }
        })
      }
      let Facturas = data.map((data) => {
        return{
          Cliente :data.Cliente,
          Vendedor :data.Vendedor,
          PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
          PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
          ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
          Facturas : data.Facturas.map((data2) => {
            return{
              Fecha: data2.Fecha,
              Numero: data2.Numero,
              Cliente: data2.Cliente,
              Estado: data2.Estado,
              Vencimiento: data2.Vencimiento,
              Vendedor: data2.Vendedor,
              ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
              CantidadTotal: data2.CantidadTotal,
              PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
              PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
            }
          }) 
        }
      })
      PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
      PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
      ComisionTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(ComisionTotalGeneral)
      let Titulo = "REPORTE TODOS LOS VENDEDORES"
        res.render('facturacion/reporte_pdf/reporte_vendedores',{
            Facturas,
            PendienteAPagarGeneral,
            PrecioTotalGeneral,
            ComisionTotalGeneral,
            Titulo,

        })

        //cierre
      } else {
        //abre anie
       let PendienteAPagarGeneral = 0
       let PrecioTotalGeneral = 0
       let notas 
       if(Estado == "Todas"){
         notas = await facturaDB.find({Vendedor: Nombres})
       }
       if(Estado == "Cobrado"){
         notas = await facturaDB.find({$and : [{Estado: "Cobrado"},{Vendedor: Nombres}]})
       }
       if(Estado == "Por cobrar"){
         notas = await facturaDB.find({$and : [{Estado: "Por cobrar"},{Vendedor: Nombres}]})
       }
       if(TipoFecha == "Registro"){
        notas = notas.filter((data) => data.Timestamp >= fechaDesde && data.Timestamp <= fechaHasta)
      }
      if(TipoFecha == "Vencimiento"){
        notas = notas.filter((data) => data.Vencimiento >= Desde && data.Vencimiento <= Hasta)
      }
       facturas = notas.map((data) => {
        return{
          Fecha: data.date,
          Numero: data.Factura,
          Cliente: data.Cliente,
          Estado: data.Estado,
          Vencimiento: data.Vencimiento,
          ComisionVendedor: data.GananciasVendedor,
          Vendedor: data.Vendedor,
          CantidadTotal: data.CantidadTotal,
          PendienteAPagar: data.PendienteAPagar,
          PrecioTotal: data.PrecioTotal,
        }
      }) 
      let data = []
      let PrecioTotalTotal = 0
      let PendienteAPagarTotal = 0
      let ComisionTotal = 0
      let ComisionTotalGeneral = 0
      for(i=0; i< facturas.length; i++){
        let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
        if(!validacion){
          let Vendedor = facturas[i].Vendedor
          let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
          for(z=0; z< facturasVendedor.length ;z++ ){
            PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
            PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
            ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
          }
          let factura = {
            Vendedor: facturas[i].Vendedor,
            Cliente: facturas[i].Cliente,
            ComisionTotal: ComisionTotal,
            PrecioTotalTotal :  PrecioTotalTotal,
            PendienteAPagarTotal: PendienteAPagarTotal,
            Facturas : []
          }
          PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
          PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
          ComisionTotalGeneral = (+ComisionTotalGeneral + +ComisionTotal).toFixed(2)

          PrecioTotalTotal = 0
          PendienteAPagarTotal = 0
          ComisionTotal = 0
          data.push(factura)
        }
      }
      for(x=0; x< facturas.length; x++){
        data.map((data) => {
          if(data.Vendedor == facturas[x].Vendedor){
            return{
              Cliente: data.Cliente,
              Vendedor: data.Vendedor,
              PrecioTotalTotal:  data.PrecioTotalTotal,
              PendienteAPagarTotal:  data.PendienteAPagarTotal,
              ComisionTotal:  data.ComisionTotal,
              Facturas: data.Facturas.push({
                Fecha: facturas[x].Fecha,
                Numero: facturas[x].Numero, 
                Vencimiento: facturas[x].Vencimiento,
                Cliente: facturas[x].Cliente, 
                Vendedor: facturas[x].Vendedor, 
                ComisionVendedor: facturas[x].ComisionVendedor, 
                CantidadTotal: facturas[x].CantidadTotal, 
                PendienteAPagar: facturas[x].PendienteAPagar,
                PrecioTotal: facturas[x].PrecioTotal, 
                Estado: facturas[x].Estado, 
              }),
            }
          }else{
            return{
              Cliente: data.Cliente,
              PrecioTotalTotal: data.PrecioTotalTotal,
              PendienteAPagarTotal: data.PendienteAPagarTotal,
              Facturas: data.Facturas,
            }
          }
        })
      }
      let Facturas = data.map((data) => {
        return{
          Cliente :data.Cliente,
          Vendedor :data.Vendedor,
          PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
          PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
          ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
          Facturas : data.Facturas.map((data2) => {
            return{
              Fecha: data2.Fecha,
              Numero: data2.Numero,
              Cliente: data2.Cliente,
              Estado: data2.Estado,
              Vencimiento:data2.Vencimiento,
              Vendedor: data2.Vendedor,
              ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
              CantidadTotal: data2.CantidadTotal,
              PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
              PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
            }
          }) 
        }
      })
      PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
      PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
      ComisionTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(ComisionTotalGeneral)
      let Titulo = `REPORTE VENDEDOR ${Nombres}`
      let mensaje = ""
      if(Facturas.length == 0){
        mensaje= "SIN FACTURAS ENCONTRADAS"
      }

        res.render('facturacion/reporte_pdf/reporte_vendedores',{
            Facturas,
            PendienteAPagarGeneral,
            PrecioTotalGeneral,
            ComisionTotalGeneral,
            mensaje,
            ComisionTotal,
            Titulo

        })

        //cierre
       
      }
    }
    if (!Desde && !Hasta) {
      if (Nombres == 0) {
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        let notas 
        if(Estado == "Todas"){
          notas = await facturaDB.find()
        }
        if(Estado == "Cobrado"){
          notas = await facturaDB.find({Estado: "Cobrado"})
        }
        if(Estado == "Por cobrar"){
          notas = await facturaDB.find({Estado: "Por cobrar"})
        }
        facturas = notas.map((data) => {
         return{
           Fecha: data.date,
           Numero: data.Factura,
           Cliente: data.Cliente,
           Estado: data.Estado,
           Vencimiento: data.Vencimiento,
           ComisionVendedor: data.GananciasVendedor,
           Vendedor: data.Vendedor,
           CantidadTotal: data.CantidadTotal,
           PendienteAPagar: data.PendienteAPagar,
           PrecioTotal: data.PrecioTotal,
         }
       }) 
       let data = []
       let PrecioTotalTotal = 0
       let PendienteAPagarTotal = 0
       let ComisionTotal = 0
       let ComisionTotalGeneral = 0
       for(i=0; i< facturas.length; i++){
         let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
         if(!validacion){
           let Vendedor = facturas[i].Vendedor
           let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
           for(z=0; z< facturasVendedor.length ;z++ ){
             PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
             PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
             ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
           }
           let factura = {
             Vendedor: facturas[i].Vendedor,
             Cliente: facturas[i].Cliente,
             ComisionTotal: ComisionTotal,
             PrecioTotalTotal :  PrecioTotalTotal,
             PendienteAPagarTotal: PendienteAPagarTotal,
             Facturas : []
           }
           PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
           PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
          ComisionTotalGeneral = (+ComisionTotalGeneral + +ComisionTotal).toFixed(2)

           PrecioTotalTotal = 0
           PendienteAPagarTotal = 0
           ComisionTotal = 0
           data.push(factura)
         }
       }
       for(x=0; x< facturas.length; x++){
         data.map((data) => {
           if(data.Vendedor == facturas[x].Vendedor){
             return{
               Cliente: data.Cliente,
               Vendedor: data.Vendedor,
               PrecioTotalTotal:  data.PrecioTotalTotal,
               PendienteAPagarTotal:  data.PendienteAPagarTotal,
               ComisionTotal:  data.ComisionTotal,
               Facturas: data.Facturas.push({
                 Fecha: facturas[x].Fecha,
                 Vencimiento: facturas[x].Vencimiento,
                 Numero: facturas[x].Numero, 
                 Cliente: facturas[x].Cliente, 
                 Vendedor: facturas[x].Vendedor, 
                 ComisionVendedor: facturas[x].ComisionVendedor, 
                 CantidadTotal: facturas[x].CantidadTotal, 
                 PendienteAPagar: facturas[x].PendienteAPagar,
                 PrecioTotal: facturas[x].PrecioTotal, 
                 Estado: facturas[x].Estado, 
               }),
             }
           }else{
             return{
               Cliente: data.Cliente,
               PrecioTotalTotal: data.PrecioTotalTotal,
               PendienteAPagarTotal: data.PendienteAPagarTotal,
               Facturas: data.Facturas,
             }
           }
         })
       }
       let Facturas = data.map((data) => {
         return{
           Cliente :data.Cliente,
           Vendedor :data.Vendedor,
           PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
           PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
           ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
           Facturas : data.Facturas.map((data2) => {
             return{
               Fecha: data2.Fecha,
               Numero: data2.Numero,
               Cliente: data2.Cliente,
               Estado: data2.Estado,
               Vencimiento: data2.Vencimiento,
               Vendedor: data2.Vendedor,
               ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
               CantidadTotal: data2.CantidadTotal,
               PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
               PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
             }
           }) 
         }
       })
       PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
       PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
      ComisionTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(ComisionTotalGeneral)
       let Titulo= "REPORTE TODOS LOS VENDEDORES"
       
         res.render('facturacion/reporte_pdf/reporte_vendedores',{
             Facturas,
             PendienteAPagarGeneral,
             PrecioTotalGeneral,
             ComisionTotalGeneral,
             ComisionTotal,
             Titulo,

         })
      } else {
           //abre anie
           let PendienteAPagarGeneral = 0
           let PrecioTotalGeneral = 0
           let notas 
           if(Estado == "Todas"){
             notas = await facturaDB.find({Vendedor: Nombres})
           }
           if(Estado == "Cobrado"){
             notas = await facturaDB.find({$and : [{Estado: "Cobrado"},{Vendedor: Nombres}]})
           }
           if(Estado == "Por cobrar"){
             notas = await facturaDB.find({$and : [{Estado: "Por cobrar"},{Vendedor: Nombres}]})
           }
           facturas = notas.map((data) => {
            return{
              Fecha: data.date,
              Numero: data.Factura,
              Cliente: data.Cliente,
              Estado: data.Estado,
              Vencimiento: data.Vencimiento,
              ComisionVendedor: data.GananciasVendedor,
              Vendedor: data.Vendedor,
              CantidadTotal: data.CantidadTotal,
              PendienteAPagar: data.PendienteAPagar,
              PrecioTotal: data.PrecioTotal,
            }
          }) 
          let data = []
          let PrecioTotalTotal = 0
          let PendienteAPagarTotal = 0
          let ComisionTotal = 0
          let ComisionTotalGeneral = 0
          for(i=0; i< facturas.length; i++){
            let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
            if(!validacion){
              let Vendedor = facturas[i].Vendedor
              let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
              for(z=0; z< facturasVendedor.length ;z++ ){
                PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
                PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
                ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
              }
              let factura = {
                Vendedor: facturas[i].Vendedor,
                Cliente: facturas[i].Cliente,
                ComisionTotal: ComisionTotal,
                PrecioTotalTotal :  PrecioTotalTotal,
                PendienteAPagarTotal: PendienteAPagarTotal,
                Facturas : []
              }
              PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
              PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
              ComisionTotalGeneral = (+ComisionTotalGeneral + +ComisionTotal).toFixed(2)
              PrecioTotalTotal = 0
              PendienteAPagarTotal = 0
              ComisionTotal = 0
              data.push(factura)
            }
          }
          for(x=0; x< facturas.length; x++){
            data.map((data) => {
              if(data.Vendedor == facturas[x].Vendedor){
                return{
                  Cliente: data.Cliente,
                  Vendedor: data.Vendedor,
                  PrecioTotalTotal:  data.PrecioTotalTotal,
                  PendienteAPagarTotal:  data.PendienteAPagarTotal,
                  ComisionTotal:  data.ComisionTotal,
                  Facturas: data.Facturas.push({
                    Fecha: facturas[x].Fecha,
                    Numero: facturas[x].Numero, 
                    Vencimiento: facturas[x].Vencimiento, 
                    Cliente: facturas[x].Cliente, 
                    Vendedor: facturas[x].Vendedor, 
                    ComisionVendedor: facturas[x].ComisionVendedor, 
                    CantidadTotal: facturas[x].CantidadTotal, 
                    PendienteAPagar: facturas[x].PendienteAPagar,
                    PrecioTotal: facturas[x].PrecioTotal, 
                    Estado: facturas[x].Estado, 
                  }),
                }
              }else{
                return{
                  Cliente: data.Cliente,
                  PrecioTotalTotal: data.PrecioTotalTotal,
                  PendienteAPagarTotal: data.PendienteAPagarTotal,
                  Facturas: data.Facturas,
                }
              }
            })
          }
          let Facturas = data.map((data) => {
            return{
              Cliente :data.Cliente,
              Vendedor :data.Vendedor,
              PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
              PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
              ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
              Facturas : data.Facturas.map((data2) => {
                return{
                  Fecha: data2.Fecha,
                  Numero: data2.Numero,
                  Cliente: data2.Cliente,
                  Estado: data2.Estado,
                  Vencimiento: data2.Vencimiento,
                  Vendedor: data2.Vendedor,
                  ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                  CantidadTotal: data2.CantidadTotal,
                  PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                  PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
                }
              }) 
            }
          })
          PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
          PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
          ComisionTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(ComisionTotalGeneral)
          let Titulo = `REPORTE VENDEDOR ${Nombres}`
          let mensaje = ""
          if(Facturas.length == 0){
            mensaje= "SIN FACTURAS ENCONTRADAS"
          }
    
            res.render('facturacion/reporte_pdf/reporte_vendedores',{
                Facturas,
                PendienteAPagarGeneral,
                PrecioTotalGeneral,
                ComisionTotal,
                ComisionTotalGeneral,
                mensaje,
                Titulo
            })
    
            //cierre
      }
    }
    if ((!Desde && Hasta) || (Desde && !Hasta)) {
      let errors = [{text:"Una de las fechas se encuentra vacía. Por favor, introduzca ambas fechas o en su defecto ninguna para generar los reportes."}]
      let cliente = await clienteDB.find().sort({"Empresa": 1})
      cliente = cliente.map((data) => {
        return{
          Empresa: data.Empresa,
        }
      })
      res.render('facturacion/vendedor/reportes',{
        cliente,
        errors
      })

    }
  }
});

//reporte de compras de clientes
router.post("/reporte-clientes", isAuthenticatedCliente, async (req, res) => {
  const { Desde, Hasta, Empresa, Formato } = req.body;

  let fechaDesde = new Date(Desde).getTime();
  let fechaHasta = new Date(Hasta).getTime();
  const xl = require("excel4node");
  const wb = new xl.Workbook();

  //estefanie
  if (Formato == "Excel") {
    if (Desde && Hasta) {
      if (Empresa == 0) {
        //todos
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        let notas = await facturaDB.find()
        notas = notas.filter((data) => data.Timestamp >= fechaDesde && data.Timestamp <= fechaHasta)
        facturas = notas.map((data) => {
         return{
           Fecha: data.date,
           Numero: data.Factura,
           Cliente: data.Cliente,
           Estado: data.Estado,
           ComisionVendedor: data.GananciasVendedor,
           Vendedor: data.Vendedor,
           CantidadTotal: data.CantidadTotal,
           PendienteAPagar: data.PendienteAPagar,
           PrecioTotal: data.PrecioTotal,
         }
       }) 
       let data = []
       let PrecioTotalTotal = 0
       let PendienteAPagarTotal = 0
       let ComisionTotal = 0
       for(i=0; i< facturas.length; i++){
         let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
         if(!validacion){
           let Vendedor = facturas[i].Vendedor
           let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
           for(z=0; z< facturasVendedor.length ;z++ ){
             PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
             PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
             ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
           }
           let factura = {
             Vendedor: facturas[i].Vendedor,
             Cliente: facturas[i].Cliente,
             ComisionTotal: ComisionTotal,
             PrecioTotalTotal :  PrecioTotalTotal,
             PendienteAPagarTotal: PendienteAPagarTotal,
             Facturas : []
           }
           PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
           PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
           PrecioTotalTotal = 0
           PendienteAPagarTotal = 0
           ComisionTotal = 0
           data.push(factura)
         }
       }
       for(x=0; x< facturas.length; x++){
         data.map((data) => {
           if(data.Vendedor == facturas[x].Vendedor){
             return{
               Cliente: data.Cliente,
               Vendedor: data.Vendedor,
               PrecioTotalTotal:  data.PrecioTotalTotal,
               PendienteAPagarTotal:  data.PendienteAPagarTotal,
               ComisionTotal:  data.ComisionTotal,
               Facturas: data.Facturas.push({
                 Fecha: facturas[x].Fecha,
                 Numero: facturas[x].Numero, 
                 Cliente: facturas[x].Cliente, 
                 Vendedor: facturas[x].Vendedor, 
                 ComisionVendedor: facturas[x].ComisionVendedor, 
                 CantidadTotal: facturas[x].CantidadTotal, 
                 PendienteAPagar: facturas[x].PendienteAPagar,
                 PrecioTotal: facturas[x].PrecioTotal, 
                 Estado: facturas[x].Estado, 
               }),
             }
           }else{
             return{
               Cliente: data.Cliente,
               PrecioTotalTotal: data.PrecioTotalTotal,
               PendienteAPagarTotal: data.PendienteAPagarTotal,
               Facturas: data.Facturas,
             }
           }
         })
       }
       let Facturas = data.map((data) => {
         return{
           Cliente :data.Cliente,
           Vendedor :data.Vendedor,
           PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
           PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
           ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
           Facturas : data.Facturas.map((data2) => {
             return{
               Fecha: data2.Fecha,
               Estado: data2.Estado,
               Numero: data2.Numero,
               Cliente: data2.Cliente,
               Vendedor: data2.Vendedor,
               ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
               CantidadTotal: data2.CantidadTotal,
               PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
               PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
             }
           }) 
         }
       })
       PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
       PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)

      const ws = wb.addWorksheet("Compras");

      const style = wb.createStyle({
        font: {
          color: "#000000",
          size: 11,
        },
        fill: {
          type: "pattern",
          patternType: "solid",
          bgColor: "#FFFF00",
          fgColor: "#FFFF00",
        },
      });

      
      ws.cell(2, 2,2,10, true).string("REPORTE TODOS LOS CLIENTES").style(style);
      
      const styleTotal = wb.createStyle({
        font: {
          color: "#000000",
          size: 11,
        },
        fill: {
          type: "pattern",
          patternType: "solid",
          bgColor: "#EE0A1F",
          fgColor: "#EE0A1F",
        },
      });

        let fila = 3
        
      for(i=0; i< Facturas.length; i++){
        let columna = 2
        fila++ 
   
        fila++  
        ws.cell(fila, columna, fila, 10, true).string(Facturas[i].Cliente).style(style);
        fila++ 
        ws.cell(fila, columna++).string("Fecha de compra").style(style);
        ws.cell(fila, columna++).string("Estado").style(style);
        ws.cell(fila, columna++).string("Factura").style(style);
        ws.cell(fila, columna++).string("Cliente").style(style);
        ws.cell(fila, columna++).string("Vendedor").style(style);
        ws.cell(fila, columna++).string("Comision").style(style);
        ws.cell(fila, columna++).string("Cantidad total").style(style);
        ws.cell(fila, columna++).string("Pendiente a pagar").style(style);
        ws.cell(fila, columna++).string("Precio total").style(style);
        for(r=0; r< Facturas[i].Facturas.length; r++){
          fila++
          columna = 2
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Fecha)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Estado)
          ws.cell(fila, columna++).number(Facturas[i].Facturas[r].Numero)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Cliente)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Vendedor)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].ComisionVendedor)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].CantidadTotal)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PendienteAPagar)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PrecioTotal)
        }
      }
        //descarga excel
        wb.write(`Reportes_clientes.xlsx`, res);
      } else {

        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        let notas = await facturaDB.find({Cliente: Empresa})
        notas = notas.filter((data) => data.Timestamp >= fechaDesde && data.Timestamp <= fechaHasta)
        facturas = notas.map((data) => {
         return{
           Fecha: data.date,
           Numero: data.Factura,
           Cliente: data.Cliente,
           Estado: data.Estado,
           ComisionVendedor: data.GananciasVendedor,
           Vendedor: data.Vendedor,
           CantidadTotal: data.CantidadTotal,
           PendienteAPagar: data.PendienteAPagar,
           PrecioTotal: data.PrecioTotal,
         }
       }) 
       let data = []
       let PrecioTotalTotal = 0
       let PendienteAPagarTotal = 0
       let ComisionTotal = 0
       for(i=0; i< facturas.length; i++){
         let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
         if(!validacion){
           let Vendedor = facturas[i].Vendedor
           let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
           for(z=0; z< facturasVendedor.length ;z++ ){
             PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
             PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
             ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
           }
           let factura = {
             Vendedor: facturas[i].Vendedor,
             Cliente: facturas[i].Cliente,
             ComisionTotal: ComisionTotal,
             PrecioTotalTotal :  PrecioTotalTotal,
             PendienteAPagarTotal: PendienteAPagarTotal,
             Facturas : []
           }
           PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
           PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
           PrecioTotalTotal = 0
           PendienteAPagarTotal = 0
           ComisionTotal = 0
           data.push(factura)
         }
       }
       for(x=0; x< facturas.length; x++){
         data.map((data) => {
           if(data.Vendedor == facturas[x].Vendedor){
             return{
               Cliente: data.Cliente,
               Vendedor: data.Vendedor,
               PrecioTotalTotal:  data.PrecioTotalTotal,
               PendienteAPagarTotal:  data.PendienteAPagarTotal,
               ComisionTotal:  data.ComisionTotal,
               Facturas: data.Facturas.push({
                 Fecha: facturas[x].Fecha,
                 Numero: facturas[x].Numero, 
                 Cliente: facturas[x].Cliente, 
                 Vendedor: facturas[x].Vendedor, 
                 ComisionVendedor: facturas[x].ComisionVendedor, 
                 CantidadTotal: facturas[x].CantidadTotal, 
                 PendienteAPagar: facturas[x].PendienteAPagar,
                 PrecioTotal: facturas[x].PrecioTotal, 
                 Estado: facturas[x].Estado, 
               }),
             }
           }else{
             return{
               Cliente: data.Cliente,
               PrecioTotalTotal: data.PrecioTotalTotal,
               PendienteAPagarTotal: data.PendienteAPagarTotal,
               Facturas: data.Facturas,
             }
           }
         })
       }
       let Facturas = data.map((data) => {
         return{
           Cliente :data.Cliente,
           Vendedor :data.Vendedor,
           PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
           PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
           ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
           Facturas : data.Facturas.map((data2) => {
             return{
               Fecha: data2.Fecha,
               Estado: data2.Estado,
               Numero: data2.Numero,
               Cliente: data2.Cliente,
               Vendedor: data2.Vendedor,
               ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
               CantidadTotal: data2.CantidadTotal,
               PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
               PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
             }
           }) 
         }
       })
       PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
       PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)

      const ws = wb.addWorksheet("Compras");

      const style = wb.createStyle({
        font: {
          color: "#000000",
          size: 11,
        },
        fill: {
          type: "pattern",
          patternType: "solid",
          bgColor: "#FFFF00",
          fgColor: "#FFFF00",
        },
      });

      
      ws.cell(2, 2,2,10, true).string("REPORTE TODOS LOS CLIENTES").style(style);
      
      const styleTotal = wb.createStyle({
        font: {
          color: "#000000",
          size: 11,
        },
        fill: {
          type: "pattern",
          patternType: "solid",
          bgColor: "#EE0A1F",
          fgColor: "#EE0A1F",
        },
      });

        let fila = 3
        
      for(i=0; i< Facturas.length; i++){
        let columna = 2
        fila++ 
   
        fila++  
        ws.cell(fila, columna, fila, 10, true).string(Facturas[i].Cliente).style(style);
        fila++ 
        ws.cell(fila, columna++).string("Fecha de compra").style(style);
        ws.cell(fila, columna++).string("Estado").style(style);
        ws.cell(fila, columna++).string("Factura").style(style);
        ws.cell(fila, columna++).string("Cliente").style(style);
        ws.cell(fila, columna++).string("Vendedor").style(style);
        ws.cell(fila, columna++).string("Comision").style(style);
        ws.cell(fila, columna++).string("Cantidad total").style(style);
        ws.cell(fila, columna++).string("Pendiente a pagar").style(style);
        ws.cell(fila, columna++).string("Precio total").style(style);
        for(r=0; r< Facturas[i].Facturas.length; r++){
          fila++
          columna = 2
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Fecha)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Estado)
          ws.cell(fila, columna++).number(Facturas[i].Facturas[r].Numero)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Cliente)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Vendedor)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].ComisionVendedor)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].CantidadTotal)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PendienteAPagar)
          ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PrecioTotal)
        }
      }












        wb.write(`Reporte_cliente${Empresa}.xlsx`, res);
      }
    }

    if (!Desde && !Hasta) {
     //sin fecha apertura
     if (Empresa == 0) {
      //todos
      let PendienteAPagarGeneral = 0
      let PrecioTotalGeneral = 0
      let notas = await facturaDB.find()
      facturas = notas.map((data) => {
       return{
         Fecha: data.date,
         Numero: data.Factura,
         Cliente: data.Cliente,
         Estado: data.Estado,
         ComisionVendedor: data.GananciasVendedor,
         Vendedor: data.Vendedor,
         CantidadTotal: data.CantidadTotal,
         PendienteAPagar: data.PendienteAPagar,
         PrecioTotal: data.PrecioTotal,
       }
     }) 
     let data = []
     let PrecioTotalTotal = 0
     let PendienteAPagarTotal = 0
     let ComisionTotal = 0
     for(i=0; i< facturas.length; i++){
       let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
       if(!validacion){
         let Vendedor = facturas[i].Vendedor
         let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
         for(z=0; z< facturasVendedor.length ;z++ ){
           PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
           PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
           ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
         }
         let factura = {
           Vendedor: facturas[i].Vendedor,
           Cliente: facturas[i].Cliente,
           ComisionTotal: ComisionTotal,
           PrecioTotalTotal :  PrecioTotalTotal,
           PendienteAPagarTotal: PendienteAPagarTotal,
           Facturas : []
         }
         PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
         PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
         PrecioTotalTotal = 0
         PendienteAPagarTotal = 0
         ComisionTotal = 0
         data.push(factura)
       }
     }
     for(x=0; x< facturas.length; x++){
       data.map((data) => {
         if(data.Vendedor == facturas[x].Vendedor){
           return{
             Cliente: data.Cliente,
             Vendedor: data.Vendedor,
             PrecioTotalTotal:  data.PrecioTotalTotal,
             PendienteAPagarTotal:  data.PendienteAPagarTotal,
             ComisionTotal:  data.ComisionTotal,
             Facturas: data.Facturas.push({
               Fecha: facturas[x].Fecha,
               Numero: facturas[x].Numero, 
               Cliente: facturas[x].Cliente, 
               Vendedor: facturas[x].Vendedor, 
               ComisionVendedor: facturas[x].ComisionVendedor, 
               CantidadTotal: facturas[x].CantidadTotal, 
               PendienteAPagar: facturas[x].PendienteAPagar,
               PrecioTotal: facturas[x].PrecioTotal, 
               Estado: facturas[x].Estado, 
             }),
           }
         }else{
           return{
             Cliente: data.Cliente,
             PrecioTotalTotal: data.PrecioTotalTotal,
             PendienteAPagarTotal: data.PendienteAPagarTotal,
             Facturas: data.Facturas,
           }
         }
       })
     }
     let Facturas = data.map((data) => {
       return{
         Cliente :data.Cliente,
         Vendedor :data.Vendedor,
         PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
         PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
         ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
         Facturas : data.Facturas.map((data2) => {
           return{
             Fecha: data2.Fecha,
             Estado: data2.Estado,
             Numero: data2.Numero,
             Cliente: data2.Cliente,
             Vendedor: data2.Vendedor,
             ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
             CantidadTotal: data2.CantidadTotal,
             PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
             PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
           }
         }) 
       }
     })
     PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
     PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)

    const ws = wb.addWorksheet("Compras");

    const style = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#FFFF00",
        fgColor: "#FFFF00",
      },
    });

    
    ws.cell(2, 2,2,10, true).string("REPORTE TODOS LOS CLIENTES").style(style);
    
    const styleTotal = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#EE0A1F",
        fgColor: "#EE0A1F",
      },
    });

      let fila = 3
      
    for(i=0; i< Facturas.length; i++){
      let columna = 2
      fila++ 
 
      fila++  
      ws.cell(fila, columna, fila, 10, true).string(Facturas[i].Cliente).style(style);
      fila++ 
      ws.cell(fila, columna++).string("Fecha de compra").style(style);
      ws.cell(fila, columna++).string("Estado").style(style);
      ws.cell(fila, columna++).string("Factura").style(style);
      ws.cell(fila, columna++).string("Cliente").style(style);
      ws.cell(fila, columna++).string("Vendedor").style(style);
      ws.cell(fila, columna++).string("Comision").style(style);
      ws.cell(fila, columna++).string("Cantidad total").style(style);
      ws.cell(fila, columna++).string("Pendiente a pagar").style(style);
      ws.cell(fila, columna++).string("Precio total").style(style);
      for(r=0; r< Facturas[i].Facturas.length; r++){
        fila++
        columna = 2
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Fecha)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Estado)
        ws.cell(fila, columna++).number(Facturas[i].Facturas[r].Numero)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Cliente)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Vendedor)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].ComisionVendedor)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].CantidadTotal)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PendienteAPagar)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PrecioTotal)
      }
    }
      //descarga excel
      wb.write(`Reportes_clientes.xlsx`, res);
    } else {

      let PendienteAPagarGeneral = 0
      let PrecioTotalGeneral = 0
      let notas = await facturaDB.find({Cliente: Empresa})
      facturas = notas.map((data) => {
       return{
         Fecha: data.date,
         Numero: data.Factura,
         Cliente: data.Cliente,
         Estado: data.Estado,
         ComisionVendedor: data.GananciasVendedor,
         Vendedor: data.Vendedor,
         CantidadTotal: data.CantidadTotal,
         PendienteAPagar: data.PendienteAPagar,
         PrecioTotal: data.PrecioTotal,
       }
     }) 
     let data = []
     let PrecioTotalTotal = 0
     let PendienteAPagarTotal = 0
     let ComisionTotal = 0
     for(i=0; i< facturas.length; i++){
       let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
       if(!validacion){
         let Vendedor = facturas[i].Vendedor
         let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
         for(z=0; z< facturasVendedor.length ;z++ ){
           PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
           PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
           ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
         }
         let factura = {
           Vendedor: facturas[i].Vendedor,
           Cliente: facturas[i].Cliente,
           ComisionTotal: ComisionTotal,
           PrecioTotalTotal :  PrecioTotalTotal,
           PendienteAPagarTotal: PendienteAPagarTotal,
           Facturas : []
         }
         PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
         PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
         PrecioTotalTotal = 0
         PendienteAPagarTotal = 0
         ComisionTotal = 0
         data.push(factura)
       }
     }
     for(x=0; x< facturas.length; x++){
       data.map((data) => {
         if(data.Vendedor == facturas[x].Vendedor){
           return{
             Cliente: data.Cliente,
             Vendedor: data.Vendedor,
             PrecioTotalTotal:  data.PrecioTotalTotal,
             PendienteAPagarTotal:  data.PendienteAPagarTotal,
             ComisionTotal:  data.ComisionTotal,
             Facturas: data.Facturas.push({
               Fecha: facturas[x].Fecha,
               Numero: facturas[x].Numero, 
               Cliente: facturas[x].Cliente, 
               Vendedor: facturas[x].Vendedor, 
               ComisionVendedor: facturas[x].ComisionVendedor, 
               CantidadTotal: facturas[x].CantidadTotal, 
               PendienteAPagar: facturas[x].PendienteAPagar,
               PrecioTotal: facturas[x].PrecioTotal, 
               Estado: facturas[x].Estado, 
             }),
           }
         }else{
           return{
             Cliente: data.Cliente,
             PrecioTotalTotal: data.PrecioTotalTotal,
             PendienteAPagarTotal: data.PendienteAPagarTotal,
             Facturas: data.Facturas,
           }
         }
       })
     }
     let Facturas = data.map((data) => {
       return{
         Cliente :data.Cliente,
         Vendedor :data.Vendedor,
         PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
         PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
         ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
         Facturas : data.Facturas.map((data2) => {
           return{
             Fecha: data2.Fecha,
             Estado: data2.Estado,
             Numero: data2.Numero,
             Cliente: data2.Cliente,
             Vendedor: data2.Vendedor,
             ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
             CantidadTotal: data2.CantidadTotal,
             PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
             PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
           }
         }) 
       }
     })
     PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
     PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)

    const ws = wb.addWorksheet("Compras");

    const style = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#FFFF00",
        fgColor: "#FFFF00",
      },
    });

    
    ws.cell(2, 2,2,10, true).string("REPORTE TODOS LOS CLIENTES").style(style);
    
    const styleTotal = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#EE0A1F",
        fgColor: "#EE0A1F",
      },
    });

      let fila = 3
      
    for(i=0; i< Facturas.length; i++){
      let columna = 2
      fila++ 
 
      fila++  
      ws.cell(fila, columna, fila, 10, true).string(Facturas[i].Cliente).style(style);
      fila++ 
      ws.cell(fila, columna++).string("Fecha de compra").style(style);
      ws.cell(fila, columna++).string("Estado").style(style);
      ws.cell(fila, columna++).string("Factura").style(style);
      ws.cell(fila, columna++).string("Cliente").style(style);
      ws.cell(fila, columna++).string("Vendedor").style(style);
      ws.cell(fila, columna++).string("Comision").style(style);
      ws.cell(fila, columna++).string("Cantidad total").style(style);
      ws.cell(fila, columna++).string("Pendiente a pagar").style(style);
      ws.cell(fila, columna++).string("Precio total").style(style);
      for(r=0; r< Facturas[i].Facturas.length; r++){
        fila++
        columna = 2
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Fecha)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Estado)
        ws.cell(fila, columna++).number(Facturas[i].Facturas[r].Numero)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Cliente)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].Vendedor)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].ComisionVendedor)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].CantidadTotal)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PendienteAPagar)
        ws.cell(fila, columna++).string(Facturas[i].Facturas[r].PrecioTotal)
      }
    }

      wb.write(`Reporte_cliente${Empresa}.xlsx`, res);
    }
     //sin fecha cierre
    }

    if ((!Desde && Hasta) || (Desde && !Hasta)) {
      let errors = [{text:"Una de las fechas se encuentra vacía. Por favor, introduzca ambas fechas o en su defecto ninguna para generar los reportes."}]
      let cliente = await clienteDB.find().sort({"Empresa": 1})
      cliente = cliente.map((data) => {
        return{
          Empresa: data.Empresa,
        }
      })
      res.render('facturacion/cliente/reportes',{
        cliente,
        errors
      })
    }
  }

  if (Formato == "PDF") {
    if (Desde && Hasta) {
      if (Empresa == 0) {
       //abre anie
       let PendienteAPagarGeneral = 0
       let PrecioTotalGeneral = 0
       let notas = await facturaDB.find()
       notas = notas.filter((data) => data.Timestamp >= fechaDesde && data.Timestamp <= fechaHasta)
       facturas = notas.map((data) => {
        return{
          Fecha: data.date,
          Numero: data.Factura,
          Cliente: data.Cliente,
          Estado: data.Estado,
          ComisionVendedor: data.GananciasVendedor,
          Vendedor: data.Vendedor,
          CantidadTotal: data.CantidadTotal,
          PendienteAPagar: data.PendienteAPagar,
          PrecioTotal: data.PrecioTotal,
        }
      }) 
      let data = []
      let PrecioTotalTotal = 0
      let PendienteAPagarTotal = 0
      let ComisionTotal = 0
      for(i=0; i< facturas.length; i++){
        let validacion = data.find((data) => data.Cliente == facturas[i].Cliente)
        if(!validacion){
          let Cliente = facturas[i].Cliente
          let facturasVendedor = facturas.filter((data) => data.Cliente == Cliente)
          for(z=0; z< facturasVendedor.length ;z++ ){
            PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
            PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
            ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
          }
          let factura = {
            Vendedor: facturas[i].Vendedor,
            Cliente: facturas[i].Cliente,
            ComisionTotal: ComisionTotal,
            PrecioTotalTotal :  PrecioTotalTotal,
            PendienteAPagarTotal: PendienteAPagarTotal,
            Facturas : []
          }
          PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
          PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
          PrecioTotalTotal = 0
          PendienteAPagarTotal = 0
          ComisionTotal = 0
          data.push(factura)
        }
      }
      for(x=0; x< facturas.length; x++){
        data.map((data) => {
          if(data.Cliente == facturas[x].Cliente){
            return{
              Cliente: data.Cliente,
              Vendedor: data.Vendedor,
              PrecioTotalTotal:  data.PrecioTotalTotal,
              PendienteAPagarTotal:  data.PendienteAPagarTotal,
              ComisionTotal:  data.ComisionTotal,
              Facturas: data.Facturas.push({
                Fecha: facturas[x].Fecha,
                Numero: facturas[x].Numero, 
                Cliente: facturas[x].Cliente, 
                Vendedor: facturas[x].Vendedor, 
                ComisionVendedor: facturas[x].ComisionVendedor, 
                CantidadTotal: facturas[x].CantidadTotal, 
                PendienteAPagar: facturas[x].PendienteAPagar,
                PrecioTotal: facturas[x].PrecioTotal, 
                Estado: facturas[x].Estado, 
              }),
            }
          }else{
            return{
              Cliente: data.Cliente,
              PrecioTotalTotal: data.PrecioTotalTotal,
              PendienteAPagarTotal: data.PendienteAPagarTotal,
              Facturas: data.Facturas,
            }
          }
        })
      }
      let Facturas = data.map((data) => {
        return{
          Cliente :data.Cliente,
          Vendedor :data.Vendedor,
          PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
          PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
          ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
          Facturas : data.Facturas.map((data2) => {
            return{
              Fecha: data2.Fecha,
              Numero: data2.Numero,
              Cliente: data2.Cliente,
              Estado: data2.Estado,
              Vendedor: data2.Vendedor,
              ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
              CantidadTotal: data2.CantidadTotal,
              PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
              PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
            }
          }) 
        }
      })
      PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
      PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
      let Titulo = "REPORTE TODOS LOS CLIENTES"
        res.render('facturacion/reporte_pdf/reporte_clientes',{
            Facturas,
            PendienteAPagarGeneral,
            PrecioTotalGeneral,
            Titulo
        })

        //cierre
      } else {
        //abre anie
       let PendienteAPagarGeneral = 0
       let PrecioTotalGeneral = 0
       let notas = await facturaDB.find({Cliente: Empresa})
       notas = notas.filter((data) => data.Timestamp >= fechaDesde && data.Timestamp <= fechaHasta)
       facturas = notas.map((data) => {
        return{
          Fecha: data.date,
          Numero: data.Factura,
          Cliente: data.Cliente,
          Estado: data.Estado,
          ComisionVendedor: data.GananciasVendedor,
          Vendedor: data.Vendedor,
          CantidadTotal: data.CantidadTotal,
          PendienteAPagar: data.PendienteAPagar,
          PrecioTotal: data.PrecioTotal,
        }
      }) 
      let data = []
      let PrecioTotalTotal = 0
      let PendienteAPagarTotal = 0
      let ComisionTotal = 0
      for(i=0; i< facturas.length; i++){
        let validacion = data.find((data) => data.Cliente == facturas[i].Cliente)
        if(!validacion){
          let Cliente = facturas[i].Cliente
          let facturasVendedor = facturas.filter((data) => data.Cliente == Cliente)
          for(z=0; z< facturasVendedor.length ;z++ ){
            PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
            PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
            ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
          }
          let factura = {
            Vendedor: facturas[i].Vendedor,
            Cliente: facturas[i].Cliente,
            ComisionTotal: ComisionTotal,
            PrecioTotalTotal :  PrecioTotalTotal,
            PendienteAPagarTotal: PendienteAPagarTotal,
            Facturas : []
          }
          PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
          PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
          PrecioTotalTotal = 0
          PendienteAPagarTotal = 0
          ComisionTotal = 0
          data.push(factura)
        }
      }
      for(x=0; x< facturas.length; x++){
        data.map((data) => {
          if(data.Cliente == facturas[x].Cliente){
            return{
              Cliente: data.Cliente,
              Vendedor: data.Vendedor,
              PrecioTotalTotal:  data.PrecioTotalTotal,
              PendienteAPagarTotal:  data.PendienteAPagarTotal,
              ComisionTotal:  data.ComisionTotal,
              Facturas: data.Facturas.push({
                Fecha: facturas[x].Fecha,
                Numero: facturas[x].Numero, 
                Cliente: facturas[x].Cliente, 
                Vendedor: facturas[x].Vendedor, 
                ComisionVendedor: facturas[x].ComisionVendedor, 
                CantidadTotal: facturas[x].CantidadTotal, 
                PendienteAPagar: facturas[x].PendienteAPagar,
                PrecioTotal: facturas[x].PrecioTotal, 
                Estado: facturas[x].Estado, 
              }),
            }
          }else{
            return{
              Cliente: data.Cliente,
              PrecioTotalTotal: data.PrecioTotalTotal,
              PendienteAPagarTotal: data.PendienteAPagarTotal,
              Facturas: data.Facturas,
            }
          }
        })
      }
      let Facturas = data.map((data) => {
        return{
          Cliente :data.Cliente,
          Vendedor :data.Vendedor,
          PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
          PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
          ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
          Facturas : data.Facturas.map((data2) => {
            return{
              Fecha: data2.Fecha,
              Numero: data2.Numero,
              Cliente: data2.Cliente,
              Estado: data2.Estado,
              Vendedor: data2.Vendedor,
              ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
              CantidadTotal: data2.CantidadTotal,
              PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
              PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
            }
          }) 
        }
      })
      PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
      PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
      let Titulo = `REPORTE CLIENTE ${Empresa}`
      let mensaje = ""
      if(Facturas.length == 0){
        mensaje= "SIN FACTURAS ENCONTRADAS"
      }

        res.render('facturacion/reporte_pdf/reporte_clientes',{
            Facturas,
            PendienteAPagarGeneral,
            PrecioTotalGeneral,
            mensaje,
            Titulo
        })

        //cierre
       
      }
    }
    if (!Desde && !Hasta) {
      if (Empresa == 0) {
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        let notas = await facturaDB.find()
        facturas = notas.map((data) => {
         return{
           Fecha: data.date,
           Numero: data.Factura,
           Cliente: data.Cliente,
           Estado: data.Estado,
           ComisionVendedor: data.GananciasVendedor,
           Vendedor: data.Vendedor,
           CantidadTotal: data.CantidadTotal,
           PendienteAPagar: data.PendienteAPagar,
           PrecioTotal: data.PrecioTotal,
         }
       }) 
       let data = []
       let PrecioTotalTotal = 0
       let PendienteAPagarTotal = 0
       let ComisionTotal = 0
       for(i=0; i< facturas.length; i++){
         let validacion = data.find((data) => data.Cliente == facturas[i].Cliente)
         if(!validacion){
           let Cliente = facturas[i].Cliente
           let facturasVendedor = facturas.filter((data) => data.Cliente == Cliente)
           for(z=0; z< facturasVendedor.length ;z++ ){
             PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
             PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
             ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
           }
           let factura = {
             Vendedor: facturas[i].Vendedor,
             Cliente: facturas[i].Cliente,
             ComisionTotal: ComisionTotal,
             PrecioTotalTotal :  PrecioTotalTotal,
             PendienteAPagarTotal: PendienteAPagarTotal,
             Facturas : []
           }
           PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
           PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
           PrecioTotalTotal = 0
           PendienteAPagarTotal = 0
           ComisionTotal = 0
           data.push(factura)
         }
       }
       for(x=0; x< facturas.length; x++){
         data.map((data) => {
           if(data.Cliente == facturas[x].Cliente){
             return{
               Cliente: data.Cliente,
               Vendedor: data.Vendedor,
               PrecioTotalTotal:  data.PrecioTotalTotal,
               PendienteAPagarTotal:  data.PendienteAPagarTotal,
               ComisionTotal:  data.ComisionTotal,
               Facturas: data.Facturas.push({
                 Fecha: facturas[x].Fecha,
                 Numero: facturas[x].Numero, 
                 Cliente: facturas[x].Cliente, 
                 Vendedor: facturas[x].Vendedor, 
                 ComisionVendedor: facturas[x].ComisionVendedor, 
                 CantidadTotal: facturas[x].CantidadTotal, 
                 PendienteAPagar: facturas[x].PendienteAPagar,
                 PrecioTotal: facturas[x].PrecioTotal, 
                 Estado: facturas[x].Estado, 
               }),
             }
           }else{
             return{
               Cliente: data.Cliente,
               PrecioTotalTotal: data.PrecioTotalTotal,
               PendienteAPagarTotal: data.PendienteAPagarTotal,
               Facturas: data.Facturas,
             }
           }
         })
       }
       let Facturas = data.map((data) => {
         return{
           Cliente :data.Cliente,
           Vendedor :data.Vendedor,
           PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
           PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
           ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
           Facturas : data.Facturas.map((data2) => {
             return{
               Fecha: data2.Fecha,
               Numero: data2.Numero,
               Cliente: data2.Cliente,
               Estado: data2.Estado,
               Vendedor: data2.Vendedor,
               ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
               CantidadTotal: data2.CantidadTotal,
               PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
               PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
             }
           }) 
         }
       })
       PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
       PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
      let Titulo = `REPORTE TODOS LOS CIENTES`
       
         res.render('facturacion/reporte_pdf/reporte_clientes',{
             Facturas,
             PendienteAPagarGeneral,
             PrecioTotalGeneral,
             Titulo
         })
      } else {
           //abre anie
           let PendienteAPagarGeneral = 0
           let PrecioTotalGeneral = 0
           let notas = await facturaDB.find({Cliente: Empresa})
           facturas = notas.map((data) => {
            return{
              Fecha: data.date,
              Numero: data.Factura,
              Cliente: data.Cliente,
              Estado: data.Estado,
              ComisionVendedor: data.GananciasVendedor,
              Vendedor: data.Vendedor,
              CantidadTotal: data.CantidadTotal,
              PendienteAPagar: data.PendienteAPagar,
              PrecioTotal: data.PrecioTotal,
            }
          }) 
          let data = []
          let PrecioTotalTotal = 0
          let PendienteAPagarTotal = 0
          let ComisionTotal = 0
          for(i=0; i< facturas.length; i++){
            let validacion = data.find((data) => data.Cliente == facturas[i].Cliente)
            if(!validacion){
              let Cliente = facturas[i].Cliente
              let facturasVendedor = facturas.filter((data) => data.Cliente == Cliente)
              for(z=0; z< facturasVendedor.length ;z++ ){
                PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
                PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
                ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
              }
              let factura = {
                Vendedor: facturas[i].Vendedor,
                Cliente: facturas[i].Cliente,
                ComisionTotal: ComisionTotal,
                PrecioTotalTotal :  PrecioTotalTotal,
                PendienteAPagarTotal: PendienteAPagarTotal,
                Facturas : []
              }
              PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
              PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
              PrecioTotalTotal = 0
              PendienteAPagarTotal = 0
              ComisionTotal = 0
              data.push(factura)
            }
          }
          for(x=0; x< facturas.length; x++){
            data.map((data) => {
              if(data.Cliente == facturas[x].Cliente){
                return{
                  Cliente: data.Cliente,
                  Vendedor: data.Vendedor,
                  PrecioTotalTotal:  data.PrecioTotalTotal,
                  PendienteAPagarTotal:  data.PendienteAPagarTotal,
                  ComisionTotal:  data.ComisionTotal,
                  Facturas: data.Facturas.push({
                    Fecha: facturas[x].Fecha,
                    Numero: facturas[x].Numero, 
                    Cliente: facturas[x].Cliente, 
                    Vendedor: facturas[x].Vendedor, 
                    ComisionVendedor: facturas[x].ComisionVendedor, 
                    CantidadTotal: facturas[x].CantidadTotal, 
                    PendienteAPagar: facturas[x].PendienteAPagar,
                    PrecioTotal: facturas[x].PrecioTotal, 
                    Estado: facturas[x].Estado, 
                  }),
                }
              }else{
                return{
                  Cliente: data.Cliente,
                  PrecioTotalTotal: data.PrecioTotalTotal,
                  PendienteAPagarTotal: data.PendienteAPagarTotal,
                  Facturas: data.Facturas,
                }
              }
            })
          }
          let Facturas = data.map((data) => {
            return{
              Cliente :data.Cliente,
              Vendedor :data.Vendedor,
              PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
              PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
              ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
              Facturas : data.Facturas.map((data2) => {
                return{
                  Fecha: data2.Fecha,
                  Numero: data2.Numero,
                  Cliente: data2.Cliente,
                  Estado: data2.Estado,
                  Vendedor: data2.Vendedor,
                  ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                  CantidadTotal: data2.CantidadTotal,
                  PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                  PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
                }
              }) 
            }
          })
          PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
          PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
          let Titulo = `REPORTE CLIENTE ${Empresa}`
          let mensaje = ""
          if(Facturas.length == 0){
            mensaje= "SIN FACTURAS ENCONTRADAS"
          }
    
            res.render('facturacion/reporte_pdf/reporte_clientes',{
                Facturas,
                PendienteAPagarGeneral,
                PrecioTotalGeneral,
                Titulo,
                mensaje,
            })
    
            //cierre
      }
    }
    if ((!Desde && Hasta) || (Desde && !Hasta)) {
      let errors = [{text:"Una de las fechas se encuentra vacía. Por favor, introduzca ambas fechas o en su defecto ninguna para generar los reportes."}]
      let cliente = await clienteDB.find().sort({"Empresa": 1})
      cliente = cliente.map((data) => {
        return{
          Empresa: data.Empresa,
        }
      })
      res.render('facturacion/cliente/reportes',{
        cliente,
        errors
      })

    }
  }
});

//Reportes de proveedor

router.get( "/facturacion/reporte-excel-proveedores", isAuthenticatedProveedor,
  async (req, res) => {
    const xl = require("excel4node");

    const wb = new xl.Workbook();

    const ws = wb.addWorksheet("Proveedores Thomson");

    const style = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#FFFF00",
        fgColor: "#FFFF00",
      },
    });

    ws.cell(1, 1).string("Nombre").style(style);
    ws.cell(1, 2).string("País").style(style);
    ws.cell(1, 3).string("Estado").style(style);
    ws.cell(1, 4).string("Dirección").style(style);
    ws.cell(1, 5).string("Postal").style(style);
    ws.cell(1, 6).string("Codigo").style(style);
    ws.cell(1, 7).string("Gran Mayor (%)").style(style);
    ws.cell(1, 8).string("Mayor (%)").style(style);
    ws.cell(1, 9).string("Detal (%)").style(style);

    const proveedor = await proveedorDB.find();

    let fila = 2;

    for (i = 0; i < proveedor.length; i++) {
      columna = 1;
      let fechaRegistro = proveedor[i].date.toISOString();
      fechaRegistro = fechaRegistro.toString().substr(0, 10);
      let postal = proveedor[i].Postal;
      postal = postal.toString();
      ws.cell(fila, columna++).string(proveedor[i].Nombre);
      ws.cell(fila, columna++).string(proveedor[i].Pais);
      ws.cell(fila, columna++).string(proveedor[i].Estado);
      ws.cell(fila, columna++).string(proveedor[i].Direccion);
      ws.cell(fila, columna++).string(postal);
      ws.cell(fila, columna++).string(proveedor[i].Codigo);
      ws.cell(fila, columna++).number(proveedor[i].GranMayor);
      ws.cell(fila, columna++).number(proveedor[i].Mayor);
      ws.cell(fila, columna++).number(proveedor[i].Detal);

      fila++;
    }

    wb.write("Proveedores.xlsx", res);
    //res.send("ok")
  }
);

//reportes de cuentas por cobrar

router.post("/facturacion/reporte-cuentas-por-cobrar-vendedores", isAuthenticatedCobranza, async (req, res) => {
  const { Vendedor, Formato, TipoFecha, Desde, Hasta } = req.body;
  let fechaDesde = new Date(Desde).getTime();
  let fechaHasta = new Date(Hasta).getTime();
  const xl = require("excel4node");
  const wb = new xl.Workbook();

  const ws = wb.addWorksheet("Pendiente");

  const style = wb.createStyle({
    font: {
      color: "#000000",
      size: 11,
    },
    fill: {
      type: "pattern",
      patternType: "solid",
      bgColor: "#FFFF00",
      fgColor: "#FFFF00",
    },
  });

  ws.cell(1, 1).string("Cliente").style(style);
  ws.cell(1, 2).string("Fecha de compra").style(style);
  ws.cell(1, 3).string("Fecha de vencimiento").style(style);
  ws.cell(1, 4).string("Factura").style(style);
  ws.cell(1, 5).string("Neto").style(style);
  ws.cell(1, 6).string("Saldo").style(style);

  const styleTotal = wb.createStyle({
    font: {
      color: "#000000",
      size: 11,
    },
    fill: {
      type: "pattern",
      patternType: "solid",
      bgColor: "#EE0A1F",
      fgColor: "#EE0A1F",
    },
  });

  if (Formato == "Excel") {
    if (Vendedor == 0) {
      if(TipoFecha == 0){
        let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}]}).sort({ date: "desc" });
        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Cliente);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar.xlsx`, res);
        }
        if(TipoFecha == "Registro"){
          let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
          let precioTotal = 0;
          let pendienteAPagar = 0;
          let fila = 2;
          for (i = 0; i < factura.length; i++) {
            columna = 1;
            ws.cell(fila, columna++).string(factura[i].Cliente);
            ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
            ws.cell(fila, columna++).string(
              factura[i].Vencimiento.toString().substr(0, 10)
              );
              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
              
              precioTotal += factura[i].PrecioTotal;
              pendienteAPagar += factura[i].PendienteAPagar;
              fila++;
            }
            fila++;
            ws.cell(fila, 4).string("Totales").style(styleTotal);
            ws.cell(fila, 5).number(precioTotal);
            ws.cell(fila, 6).number(pendienteAPagar);
            wb.write(`Cuentas_por_cobrar.xlsx`, res);
        }
        if(TipoFecha == "Vencimiento"){
          let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Vencimiento :{$gte: Desde} }, { Vencimiento :{$lte: Hasta }}]}).sort({ date: "desc" });

          let precioTotal = 0;
          let pendienteAPagar = 0;
          
          let fila = 2;
          for (i = 0; i < factura.length; i++) {
            columna = 1;
            ws.cell(fila, columna++).string(factura[i].Cliente);
            ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
            ws.cell(fila, columna++).string(
              factura[i].Vencimiento.toString().substr(0, 10)
              );
              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
              
              precioTotal += factura[i].PrecioTotal;
              pendienteAPagar += factura[i].PendienteAPagar;
              fila++;
            }
            
            fila++;
            
            ws.cell(fila, 4).string("Totales").style(styleTotal);
            ws.cell(fila, 5).number(precioTotal);
            ws.cell(fila, 6).number(pendienteAPagar);
            
            wb.write(`Cuentas_por_cobrar.xlsx`, res);

        }
    } else {
      if(TipoFecha == 0){
        let factura = await facturaDB
        .find({ $and: [{ Vendedor: Vendedor }, { Estado: "Por cobrar" }] })
        .sort({ date: "desc" });
     

        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Vendedor);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar_${Vendedor}.xlsx`, res);
        }
      if(TipoFecha == "Vencimiento"){
        let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Vendedor: Vendedor },
        { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Vendedor);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar_${Vendedor}.xlsx`, res);
        }
      if(TipoFecha == "Registro"){
        let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Vendedor: Vendedor },
        { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Vendedor);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar_${Vendedor}.xlsx`, res);
        }
      }
  } else {
    if (Vendedor == 0) {
      if(TipoFecha == 0){
        let notas = await facturaDB.find({Estado: "Por cobrar"})
        facturas = notas.map((data) => {
          return{
            Fecha: data.date,
            Vencimiento: data.Vencimiento,
            Numero: data.Factura,
            Cliente: data.Cliente,
            Estado: data.Estado,
            ComisionVendedor: data.GananciasVendedor,
            Vendedor: data.Vendedor,
            CantidadTotal: data.CantidadTotal,
            PendienteAPagar: data.PendienteAPagar,
            PrecioTotal: data.PrecioTotal,
          }
        }) 
        let data = []
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        let ComisionTotal = 0
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        for(i=0; i< facturas.length; i++){
          let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
          if(!validacion){
            let Vendedor = facturas[i].Vendedor
            let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
            for(z=0; z< facturasVendedor.length ;z++ ){
              PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
              PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
              ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
            }
            let factura = {
              Vendedor: facturas[i].Vendedor,
              Vendedor: facturas[i].Vendedor,
              ComisionTotal: ComisionTotal,
              PrecioTotalTotal :  PrecioTotalTotal,
              PendienteAPagarTotal: PendienteAPagarTotal,
              Facturas : []
            }
            PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
            PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
            PrecioTotalTotal = 0
            PendienteAPagarTotal = 0
            ComisionTotal = 0
            data.push(factura)
          }
        }
        for(x=0; x< facturas.length; x++){
          data.map((data) => {
            if(data.Vendedor == facturas[x].Vendedor){
              return{
                Cliente: data.Cliente,
                Vendedor: data.Vendedor,
                PrecioTotalTotal:  data.PrecioTotalTotal,
                PendienteAPagarTotal:  data.PendienteAPagarTotal,
                ComisionTotal:  data.ComisionTotal,
                Facturas: data.Facturas.push({
                  Fecha: facturas[x].Fecha,
                  Vencimiento: facturas[x].Vencimiento,
                  Numero: facturas[x].Numero, 
                  Cliente: facturas[x].Cliente, 
                  Vendedor: facturas[x].Vendedor, 
                  ComisionVendedor: facturas[x].ComisionVendedor, 
                  CantidadTotal: facturas[x].CantidadTotal, 
                  PendienteAPagar: facturas[x].PendienteAPagar,
                  PrecioTotal: facturas[x].PrecioTotal, 
                  Estado: facturas[x].Estado, 
                }),
              }
            }else{
              return{
                Vendedor: data.Vendedor,
                PrecioTotalTotal: data.PrecioTotalTotal,
                PendienteAPagarTotal: data.PendienteAPagarTotal,
                Facturas: data.Facturas,
              }
            }
          })
        }
        let Facturas = data.map((data) => {
          return{
            Cliente :data.Cliente,
            Vendedor :data.Vendedor,
            PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
            PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
            ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
            Facturas : data.Facturas.map((data2) => {
              return{
                Fecha: data2.Fecha,
                Vencimiento: data2.Vencimiento,
                Numero: data2.Numero,
                Cliente: data2.Cliente,
                Estado: data2.Estado,
                Vendedor: data2.Vendedor,
                ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                CantidadTotal: data2.CantidadTotal,
                PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
              }
            }) 
          }
        })

        PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
        PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
        res.render('facturacion/reporte_pdf/reporte_cuentas_por_cobrar_vendedor',{
          Facturas,
          PendienteAPagarGeneral,
          PrecioTotalGeneral,
        })

      }
      if(TipoFecha == "Vencimiento"){
        let notas = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Vencimiento :{$gte: Desde} }, { Vencimiento :{$lte: Hasta }}]}).sort({ date: "desc" });
        facturas = notas.map((data) => {
          return{
            Fecha: data.date,
            Vencimiento: data.Vencimiento,
            Numero: data.Factura,
            Cliente: data.Cliente,
            Estado: data.Estado,
            ComisionVendedor: data.GananciasVendedor,
            Vendedor: data.Vendedor,
            CantidadTotal: data.CantidadTotal,
            PendienteAPagar: data.PendienteAPagar,
            PrecioTotal: data.PrecioTotal,
          }
        }) 
        let data = []
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        let ComisionTotal = 0
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        for(i=0; i< facturas.length; i++){
          let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
          if(!validacion){
            let Vendedor = facturas[i].Vendedor
            let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
            for(z=0; z< facturasVendedor.length ;z++ ){
              PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
              PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
              ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
            }
            let factura = {
              Vendedor: facturas[i].Vendedor,
              Cliente: facturas[i].Cliente,
              ComisionTotal: ComisionTotal,
              PrecioTotalTotal :  PrecioTotalTotal,
              PendienteAPagarTotal: PendienteAPagarTotal,
              Facturas : []
            }
            PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
            PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
            PrecioTotalTotal = 0
            PendienteAPagarTotal = 0
            ComisionTotal = 0
            data.push(factura)
          }
        }
        for(x=0; x< facturas.length; x++){
          data.map((data) => {
            if(data.Vendedor == facturas[x].Vendedor){
              return{
                Cliente: data.Cliente,
                Vendedor: data.Vendedor,
                PrecioTotalTotal:  data.PrecioTotalTotal,
                PendienteAPagarTotal:  data.PendienteAPagarTotal,
                ComisionTotal:  data.ComisionTotal,
                Facturas: data.Facturas.push({
                  Fecha: facturas[x].Fecha,
                  Vencimiento: facturas[x].Vencimiento,
                  Numero: facturas[x].Numero, 
                  Cliente: facturas[x].Cliente, 
                  Vendedor: facturas[x].Vendedor, 
                  ComisionVendedor: facturas[x].ComisionVendedor, 
                  CantidadTotal: facturas[x].CantidadTotal, 
                  PendienteAPagar: facturas[x].PendienteAPagar,
                  PrecioTotal: facturas[x].PrecioTotal, 
                  Estado: facturas[x].Estado, 
                }),
              }
            }else{
              return{
                Vendedor: data.Vendedor,
                PrecioTotalTotal: data.PrecioTotalTotal,
                PendienteAPagarTotal: data.PendienteAPagarTotal,
                Facturas: data.Facturas,
              }
            }
          })
        }
        let Facturas = data.map((data) => {
          return{
            Cliente :data.Cliente,
            Vendedor :data.Vendedor,
            PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
            PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
            ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
            Facturas : data.Facturas.map((data2) => {
              return{
                Fecha: data2.Fecha,
                Vencimiento: data2.Vencimiento,
                Numero: data2.Numero,
                Cliente: data2.Cliente,
                Estado: data2.Estado,
                Vendedor: data2.Vendedor,
                ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                CantidadTotal: data2.CantidadTotal,
                PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
              }
            }) 
          }
        })
        PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
        PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
        res.render('facturacion/reporte_pdf/reporte_cuentas_por_cobrar_vendedor',{
          Facturas,
          PendienteAPagarGeneral,
          PrecioTotalGeneral,
        })
      }
      if(TipoFecha == "Registro"){
        let notas = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });

        facturas = notas.map((data) => {
          return{
            Fecha: data.date,
            Vencimiento: data.Vencimiento,
            Numero: data.Factura,
            Cliente: data.Cliente,
            Estado: data.Estado,
            ComisionVendedor: data.GananciasVendedor,
            Vendedor: data.Vendedor,
            CantidadTotal: data.CantidadTotal,
            PendienteAPagar: data.PendienteAPagar,
            PrecioTotal: data.PrecioTotal,
          }
        }) 
        let data = []
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        let ComisionTotal = 0
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        for(i=0; i< facturas.length; i++){
          let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
          if(!validacion){
            let Vendedor = facturas[i].Vendedor
            let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
            for(z=0; z< facturasVendedor.length ;z++ ){
              PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
              PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
              ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
            }
            let factura = {
              Vendedor: facturas[i].Vendedor,
              Cliente: facturas[i].Cliente,
              ComisionTotal: ComisionTotal,
              PrecioTotalTotal :  PrecioTotalTotal,
              PendienteAPagarTotal: PendienteAPagarTotal,
              Facturas : []
            }
            PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
            PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
            PrecioTotalTotal = 0
            PendienteAPagarTotal = 0
            ComisionTotal = 0
            data.push(factura)
          }
        }
        for(x=0; x< facturas.length; x++){
          data.map((data) => {
            if(data.Vendedor == facturas[x].Vendedor){
              return{
                Cliente: data.Cliente,
                Vendedor: data.Vendedor,
                PrecioTotalTotal:  data.PrecioTotalTotal,
                PendienteAPagarTotal:  data.PendienteAPagarTotal,
                ComisionTotal:  data.ComisionTotal,
                Facturas: data.Facturas.push({
                  Fecha: facturas[x].Fecha,
                  Vencimiento: facturas[x].Vencimiento,
                  Numero: facturas[x].Numero, 
                  Cliente: facturas[x].Cliente, 
                  Vendedor: facturas[x].Vendedor, 
                  ComisionVendedor: facturas[x].ComisionVendedor, 
                  CantidadTotal: facturas[x].CantidadTotal, 
                  PendienteAPagar: facturas[x].PendienteAPagar,
                  PrecioTotal: facturas[x].PrecioTotal, 
                  Estado: facturas[x].Estado, 
                }),
              }
            }else{
              return{
                Vendedor: data.Vendedor,
                PrecioTotalTotal: data.PrecioTotalTotal,
                PendienteAPagarTotal: data.PendienteAPagarTotal,
                Facturas: data.Facturas,
              }
            }
          })
        }
        let Facturas = data.map((data) => {
          return{
            Cliente :data.Cliente,
            Vendedor :data.Vendedor,
            PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
            PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
            ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
            Facturas : data.Facturas.map((data2) => {
              return{
                Fecha: data2.Fecha,
                Vencimiento: data2.Vencimiento,
                Numero: data2.Numero,
                Cliente: data2.Cliente,
                Estado: data2.Estado,
                Vendedor: data2.Vendedor,
                ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                CantidadTotal: data2.CantidadTotal,
                PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
              }
            }) 
          }
        })
        PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
        PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
        res.render('facturacion/reporte_pdf/reporte_cuentas_por_cobrar_vendedor',{
          Facturas,
          PendienteAPagarGeneral,
          PrecioTotalGeneral,
        })
      }


    } else {
      if(TipoFecha == 0){
      const clienteReporte = await facturaDB.find({ $and: [{ Vendedor: Vendedor }, { Estado: "Por cobrar" }] }).sort({ date: "desc" })
      const Facturas = [{
        Vendedor: Vendedor,
        PrecioTotalTotal: 0,
        PendienteAPagarTotal: 0,
        Facturas: [],
      }]
      let PrecioTotalTotal = 0
      let PendienteAPagarTotal = 0
      for(i=0; i< clienteReporte.length; i++){
        PendienteAPagarTotal = (+PendienteAPagarTotal + +clienteReporte[i].PendienteAPagar)
        PrecioTotalTotal = (+PrecioTotalTotal + +clienteReporte[i].PrecioTotal)
        let data = {
          Fecha: clienteReporte[i].date,
          Vencimiento: clienteReporte[i].Vencimiento,
          Numero: clienteReporte[i].Factura,
          Cliente: clienteReporte[i].Cliente,
          Estado: clienteReporte[i].Estado,
          Vendedor: clienteReporte[i].Vendedor,
          ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].ComisionVendedor),
          CantidadTotal: clienteReporte[i].CantidadTotal,
          PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PendienteAPagar),
          PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PrecioTotal),
        }
        Facturas[0].Facturas.push(data)
      }
      PendienteAPagarTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarTotal) 
      PrecioTotalTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalTotal)

      Facturas[0].PrecioTotalTotal = PrecioTotalTotal
      Facturas[0].PendienteAPagarTotal = PendienteAPagarTotal
      let PendienteAPagarGeneral = Facturas[0].PrecioTotalTotal
      let PrecioTotalGeneral = Facturas[0].PendienteAPagarTotal
        res.render("facturacion/reporte_pdf/reporte_cuentas_por_cobrar_vendedor", {
          Facturas,
          PendienteAPagarGeneral:PrecioTotalGeneral,
          PrecioTotalGeneral:PendienteAPagarGeneral,
        });
      }
      if(TipoFecha == "Vencimiento"){
        let clienteReporte = await facturaDB.find({ $and: [{ Vendedor: Vendedor },{Estado: "Por cobrar"}, { Vencimiento :{$gte: Desde} }, { Vencimiento :{$lte: Hasta }}]}).sort({ date: "desc" });
        const Facturas = [{
          Vendedor: Vendedor,
          PrecioTotalTotal: 0,
          PendienteAPagarTotal: 0,
          Facturas: [],
        }]
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        for(i=0; i< clienteReporte.length; i++){
          PendienteAPagarTotal = (+PendienteAPagarTotal + +clienteReporte[i].PendienteAPagar)
          PrecioTotalTotal = (+PrecioTotalTotal + +clienteReporte[i].PrecioTotal)
          let data = {
            Fecha: clienteReporte[i].date,
            Vencimiento: clienteReporte[i].Vencimiento,
            Numero: clienteReporte[i].Factura,
            Cliente: clienteReporte[i].Cliente,
            Estado: clienteReporte[i].Estado,
            Vendedor: clienteReporte[i].Vendedor,
            ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].ComisionVendedor),
            CantidadTotal: clienteReporte[i].CantidadTotal,
            PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PendienteAPagar),
            PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PrecioTotal),
          }
          Facturas[0].Facturas.push(data)
        }
        PendienteAPagarTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarTotal) 
        PrecioTotalTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalTotal)
  
        Facturas[0].PrecioTotalTotal = PrecioTotalTotal
        Facturas[0].PendienteAPagarTotal = PendienteAPagarTotal
        let PendienteAPagarGeneral = Facturas[0].PrecioTotalTotal
        let PrecioTotalGeneral = Facturas[0].PendienteAPagarTotal
          res.render("facturacion/reporte_pdf/reporte_cuentas_por_cobrar_vendedor", {
            Facturas,
            PendienteAPagarGeneral:PrecioTotalGeneral,
            PrecioTotalGeneral:PendienteAPagarGeneral,
          });
      }
      if(TipoFecha == "Registro"){
        let clienteReporte = await facturaDB.find({ $and: [{ Vendedor: Vendedor },{Estado: "Por cobrar"}, { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
        const Facturas = [{
          Vendedor: Vendedor,
          PrecioTotalTotal: 0,
          PendienteAPagarTotal: 0,
          Facturas: [],
        }]
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        for(i=0; i< clienteReporte.length; i++){
          PendienteAPagarTotal = (+PendienteAPagarTotal + +clienteReporte[i].PendienteAPagar)
          PrecioTotalTotal = (+PrecioTotalTotal + +clienteReporte[i].PrecioTotal)
          let data = {
            Fecha: clienteReporte[i].date,
            Vencimiento: clienteReporte[i].Vencimiento,
            Numero: clienteReporte[i].Factura,
            Cliente: clienteReporte[i].Cliente,
            Estado: clienteReporte[i].Estado,
            Vendedor: clienteReporte[i].Vendedor,
            ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].ComisionVendedor),
            CantidadTotal: clienteReporte[i].CantidadTotal,
            PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PendienteAPagar),
            PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PrecioTotal),
          }
          Facturas[0].Facturas.push(data)
        }
        PendienteAPagarTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarTotal) 
        PrecioTotalTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalTotal)
  
        Facturas[0].PrecioTotalTotal = PrecioTotalTotal
        Facturas[0].PendienteAPagarTotal = PendienteAPagarTotal
        let PendienteAPagarGeneral = Facturas[0].PrecioTotalTotal
        let PrecioTotalGeneral = Facturas[0].PendienteAPagarTotal
          res.render("facturacion/reporte_pdf/reporte_cuentas_por_cobrar_vendedor", {
            Facturas,
            PendienteAPagarGeneral:PrecioTotalGeneral,
            PrecioTotalGeneral:PendienteAPagarGeneral,
          });
      }
    }
  }
});

router.post("/facturacion/reporte-cuentas-por-cobrar", isAuthenticatedCobranza, async (req, res) => {
  const { Cliente, Formato, TipoFecha, Desde, Hasta } = req.body;
  let fechaDesde = new Date(Desde).getTime();
  let fechaHasta = new Date(Hasta).getTime();
  const xl = require("excel4node");
  const wb = new xl.Workbook();

  const ws = wb.addWorksheet("Pendiente");

  const style = wb.createStyle({
    font: {
      color: "#000000",
      size: 11,
    },
    fill: {
      type: "pattern",
      patternType: "solid",
      bgColor: "#FFFF00",
      fgColor: "#FFFF00",
    },
  });

  ws.cell(1, 1).string("Cliente").style(style);
  ws.cell(1, 2).string("Fecha de compra").style(style);
  ws.cell(1, 3).string("Fecha de vencimiento").style(style);
  ws.cell(1, 4).string("Factura").style(style);
  ws.cell(1, 5).string("Neto").style(style);
  ws.cell(1, 6).string("Saldo").style(style);

  const styleTotal = wb.createStyle({
    font: {
      color: "#000000",
      size: 11,
    },
    fill: {
      type: "pattern",
      patternType: "solid",
      bgColor: "#EE0A1F",
      fgColor: "#EE0A1F",
    },
  });

  if (Formato == "Excel") {
    if (Cliente == 0) {
      if(TipoFecha == 0){
        let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}]}).sort({ date: "desc" });
        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Cliente);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar.xlsx`, res);
        }
        if(TipoFecha == "Registro"){
          let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
          let precioTotal = 0;
          let pendienteAPagar = 0;
          let fila = 2;
          for (i = 0; i < factura.length; i++) {
            columna = 1;
            ws.cell(fila, columna++).string(factura[i].Cliente);
            ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
            ws.cell(fila, columna++).string(
              factura[i].Vencimiento.toString().substr(0, 10)
              );
              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
              
              precioTotal += factura[i].PrecioTotal;
              pendienteAPagar += factura[i].PendienteAPagar;
              fila++;
            }
            fila++;
            ws.cell(fila, 4).string("Totales").style(styleTotal);
            ws.cell(fila, 5).number(precioTotal);
            ws.cell(fila, 6).number(pendienteAPagar);
            wb.write(`Cuentas_por_cobrar.xlsx`, res);
        }
        if(TipoFecha == "Vencimiento"){
          let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Vencimiento :{$gte: Desde} }, { Vencimiento :{$lte: Hasta }}]}).sort({ date: "desc" });

          let precioTotal = 0;
          let pendienteAPagar = 0;
          
          let fila = 2;
          for (i = 0; i < factura.length; i++) {
            columna = 1;
            ws.cell(fila, columna++).string(factura[i].Cliente);
            ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
            ws.cell(fila, columna++).string(
              factura[i].Vencimiento.toString().substr(0, 10)
              );
              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
              
              precioTotal += factura[i].PrecioTotal;
              pendienteAPagar += factura[i].PendienteAPagar;
              fila++;
            }
            
            fila++;
            
            ws.cell(fila, 4).string("Totales").style(styleTotal);
            ws.cell(fila, 5).number(precioTotal);
            ws.cell(fila, 6).number(pendienteAPagar);
            
            wb.write(`Cuentas_por_cobrar.xlsx`, res);

        }
    } else {
      if(TipoFecha == 0){
        let factura = await facturaDB
        .find({ $and: [{ Cliente: Cliente }, { Estado: "Por cobrar" }] })
        .sort({ date: "desc" });
     

        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Cliente);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar_${Cliente}.xlsx`, res);
        }
      if(TipoFecha == "Vencimiento"){
        let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Cliente: Cliente },
        { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Cliente);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar_${Cliente}.xlsx`, res);
        }
      if(TipoFecha == "Registro"){
        let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Cliente: Cliente },
        { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Cliente);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar_${Cliente}.xlsx`, res);
        }
      }
  } else {
    if (Cliente == 0) {
      if(TipoFecha == 0){
        let notas = await facturaDB.find({Estado: "Por cobrar"})
        facturas = notas.map((data) => {
          return{
            Fecha: data.date,
            Vencimiento: data.Vencimiento,
            Numero: data.Factura,
            Cliente: data.Cliente,
            Estado: data.Estado,
            ComisionVendedor: data.GananciasVendedor,
            Vendedor: data.Vendedor,
            CantidadTotal: data.CantidadTotal,
            PendienteAPagar: data.PendienteAPagar,
            PrecioTotal: data.PrecioTotal,
          }
        }) 
        let data = []
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        let ComisionTotal = 0
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        for(i=0; i< facturas.length; i++){
          let validacion = data.find((data) => data.Cliente == facturas[i].Cliente)
          if(!validacion){
            let Cliente = facturas[i].Cliente
            let facturasVendedor = facturas.filter((data) => data.Cliente == Cliente)
            for(z=0; z< facturasVendedor.length ;z++ ){
              PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
              PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
              ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
            }
            let factura = {
              Vendedor: facturas[i].Vendedor,
              Cliente: facturas[i].Cliente,
              ComisionTotal: ComisionTotal,
              PrecioTotalTotal :  PrecioTotalTotal,
              PendienteAPagarTotal: PendienteAPagarTotal,
              Facturas : []
            }
            PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
            PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
            PrecioTotalTotal = 0
            PendienteAPagarTotal = 0
            ComisionTotal = 0
            data.push(factura)
          }
        }
        for(x=0; x< facturas.length; x++){
          data.map((data) => {
            if(data.Cliente == facturas[x].Cliente){
              return{
                Cliente: data.Cliente,
                Vendedor: data.Vendedor,
                PrecioTotalTotal:  data.PrecioTotalTotal,
                PendienteAPagarTotal:  data.PendienteAPagarTotal,
                ComisionTotal:  data.ComisionTotal,
                Facturas: data.Facturas.push({
                  Fecha: facturas[x].Fecha,
                  Vencimiento: facturas[x].Vencimiento,
                  Numero: facturas[x].Numero, 
                  Cliente: facturas[x].Cliente, 
                  Vendedor: facturas[x].Vendedor, 
                  ComisionVendedor: facturas[x].ComisionVendedor, 
                  CantidadTotal: facturas[x].CantidadTotal, 
                  PendienteAPagar: facturas[x].PendienteAPagar,
                  PrecioTotal: facturas[x].PrecioTotal, 
                  Estado: facturas[x].Estado, 
                }),
              }
            }else{
              return{
                Cliente: data.Cliente,
                PrecioTotalTotal: data.PrecioTotalTotal,
                PendienteAPagarTotal: data.PendienteAPagarTotal,
                Facturas: data.Facturas,
              }
            }
          })
        }
        let Facturas = data.map((data) => {
          return{
            Cliente :data.Cliente,
            Vendedor :data.Vendedor,
            PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
            PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
            ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
            Facturas : data.Facturas.map((data2) => {
              return{
                Fecha: data2.Fecha,
                Vencimiento: data2.Vencimiento,
                Numero: data2.Numero,
                Cliente: data2.Cliente,
                Estado: data2.Estado,
                Vendedor: data2.Vendedor,
                ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                CantidadTotal: data2.CantidadTotal,
                PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
              }
            }) 
          }
        })

        PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
        PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
        res.render('facturacion/reporte_pdf/reporte_cuentas_por_cobrar',{
          Facturas,
          PendienteAPagarGeneral,
          PrecioTotalGeneral,
        })

      }
      if(TipoFecha == "Vencimiento"){
        let notas = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Vencimiento :{$gte: Desde} }, { Vencimiento :{$lte: Hasta }}]}).sort({ date: "desc" });
        facturas = notas.map((data) => {
          return{
            Fecha: data.date,
            Vencimiento: data.Vencimiento,
            Numero: data.Factura,
            Cliente: data.Cliente,
            Estado: data.Estado,
            ComisionVendedor: data.GananciasVendedor,
            Vendedor: data.Vendedor,
            CantidadTotal: data.CantidadTotal,
            PendienteAPagar: data.PendienteAPagar,
            PrecioTotal: data.PrecioTotal,
          }
        }) 
        let data = []
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        let ComisionTotal = 0
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        for(i=0; i< facturas.length; i++){
          let validacion = data.find((data) => data.Cliente == facturas[i].Cliente)
          if(!validacion){
            let Cliente = facturas[i].Cliente
            let facturasVendedor = facturas.filter((data) => data.Cliente == Cliente)
            for(z=0; z< facturasVendedor.length ;z++ ){
              PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
              PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
              ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
            }
            let factura = {
              Vendedor: facturas[i].Vendedor,
              Cliente: facturas[i].Cliente,
              ComisionTotal: ComisionTotal,
              PrecioTotalTotal :  PrecioTotalTotal,
              PendienteAPagarTotal: PendienteAPagarTotal,
              Facturas : []
            }
            PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
            PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
            PrecioTotalTotal = 0
            PendienteAPagarTotal = 0
            ComisionTotal = 0
            data.push(factura)
          }
        }
        for(x=0; x< facturas.length; x++){
          data.map((data) => {
            if(data.Cliente == facturas[x].Cliente){
              return{
                Cliente: data.Cliente,
                Vendedor: data.Vendedor,
                PrecioTotalTotal:  data.PrecioTotalTotal,
                PendienteAPagarTotal:  data.PendienteAPagarTotal,
                ComisionTotal:  data.ComisionTotal,
                Facturas: data.Facturas.push({
                  Fecha: facturas[x].Fecha,
                  Vencimiento: facturas[x].Vencimiento,
                  Numero: facturas[x].Numero, 
                  Cliente: facturas[x].Cliente, 
                  Vendedor: facturas[x].Vendedor, 
                  ComisionVendedor: facturas[x].ComisionVendedor, 
                  CantidadTotal: facturas[x].CantidadTotal, 
                  PendienteAPagar: facturas[x].PendienteAPagar,
                  PrecioTotal: facturas[x].PrecioTotal, 
                  Estado: facturas[x].Estado, 
                }),
              }
            }else{
              return{
                Cliente: data.Cliente,
                PrecioTotalTotal: data.PrecioTotalTotal,
                PendienteAPagarTotal: data.PendienteAPagarTotal,
                Facturas: data.Facturas,
              }
            }
          })
        }
        let Facturas = data.map((data) => {
          return{
            Cliente :data.Cliente,
            Vendedor :data.Vendedor,
            PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
            PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
            ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
            Facturas : data.Facturas.map((data2) => {
              return{
                Fecha: data2.Fecha,
                Vencimiento: data2.Vencimiento,
                Numero: data2.Numero,
                Cliente: data2.Cliente,
                Estado: data2.Estado,
                Vendedor: data2.Vendedor,
                ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                CantidadTotal: data2.CantidadTotal,
                PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
              }
            }) 
          }
        })
        PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
        PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
        res.render('facturacion/reporte_pdf/reporte_cuentas_por_cobrar',{
          Facturas,
          PendienteAPagarGeneral,
          PrecioTotalGeneral,
        })
      }
      if(TipoFecha == "Registro"){
        let notas = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });

        facturas = notas.map((data) => {
          return{
            Fecha: data.date,
            Vencimiento: data.Vencimiento,
            Numero: data.Factura,
            Cliente: data.Cliente,
            Estado: data.Estado,
            ComisionVendedor: data.GananciasVendedor,
            Vendedor: data.Vendedor,
            CantidadTotal: data.CantidadTotal,
            PendienteAPagar: data.PendienteAPagar,
            PrecioTotal: data.PrecioTotal,
          }
        }) 
        let data = []
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        let ComisionTotal = 0
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        for(i=0; i< facturas.length; i++){
          let validacion = data.find((data) => data.Cliente == facturas[i].Cliente)
          if(!validacion){
            let Cliente = facturas[i].Cliente
            let facturasVendedor = facturas.filter((data) => data.Cliente == Cliente)
            for(z=0; z< facturasVendedor.length ;z++ ){
              PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
              PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
              ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
            }
            let factura = {
              Vendedor: facturas[i].Vendedor,
              Cliente: facturas[i].Cliente,
              ComisionTotal: ComisionTotal,
              PrecioTotalTotal :  PrecioTotalTotal,
              PendienteAPagarTotal: PendienteAPagarTotal,
              Facturas : []
            }
            PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
            PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
            PrecioTotalTotal = 0
            PendienteAPagarTotal = 0
            ComisionTotal = 0
            data.push(factura)
          }
        }
        for(x=0; x< facturas.length; x++){
          data.map((data) => {
            if(data.Cliente == facturas[x].Cliente){
              return{
                Cliente: data.Cliente,
                Vendedor: data.Vendedor,
                PrecioTotalTotal:  data.PrecioTotalTotal,
                PendienteAPagarTotal:  data.PendienteAPagarTotal,
                ComisionTotal:  data.ComisionTotal,
                Facturas: data.Facturas.push({
                  Fecha: facturas[x].Fecha,
                  Vencimiento: facturas[x].Vencimiento,
                  Numero: facturas[x].Numero, 
                  Cliente: facturas[x].Cliente, 
                  Vendedor: facturas[x].Vendedor, 
                  ComisionVendedor: facturas[x].ComisionVendedor, 
                  CantidadTotal: facturas[x].CantidadTotal, 
                  PendienteAPagar: facturas[x].PendienteAPagar,
                  PrecioTotal: facturas[x].PrecioTotal, 
                  Estado: facturas[x].Estado, 
                }),
              }
            }else{
              return{
                Cliente: data.Cliente,
                PrecioTotalTotal: data.PrecioTotalTotal,
                PendienteAPagarTotal: data.PendienteAPagarTotal,
                Facturas: data.Facturas,
              }
            }
          })
        }
        let Facturas = data.map((data) => {
          return{
            Cliente :data.Cliente,
            Vendedor :data.Vendedor,
            PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
            PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
            ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
            Facturas : data.Facturas.map((data2) => {
              return{
                Fecha: data2.Fecha,
                Vencimiento: data2.Vencimiento,
                Numero: data2.Numero,
                Cliente: data2.Cliente,
                Estado: data2.Estado,
                Vendedor: data2.Vendedor,
                ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                CantidadTotal: data2.CantidadTotal,
                PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
              }
            }) 
          }
        })
        PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
        PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
        res.render('facturacion/reporte_pdf/reporte_cuentas_por_cobrar',{
          Facturas,
          PendienteAPagarGeneral,
          PrecioTotalGeneral,
        })
      }


    } else {
      if(TipoFecha == 0){
      const clienteReporte = await facturaDB.find({ $and: [{ Cliente: Cliente }, { Estado: "Por cobrar" }] }).sort({ date: "desc" })
      const Facturas = [{
        Cliente: Cliente,
        PrecioTotalTotal: 0,
        PendienteAPagarTotal: 0,
        Facturas: [],
      }]
      let PrecioTotalTotal = 0
      let PendienteAPagarTotal = 0
      for(i=0; i< clienteReporte.length; i++){
        PendienteAPagarTotal = (+PendienteAPagarTotal + +clienteReporte[i].PendienteAPagar)
        PrecioTotalTotal = (+PrecioTotalTotal + +clienteReporte[i].PrecioTotal)
        let data = {
          Fecha: clienteReporte[i].date,
          Vencimiento: clienteReporte[i].Vencimiento,
          Numero: clienteReporte[i].Factura,
          Cliente: clienteReporte[i].Cliente,
          Estado: clienteReporte[i].Estado,
          Vendedor: clienteReporte[i].Vendedor,
          ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].ComisionVendedor),
          CantidadTotal: clienteReporte[i].CantidadTotal,
          PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PendienteAPagar),
          PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PrecioTotal),
        }
        Facturas[0].Facturas.push(data)
      }
      PendienteAPagarTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarTotal) 
      PrecioTotalTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalTotal)

      Facturas[0].PrecioTotalTotal = PrecioTotalTotal
      Facturas[0].PendienteAPagarTotal = PendienteAPagarTotal
      let PendienteAPagarGeneral = Facturas[0].PrecioTotalTotal
      let PrecioTotalGeneral = Facturas[0].PendienteAPagarTotal
        res.render("facturacion/reporte_pdf/reporte_cuentas_por_cobrar", {
          Facturas,
          PendienteAPagarGeneral:PrecioTotalGeneral,
          PrecioTotalGeneral:PendienteAPagarGeneral,
        });
      }
      if(TipoFecha == "Vencimiento"){
        let clienteReporte = await facturaDB.find({ $and: [{ Cliente: Cliente },{Estado: "Por cobrar"}, { Vencimiento :{$gte: Desde} }, { Vencimiento :{$lte: Hasta }}]}).sort({ date: "desc" });
        const Facturas = [{
          Cliente: Cliente,
          PrecioTotalTotal: 0,
          PendienteAPagarTotal: 0,
          Facturas: [],
        }]
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        for(i=0; i< clienteReporte.length; i++){
          PendienteAPagarTotal = (+PendienteAPagarTotal + +clienteReporte[i].PendienteAPagar)
          PrecioTotalTotal = (+PrecioTotalTotal + +clienteReporte[i].PrecioTotal)
          let data = {
            Fecha: clienteReporte[i].date,
            Vencimiento: clienteReporte[i].Vencimiento,
            Numero: clienteReporte[i].Factura,
            Cliente: clienteReporte[i].Cliente,
            Estado: clienteReporte[i].Estado,
            Vendedor: clienteReporte[i].Vendedor,
            ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].ComisionVendedor),
            CantidadTotal: clienteReporte[i].CantidadTotal,
            PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PendienteAPagar),
            PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PrecioTotal),
          }
          Facturas[0].Facturas.push(data)
        }
        PendienteAPagarTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarTotal) 
        PrecioTotalTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalTotal)
  
        Facturas[0].PrecioTotalTotal = PrecioTotalTotal
        Facturas[0].PendienteAPagarTotal = PendienteAPagarTotal
        let PendienteAPagarGeneral = Facturas[0].PrecioTotalTotal
        let PrecioTotalGeneral = Facturas[0].PendienteAPagarTotal
          res.render("facturacion/reporte_pdf/reporte_cuentas_por_cobrar", {
            Facturas,
            PendienteAPagarGeneral:PrecioTotalGeneral,
            PrecioTotalGeneral:PendienteAPagarGeneral,
          });
      }
      if(TipoFecha == "Registro"){
        let clienteReporte = await facturaDB.find({ $and: [{ Cliente: Cliente },{Estado: "Por cobrar"}, { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
        const Facturas = [{
          Cliente: Cliente,
          PrecioTotalTotal: 0,
          PendienteAPagarTotal: 0,
          Facturas: [],
        }]
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        for(i=0; i< clienteReporte.length; i++){
          PendienteAPagarTotal = (+PendienteAPagarTotal + +clienteReporte[i].PendienteAPagar)
          PrecioTotalTotal = (+PrecioTotalTotal + +clienteReporte[i].PrecioTotal)
          let data = {
            Fecha: clienteReporte[i].date,
            Vencimiento: clienteReporte[i].Vencimiento,
            Numero: clienteReporte[i].Factura,
            Cliente: clienteReporte[i].Cliente,
            Estado: clienteReporte[i].Estado,
            Vendedor: clienteReporte[i].Vendedor,
            ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].ComisionVendedor),
            CantidadTotal: clienteReporte[i].CantidadTotal,
            PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PendienteAPagar),
            PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PrecioTotal),
          }
          Facturas[0].Facturas.push(data)
        }
        PendienteAPagarTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarTotal) 
        PrecioTotalTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalTotal)
  
        Facturas[0].PrecioTotalTotal = PrecioTotalTotal
        Facturas[0].PendienteAPagarTotal = PendienteAPagarTotal
        let PendienteAPagarGeneral = Facturas[0].PrecioTotalTotal
        let PrecioTotalGeneral = Facturas[0].PendienteAPagarTotal
          res.render("facturacion/reporte_pdf/reporte_cuentas_por_cobrar", {
            Facturas,
            PendienteAPagarGeneral:PrecioTotalGeneral,
            PrecioTotalGeneral:PendienteAPagarGeneral,
          });
      }
    }
  }
});

router.post("/facturacion/reporte-cuentas-por-cobrar-por-vendedor", isAuthenticatedCobranza, async (req, res) => {
  const { Vendedor, Formato, TipoFecha, Desde, Hasta } = req.body;
  let fechaDesde = new Date(Desde).getTime();
  let fechaHasta = new Date(Hasta).getTime();
  const xl = require("excel4node");
  const wb = new xl.Workbook();

  const ws = wb.addWorksheet("Pendiente");

  const style = wb.createStyle({
    font: {
      color: "#000000",
      size: 11,
    },
    fill: {
      type: "pattern",
      patternType: "solid",
      bgColor: "#FFFF00",
      fgColor: "#FFFF00",
    },
  });

  ws.cell(1, 1).string("Cliente").style(style);
  ws.cell(1, 2).string("Fecha de compra").style(style);
  ws.cell(1, 3).string("Fecha de vencimiento").style(style);
  ws.cell(1, 4).string("Factura").style(style);
  ws.cell(1, 5).string("Neto").style(style);
  ws.cell(1, 6).string("Saldo").style(style);

  const styleTotal = wb.createStyle({
    font: {
      color: "#000000",
      size: 11,
    },
    fill: {
      type: "pattern",
      patternType: "solid",
      bgColor: "#EE0A1F",
      fgColor: "#EE0A1F",
    },
  });

  if (Formato == "Excel") {
    if (Vendedor == 0) {
      if(TipoFecha == 0){
        let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}]}).sort({ date: "desc" });
        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Vendedor);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar.xlsx`, res);
        }
        if(TipoFecha == "Registro"){
          let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
          let precioTotal = 0;
          let pendienteAPagar = 0;
          let fila = 2;
          for (i = 0; i < factura.length; i++) {
            columna = 1;
            ws.cell(fila, columna++).string(factura[i].Vendedor);
            ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
            ws.cell(fila, columna++).string(
              factura[i].Vencimiento.toString().substr(0, 10)
              );
              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
              
              precioTotal += factura[i].PrecioTotal;
              pendienteAPagar += factura[i].PendienteAPagar;
              fila++;
            }
            fila++;
            ws.cell(fila, 4).string("Totales").style(styleTotal);
            ws.cell(fila, 5).number(precioTotal);
            ws.cell(fila, 6).number(pendienteAPagar);
            wb.write(`Cuentas_por_cobrar.xlsx`, res);
        }
        if(TipoFecha == "Vencimiento"){
          let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Vencimiento :{$gte: Desde} }, { Vencimiento :{$lte: Hasta }}]}).sort({ date: "desc" });

          let precioTotal = 0;
          let pendienteAPagar = 0;
          
          let fila = 2;
          for (i = 0; i < factura.length; i++) {
            columna = 1;
            ws.cell(fila, columna++).string(factura[i].Vendedor);
            ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
            ws.cell(fila, columna++).string(
              factura[i].Vencimiento.toString().substr(0, 10)
              );
              ws.cell(fila, columna++).number(factura[i].Factura);
              ws.cell(fila, columna++).number(factura[i].PrecioTotal);
              ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
              
              precioTotal += factura[i].PrecioTotal;
              pendienteAPagar += factura[i].PendienteAPagar;
              fila++;
            }
            
            fila++;
            
            ws.cell(fila, 4).string("Totales").style(styleTotal);
            ws.cell(fila, 5).number(precioTotal);
            ws.cell(fila, 6).number(pendienteAPagar);
            
            wb.write(`Cuentas_por_cobrar.xlsx`, res);

        }
    } else {
      if(TipoFecha == 0){
        let factura = await facturaDB
        .find({ $and: [{ Vendedor: Vendedor }, { Estado: "Por cobrar" }] })
        .sort({ date: "desc" });
     

        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Vendedor);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar_${Vendedor}.xlsx`, res);
        }
      if(TipoFecha == "Vencimiento"){
        let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Vendedor: Vendedor },
        { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Vendedor);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar_${Vendedor}.xlsx`, res);
        }
      if(TipoFecha == "Registro"){
        let factura = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Vendedor: Vendedor },
        { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
        let precioTotal = 0;
        let pendienteAPagar = 0;
        
        let fila = 2;
        for (i = 0; i < factura.length; i++) {
          columna = 1;
          ws.cell(fila, columna++).string(factura[i].Vendedor);
          ws.cell(fila, columna++).string(factura[i].date.substr(0, 10));
          ws.cell(fila, columna++).string(
            factura[i].Vencimiento.toString().substr(0, 10)
            );
            ws.cell(fila, columna++).number(factura[i].Factura);
            ws.cell(fila, columna++).number(factura[i].PrecioTotal);
            ws.cell(fila, columna++).number(factura[i].PendienteAPagar);
            
            precioTotal += factura[i].PrecioTotal;
            pendienteAPagar += factura[i].PendienteAPagar;
            fila++;
          }
          
          fila++;
          
          ws.cell(fila, 4).string("Totales").style(styleTotal);
          ws.cell(fila, 5).number(precioTotal);
          ws.cell(fila, 6).number(pendienteAPagar);
          
          wb.write(`Cuentas_por_cobrar_${Vendedor}.xlsx`, res);
        }
      }
  } else {
    if (Vendedor == 0) {
      if(TipoFecha == 0){
        let notas = await facturaDB.find({Estado: "Por cobrar"})
        facturas = notas.map((data) => {
          return{
            Fecha: data.date,
            Vencimiento: data.Vencimiento,
            Numero: data.Factura,
            Cliente: data.Cliente,
            Estado: data.Estado,
            ComisionVendedor: data.GananciasVendedor,
            Vendedor: data.Vendedor,
            CantidadTotal: data.CantidadTotal,
            PendienteAPagar: data.PendienteAPagar,
            PrecioTotal: data.PrecioTotal,
          }
        }) 
        let data = []
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        let ComisionTotal = 0
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        for(i=0; i< facturas.length; i++){
          let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
          if(!validacion){
            let Vendedor = facturas[i].Vendedor
            let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
            for(z=0; z< facturasVendedor.length ;z++ ){
              PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
              PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
              ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
            }
            let factura = {
              Vendedor: facturas[i].Vendedor,
              Cliente: facturas[i].Cliente,
              ComisionTotal: ComisionTotal,
              PrecioTotalTotal :  PrecioTotalTotal,
              PendienteAPagarTotal: PendienteAPagarTotal,
              Facturas : []
            }
            PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
            PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
            PrecioTotalTotal = 0
            PendienteAPagarTotal = 0
            ComisionTotal = 0
            data.push(factura)
          }
        }
        for(x=0; x< facturas.length; x++){
          data.map((data) => {
            if(data.Vendedor == facturas[x].Vendedor){
              return{
                Cliente: data.Cliente,
                Vendedor: data.Vendedor,
                PrecioTotalTotal:  data.PrecioTotalTotal,
                PendienteAPagarTotal:  data.PendienteAPagarTotal,
                ComisionTotal:  data.ComisionTotal,
                Facturas: data.Facturas.push({
                  Fecha: facturas[x].Fecha,
                  Vencimiento: facturas[x].Vencimiento,
                  Numero: facturas[x].Numero, 
                  Cliente: facturas[x].Cliente, 
                  Vendedor: facturas[x].Vendedor, 
                  ComisionVendedor: facturas[x].ComisionVendedor, 
                  CantidadTotal: facturas[x].CantidadTotal, 
                  PendienteAPagar: facturas[x].PendienteAPagar,
                  PrecioTotal: facturas[x].PrecioTotal, 
                  Estado: facturas[x].Estado, 
                }),
              }
            }else{
              return{
                Vendedor: data.Vendedor,
                PrecioTotalTotal: data.PrecioTotalTotal,
                PendienteAPagarTotal: data.PendienteAPagarTotal,
                Facturas: data.Facturas,
              }
            }
          })
        }
        let Facturas = data.map((data) => {
          return{
            Cliente :data.Cliente,
            Vendedor :data.Vendedor,
            PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
            PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
            ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
            Facturas : data.Facturas.map((data2) => {
              return{
                Fecha: data2.Fecha,
                Vencimiento: data2.Vencimiento,
                Numero: data2.Numero,
                Cliente: data2.Cliente,
                Estado: data2.Estado,
                Vendedor: data2.Vendedor,
                ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                CantidadTotal: data2.CantidadTotal,
                PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
              }
            }) 
          }
        })

        PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
        PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
        res.render('facturacion/reporte_pdf/reporte_cuentas_por_cobrar',{
          Facturas,
          PendienteAPagarGeneral,
          PrecioTotalGeneral,
        })

      }
      if(TipoFecha == "Vencimiento"){
        let notas = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { Vencimiento :{$gte: Desde} }, { Vencimiento :{$lte: Hasta }}]}).sort({ date: "desc" });
        facturas = notas.map((data) => {
          return{
            Fecha: data.date,
            Vencimiento: data.Vencimiento,
            Numero: data.Factura,
            Cliente: data.Cliente,
            Estado: data.Estado,
            ComisionVendedor: data.GananciasVendedor,
            Vendedor: data.Vendedor,
            CantidadTotal: data.CantidadTotal,
            PendienteAPagar: data.PendienteAPagar,
            PrecioTotal: data.PrecioTotal,
          }
        }) 
        let data = []
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        let ComisionTotal = 0
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        for(i=0; i< facturas.length; i++){
          let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
          if(!validacion){
            let Vendedor = facturas[i].Vendedor
            let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
            for(z=0; z< facturasVendedor.length ;z++ ){
              PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
              PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
              ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
            }
            let factura = {
              Vendedor: facturas[i].Vendedor,
              Cliente: facturas[i].Cliente,
              ComisionTotal: ComisionTotal,
              PrecioTotalTotal :  PrecioTotalTotal,
              PendienteAPagarTotal: PendienteAPagarTotal,
              Facturas : []
            }
            PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
            PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
            PrecioTotalTotal = 0
            PendienteAPagarTotal = 0
            ComisionTotal = 0
            data.push(factura)
          }
        }
        for(x=0; x< facturas.length; x++){
          data.map((data) => {
            if(data.Vendedor == facturas[x].Vendedor){
              return{
                Cliente: data.Cliente,
                Vendedor: data.Vendedor,
                PrecioTotalTotal:  data.PrecioTotalTotal,
                PendienteAPagarTotal:  data.PendienteAPagarTotal,
                ComisionTotal:  data.ComisionTotal,
                Facturas: data.Facturas.push({
                  Fecha: facturas[x].Fecha,
                  Vencimiento: facturas[x].Vencimiento,
                  Numero: facturas[x].Numero, 
                  Cliente: facturas[x].Cliente, 
                  Vendedor: facturas[x].Vendedor, 
                  ComisionVendedor: facturas[x].ComisionVendedor, 
                  CantidadTotal: facturas[x].CantidadTotal, 
                  PendienteAPagar: facturas[x].PendienteAPagar,
                  PrecioTotal: facturas[x].PrecioTotal, 
                  Estado: facturas[x].Estado, 
                }),
              }
            }else{
              return{
                Vendedor: data.Vendedor,
                PrecioTotalTotal: data.PrecioTotalTotal,
                PendienteAPagarTotal: data.PendienteAPagarTotal,
                Facturas: data.Facturas,
              }
            }
          })
        }
        let Facturas = data.map((data) => {
          return{
            Cliente :data.Cliente,
            Vendedor :data.Vendedor,
            PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
            PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
            ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
            Facturas : data.Facturas.map((data2) => {
              return{
                Fecha: data2.Fecha,
                Vencimiento: data2.Vencimiento,
                Numero: data2.Numero,
                Cliente: data2.Cliente,
                Estado: data2.Estado,
                Vendedor: data2.Vendedor,
                ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                CantidadTotal: data2.CantidadTotal,
                PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
              }
            }) 
          }
        })
        PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
        PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
        res.render('facturacion/reporte_pdf/reporte_cuentas_por_cobrar',{
          Facturas,
          PendienteAPagarGeneral,
          PrecioTotalGeneral,
        })
      }
      if(TipoFecha == "Registro"){
        let notas = await facturaDB.find({ $and: [{Estado: "Por cobrar"}, { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });

        facturas = notas.map((data) => {
          return{
            Fecha: data.date,
            Vencimiento: data.Vencimiento,
            Numero: data.Factura,
            Cliente: data.Cliente,
            Estado: data.Estado,
            ComisionVendedor: data.GananciasVendedor,
            Vendedor: data.Vendedor,
            CantidadTotal: data.CantidadTotal,
            PendienteAPagar: data.PendienteAPagar,
            PrecioTotal: data.PrecioTotal,
          }
        }) 
        let data = []
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        let ComisionTotal = 0
        let PendienteAPagarGeneral = 0
        let PrecioTotalGeneral = 0
        for(i=0; i< facturas.length; i++){
          let validacion = data.find((data) => data.Vendedor == facturas[i].Vendedor)
          if(!validacion){
            let Vendedor = facturas[i].Vendedor
            let facturasVendedor = facturas.filter((data) => data.Vendedor == Vendedor)
            for(z=0; z< facturasVendedor.length ;z++ ){
              PrecioTotalTotal = (+PrecioTotalTotal + +facturasVendedor[z].PrecioTotal).toFixed(2)
              PendienteAPagarTotal = (+PendienteAPagarTotal + +facturasVendedor[z].PendienteAPagar).toFixed(2)
              ComisionTotal = (+ComisionTotal + +facturasVendedor[z].ComisionVendedor )
            }
            let factura = {
              Vendedor: facturas[i].Vendedor,
              Cliente: facturas[i].Cliente,
              ComisionTotal: ComisionTotal,
              PrecioTotalTotal :  PrecioTotalTotal,
              PendienteAPagarTotal: PendienteAPagarTotal,
              Facturas : []
            }
            PendienteAPagarGeneral = (+PendienteAPagarGeneral + +PendienteAPagarTotal).toFixed(2)
            PrecioTotalGeneral = (+PrecioTotalGeneral + +PrecioTotalTotal).toFixed(2)
            PrecioTotalTotal = 0
            PendienteAPagarTotal = 0
            ComisionTotal = 0
            data.push(factura)
          }
        }
        for(x=0; x< facturas.length; x++){
          data.map((data) => {
            if(data.Vendedor == facturas[x].Vendedor){
              return{
                Cliente: data.Cliente,
                Vendedor: data.Vendedor,
                PrecioTotalTotal:  data.PrecioTotalTotal,
                PendienteAPagarTotal:  data.PendienteAPagarTotal,
                ComisionTotal:  data.ComisionTotal,
                Facturas: data.Facturas.push({
                  Fecha: facturas[x].Fecha,
                  Vencimiento: facturas[x].Vencimiento,
                  Numero: facturas[x].Numero, 
                  Cliente: facturas[x].Cliente, 
                  Vendedor: facturas[x].Vendedor, 
                  ComisionVendedor: facturas[x].ComisionVendedor, 
                  CantidadTotal: facturas[x].CantidadTotal, 
                  PendienteAPagar: facturas[x].PendienteAPagar,
                  PrecioTotal: facturas[x].PrecioTotal, 
                  Estado: facturas[x].Estado, 
                }),
              }
            }else{
              return{
                Vendedor: data.Vendedor,
                PrecioTotalTotal: data.PrecioTotalTotal,
                PendienteAPagarTotal: data.PendienteAPagarTotal,
                Facturas: data.Facturas,
              }
            }
          })
        }
        let Facturas = data.map((data) => {
          return{
            Cliente :data.Cliente,
            Vendedor :data.Vendedor,
            PrecioTotalTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PrecioTotalTotal),
            PendienteAPagarTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.PendienteAPagarTotal),
            ComisionTotal : new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.ComisionTotal),
            Facturas : data.Facturas.map((data2) => {
              return{
                Fecha: data2.Fecha,
                Vencimiento: data2.Vencimiento,
                Numero: data2.Numero,
                Cliente: data2.Cliente,
                Estado: data2.Estado,
                Vendedor: data2.Vendedor,
                ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.ComisionVendedor),
                CantidadTotal: data2.CantidadTotal,
                PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PendienteAPagar),
                PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data2.PrecioTotal),
              }
            }) 
          }
        })
        PendienteAPagarGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarGeneral)
        PrecioTotalGeneral = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalGeneral)
        res.render('facturacion/reporte_pdf/reporte_cuentas_por_cobrar',{
          Facturas,
          PendienteAPagarGeneral,
          PrecioTotalGeneral,
        })
      }


    } else {
      if(TipoFecha == 0){
      const clienteReporte = await facturaDB.find({ $and: [{ Vendedor: Vendedor }, { Estado: "Por cobrar" }] }).sort({ date: "desc" })
      const Facturas = [{
        Vendedor: Vendedor,
        PrecioTotalTotal: 0,
        PendienteAPagarTotal: 0,
        Facturas: [],
      }]
      let PrecioTotalTotal = 0
      let PendienteAPagarTotal = 0
      for(i=0; i< clienteReporte.length; i++){
        PendienteAPagarTotal = (+PendienteAPagarTotal + +clienteReporte[i].PendienteAPagar)
        PrecioTotalTotal = (+PrecioTotalTotal + +clienteReporte[i].PrecioTotal)
        let data = {
          Fecha: clienteReporte[i].date,
          Vencimiento: clienteReporte[i].Vencimiento,
          Numero: clienteReporte[i].Factura,
          Cliente: clienteReporte[i].Cliente,
          Estado: clienteReporte[i].Estado,
          Vendedor: clienteReporte[i].Vendedor,
          ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].ComisionVendedor),
          CantidadTotal: clienteReporte[i].CantidadTotal,
          PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PendienteAPagar),
          PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PrecioTotal),
        }
        Facturas[0].Facturas.push(data)
      }
      PendienteAPagarTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarTotal) 
      PrecioTotalTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalTotal)

      Facturas[0].PrecioTotalTotal = PrecioTotalTotal
      Facturas[0].PendienteAPagarTotal = PendienteAPagarTotal
      let PendienteAPagarGeneral = Facturas[0].PrecioTotalTotal
      let PrecioTotalGeneral = Facturas[0].PendienteAPagarTotal
        res.render("facturacion/reporte_pdf/reporte_cuentas_por_cobrar", {
          Facturas,
          PendienteAPagarGeneral:PrecioTotalGeneral,
          PrecioTotalGeneral:PendienteAPagarGeneral,
        });
      }
      if(TipoFecha == "Vencimiento"){
        let clienteReporte = await facturaDB.find({ $and: [{ Vendedor: Vendedor },{Estado: "Por cobrar"}, { Vencimiento :{$gte: Desde} }, { Vencimiento :{$lte: Hasta }}]}).sort({ date: "desc" });
        const Facturas = [{
          Vendedor: Vendedor,
          PrecioTotalTotal: 0,
          PendienteAPagarTotal: 0,
          Facturas: [],
        }]
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        for(i=0; i< clienteReporte.length; i++){
          PendienteAPagarTotal = (+PendienteAPagarTotal + +clienteReporte[i].PendienteAPagar)
          PrecioTotalTotal = (+PrecioTotalTotal + +clienteReporte[i].PrecioTotal)
          let data = {
            Fecha: clienteReporte[i].date,
            Vencimiento: clienteReporte[i].Vencimiento,
            Numero: clienteReporte[i].Factura,
            Cliente: clienteReporte[i].Cliente,
            Estado: clienteReporte[i].Estado,
            Vendedor: clienteReporte[i].Vendedor,
            ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].ComisionVendedor),
            CantidadTotal: clienteReporte[i].CantidadTotal,
            PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PendienteAPagar),
            PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PrecioTotal),
          }
          Facturas[0].Facturas.push(data)
        }
        PendienteAPagarTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarTotal) 
        PrecioTotalTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalTotal)
  
        Facturas[0].PrecioTotalTotal = PrecioTotalTotal
        Facturas[0].PendienteAPagarTotal = PendienteAPagarTotal
        let PendienteAPagarGeneral = Facturas[0].PrecioTotalTotal
        let PrecioTotalGeneral = Facturas[0].PendienteAPagarTotal
          res.render("facturacion/reporte_pdf/reporte_cuentas_por_cobrar", {
            Facturas,
            PendienteAPagarGeneral:PrecioTotalGeneral,
            PrecioTotalGeneral:PendienteAPagarGeneral,
          });
      }
      if(TipoFecha == "Registro"){
        let clienteReporte = await facturaDB.find({ $and: [{ Vendedor: Vendedor },{Estado: "Por cobrar"}, { date :{$gte: Desde} }, { date :{$lte: Hasta }}]}).sort({ date: "desc" });
        const Facturas = [{
          Vendedor: Vendedor,
          PrecioTotalTotal: 0,
          PendienteAPagarTotal: 0,
          Facturas: [],
        }]
        let PrecioTotalTotal = 0
        let PendienteAPagarTotal = 0
        for(i=0; i< clienteReporte.length; i++){
          PendienteAPagarTotal = (+PendienteAPagarTotal + +clienteReporte[i].PendienteAPagar)
          PrecioTotalTotal = (+PrecioTotalTotal + +clienteReporte[i].PrecioTotal)
          let data = {
            Fecha: clienteReporte[i].date,
            Vencimiento: clienteReporte[i].Vencimiento,
            Numero: clienteReporte[i].Factura,
            Cliente: clienteReporte[i].Cliente,
            Estado: clienteReporte[i].Estado,
            Vendedor: clienteReporte[i].Vendedor,
            ComisionVendedor: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].ComisionVendedor),
            CantidadTotal: clienteReporte[i].CantidadTotal,
            PendienteAPagar: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PendienteAPagar),
            PrecioTotal: new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(clienteReporte[i].PrecioTotal),
          }
          Facturas[0].Facturas.push(data)
        }
        PendienteAPagarTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PendienteAPagarTotal) 
        PrecioTotalTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotalTotal)
  
        Facturas[0].PrecioTotalTotal = PrecioTotalTotal
        Facturas[0].PendienteAPagarTotal = PendienteAPagarTotal
        let PendienteAPagarGeneral = Facturas[0].PrecioTotalTotal
        let PrecioTotalGeneral = Facturas[0].PendienteAPagarTotal
          res.render("facturacion/reporte_pdf/reporte_cuentas_por_cobrar", {
            Facturas,
            PendienteAPagarGeneral:PrecioTotalGeneral,
            PrecioTotalGeneral:PendienteAPagarGeneral,
          });
      }
    }
  }
});

//reportes precios

router.get("/facturacion/reportes-precio", isAuthenticatedCliente, async (req, res) => {
  res.render("facturacion/cliente/reporte_precios.hbs");
});
//lista de precios
router.post( "/facturacion/reporte-precios",isAuthenticatedCliente,
  async (req, res) => {
    let { Formato, Cantidad, Costos, Producto, CantidadMayorACero } = req.body;
    const xl = require("excel4node");

    const wb = new xl.Workbook();

    const ws = wb.addWorksheet("Stock Thomson");

    const style = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#FFFF00",
        fgColor: "#FFFF00",
      },
    });

    const styleTotal = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#EE0A1F",
        fgColor: "#EE0A1F",
      },
    });

    //empieza excel
    if (Formato == "Excel") {
      if (Cantidad == 1) {
        if (CantidadMayorACero == "1") {
          if (Producto == "AMORTIGUADOR") {
            let stock = await stockDB
              .find({
                $and: [
                  { CantidadTotal: { $gt: 0 } },
                  { TipoProducto: "AMORTIGUADOR" },
                ],
              })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "BASE DE AMORTIGUADOR") {
            let stock = await stockDB
              .find({
                $and: [{ CantidadTotal: { $gt: 0 } }, { TipoProducto: "BASE DE AMORTIGUADOR" }],
              })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "GUARDAPOLVO") {
            let stock = await stockDB
              .find({
                $and: [
                  { CantidadTotal: { $gt: 0 } },
                  { TipoProducto: "GUARDAPOLVO" },
                ],
              })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "TODOS") {
            let stock = await stockDB
              .find({ CantidadTotal: { $gt: 0 }})
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
        } else {
          if (Producto == "AMORTIGUADOR") {
            let stock = await stockDB
              .find({ TipoProducto: "AMORTIGUADOR" })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "BASE DE AMORTIGUADOR") {
            let stock = await stockDB
              .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "GUARDAPOLVO") {
            let stock = await stockDB
              .find({ TipoProducto: "GUARDAPOLVO" })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "TODOS") {
            let stock = await stockDB.find().sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
        }
      } else {
        if (CantidadMayorACero == "1") {
          if (Producto == "AMORTIGUADOR") {
            let stock = await stockDB
              .find({
                $and: [
                  { CantidadTotal: { $gt: 0 } },
                  { TipoProducto: "AMORTIGUADOR" },
                ],
              })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "BASE DE AMORTIGUADOR") {
            let stock = await stockDB
              .find({
                $and: [{ CantidadTotal: { $gt: 0 } }, { TipoProducto: "BASE DE AMORTIGUADOR" }],
              })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "GUARDAPOLVO") {
            let stock = await stockDB
              .find({
                $and: [
                  { CantidadTotal: { $gt: 0 } },
                  { TipoProducto: "GUARDAPOLVO" },
                ],
              })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "TODOS") {
            let stock = await stockDB
              .find({ CantidadTotal: { $gt: 0 } })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Cantidad").style(style);
              ws.cell(1, 7).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(cantidad);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
        } else {
          if (Producto == "AMORTIGUADOR") {
            let stock = await stockDB
              .find({ TipoProducto: "AMORTIGUADOR" })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "BASE DE AMORTIGUADOR") {
            let stock = await stockDB
              .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "GUARDAPOLVO") {
            let stock = await stockDB
              .find({ TipoProducto: "GUARDAPOLVO" })
              .sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
          if (Producto == "TODOS") {
            let stock = await stockDB.find().sort({TipoProducto: 1,  Modelo: 1 });

            if (Costos == "GranMayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoGranMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Mayor") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoMayor);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
            if (Costos == "Detal") {
              ws.cell(1, 1).string("Codigo Thomson").style(style);
              ws.cell(1, 2).string("Codigo homólogo").style(style);
              ws.cell(1, 3).string("Producto").style(style);
              ws.cell(1, 4).string("Descripción").style(style);
              ws.cell(1, 5).string("Posición").style(style);
              ws.cell(1, 6).string("Precio").style(style);

              let fila = 2;
              for (i = 0; i < stock.length; i++) {
                columna = 1;
                let cantidad = 0;
                if (stock[i].CantidadTotal == 0) {
                  cantidad += +stock[i].CantidadTotal;
                } else {
                  cantidad += +stock[i].CantidadTotal;
                }
                let Descripcion = "";
                for (x = 0; x < stock[i].Vehiculo.length; x++) {
                  if (
                    stock[i].Vehiculo[x].Modelo ==
                    stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
                  ) {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
                  } else {
                    Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
                  }
                }
                ws.cell(fila, columna++).string(stock[i].CodigoT);
                ws.cell(fila, columna++).string(stock[i].CodigoG);
                ws.cell(fila, columna++).string(stock[i].TipoProducto);
                ws.cell(fila, columna++).string(Descripcion);
                ws.cell(fila, columna++).string(stock[i].Posicion);
                ws.cell(fila, columna++).number(stock[i].CostoDetal);

                fila++;
              }

              wb.write("Lista_precios.xlsx", res);
            }
          }
        }
      }
    }
    //empieza pdf
    if (Formato == "PDF") {
      if (Cantidad == 1) {
        if (CantidadMayorACero == 1) {
          if (Producto == "AMORTIGUADOR") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "BASE DE AMORTIGUADOR") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "BASE DE AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "BASE DE AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "BASE DE AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        Vehiculo: document.Vehiculo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "GUARDAPOLVO") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "GUARDAPOLVO" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        Vehiculo: document.Vehiculo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "GUARDAPOLVO" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "GUARDAPOLVO" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        Vehiculo: document.Vehiculo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "TODOS") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({ CantidadTotal: { $gt: 0 } })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });

              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({ CantidadTotal: { $gt: 0 } })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });

              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({ CantidadTotal: { $gt: 0 } })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });

              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
              });
            }
          }
        } else {
          if (Producto == "AMORTIGUADOR") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({ TipoProducto: "AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({ TipoProducto: "AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({ TipoProducto: "AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "BASE DE AMORTIGUADOR") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        Vehiculo: document.Vehiculo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "GUARDAPOLVO") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({ TipoProducto: "GUARDAPOLVO" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({ TipoProducto: "Gaurdapolvo" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({ TipoProducto: "GUARDAPOLVO" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        Vehiculo: document.Vehiculo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "TODOS") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find()
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });

              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find()
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        Vehiculo: document.Vehiculo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });

              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find()
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        Vehiculo: document.Vehiculo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });

              res.render("facturacion/reporte_pdf/reporte_precios_cantidad", {
                Stock,
              });
            }
          }
        }
      } else {
        if (CantidadMayorACero == 1) {
          if (Producto == "AMORTIGUADOR") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "BASE DE AMORTIGUADOR") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "BASE DE AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "BASE DE AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "BASE DE AMORTIGUADOR" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "GUARDAPOLVO") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "GUARDAPOLVO" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        Vehiculo: document.Vehiculo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "GUARDAPOLVO" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Vehiculo: document.Vehiculo,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({
                  $and: [
                    { CantidadTotal: { $gt: 0 } },
                    { TipoProducto: "GUARDAPOLVO" },
                  ],
                })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Vehiculo: document.Vehiculo,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "TODOS") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({ CantidadTotal: { $gt: 0 } })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({ CantidadTotal: { $gt: 0 } })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });

              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({ CantidadTotal: { $gt: 0 } })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });

              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
              });
            }
          }
        } else {
          if (Producto == "AMORTIGUADOR") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({ TipoProducto: "AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({ TipoProducto: "AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({ TipoProducto: "AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Amortiguadores";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "BASE DE AMORTIGUADOR") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({ TipoProducto: "BASE DE AMORTIGUADOR" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Bases de amortiguador";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "GUARDAPOLVO") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find({ TipoProducto: "GUARDAPOLVO" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find({ TipoProducto: "Gaurdapolvo" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find({ TipoProducto: "GUARDAPOLVO" })
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              let Titulo = "Guardapolvos";
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
                Titulo,
              });
            }
          }
          if (Producto == "TODOS") {
            if (Costos == "GranMayor") {
              let stock = await stockDB
                .find()
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoGranMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });
              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
              });
            }
            if (Costos == "Mayor") {
              let stock = await stockDB
                .find()
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        Vehiculo: document.Vehiculo,
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoMayor,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });

              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
              });
            }
            if (Costos == "Detal") {
              let stock = await stockDB
                .find()
                .sort({TipoProducto: 1,  Modelo: 1 })
                .then((document) => {
                  const contex = {
                    stocks: document.map((document) => {
                      return {
                        CodigoT: document.CodigoT,
                        CodigoG: document.CodigoG,
                        Modelo: document.Modelo,
                        Vehiculo: document.Vehiculo,
                        CantidadTotal: document.CantidadTotal,
                        Posicion: (document.Posicion).toUpperCase(),
                        TipoProducto: (document.TipoProducto).toUpperCase(),
                        Precio: document.CostoDetal,
                      };
                    }),
                  };
                  for (i = 0; i < contex.stocks.length; i++) {
                    let Descripcion = "";
                    for (x = 0; x < contex.stocks[i].Vehiculo.length; x++) {
                      if (
                        contex.stocks[i].Vehiculo[x].Modelo ==
                        contex.stocks[i].Vehiculo[
                          contex.stocks[i].Vehiculo.length - 1
                        ].Modelo
                      ) {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}`;
                      } else {
                        Descripcion += `${contex.stocks[i].Vehiculo[x].Marca} ${contex.stocks[i].Vehiculo[x].Modelo} ${contex.stocks[i].Vehiculo[x].Desde}-${contex.stocks[i].Vehiculo[x].Hasta}, `;
                      }
                    }
                    contex.stocks[i].Descripcion = Descripcion;
                  }
                  Stock = contex.stocks;
                });

              res.render("facturacion/reporte_pdf/reporte_precios", {
                Stock,
              });
            }
          }
        }
      }
    }
  }
);


//reporte de articulos

router.post('/reporte-articulos', isAuthenticatedInventario, async (req, res) => {
  let {Codigo, Formato} = req.body

  const xl = require("excel4node");

  const wb = new xl.Workbook();

  const ws = wb.addWorksheet("Reporte de articulos");

  const style = wb.createStyle({
    font: {
      color: "#000000",
      size: 11,
    },
    fill: {
      type: "pattern",
      patternType: "solid",
      bgColor: "#FFFF00",
      fgColor: "#FFFF00",
    },
  });
  let stock = await stockDB.find({CantidadVendida : {$gt: 0}}).sort({"CantidadVendida": -1 })

  if(Formato == "Excel"){
    if(Codigo == 0){
  
      ws.cell(1, 1).string("Código").style(style);
      ws.cell(1, 2).string("Tipo de producto").style(style);
      ws.cell(1, 3).string("Descripción").style(style);
      ws.cell(1, 4).string("Cantidad vendida").style(style);
  
      let fila = 2;
      let cantidadTotal = 0
      for (i = 0; i < stock.length; i++) {
        cantidadTotal += stock[i].CantidadVendida
          let Descripcion = "";
          for (x = 0; x < stock[i].Vehiculo.length; x++) {
            if (
              stock[i].Vehiculo[x].Modelo ==
              stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
            ) {
              Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
            } else {
              Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
            }
          }
        columna = 1
        ws.cell(fila, columna++).string(stock[i].CodigoT);
        ws.cell(fila, columna++).string(stock[i].TipoProducto);
        ws.cell(fila, columna++).string(Descripcion);
        ws.cell(fila, columna++).number(stock[i].CantidadVendida);
  
        fila++;
      }
      ws.cell(fila, 3).string("Total:").style(style)
      ws.cell(fila, 4).number(cantidadTotal).style(style)

      wb.write("Reporte de articulos.xlsx", res);
    }else{
      stock = stock.find((data) => data.CodigoT == Codigo)
      let Descripcion = ""
      for (x = 0; x < stock.Vehiculo.length; x++) {
        if (
          stock.Vehiculo[x].Modelo ==
          stock.Vehiculo[stock.Vehiculo.length - 1].Modelo
        ) {
          Descripcion += `${stock.Vehiculo[x].Marca} ${stock.Vehiculo[x].Modelo} ${stock.Vehiculo[x].Desde}-${stock.Vehiculo[x].Hasta}`;
        } else {
          Descripcion += `${stock.Vehiculo[x].Marca} ${stock.Vehiculo[x].Modelo} ${stock.Vehiculo[x].Desde}-${stock.Vehiculo[x].Hasta}, `;
        }
      }



      ws.cell(1, 1).string("Código").style(style);
      ws.cell(1, 2).string("Tipo de producto").style(style);
      ws.cell(1, 3).string("Descripción").style(style);
      ws.cell(1, 4).string("Cantidad vendida").style(style);
      ws.cell(2, 1).string(stock.CodigoT);
      ws.cell(2, 2).string(stock.TipoProducto);
      ws.cell(2, 3).string(Descripcion);
      ws.cell(2, 4).number(stock.CantidadVendida);
      wb.write("Reporte de articulos.xlsx", res);
      
    }
  }else{
    if(Codigo == 0){
      let Titulo = "Reporte de articulos"
      let cantidadTotal = 0
      for(i=0; i< stock.length; i++){
        cantidadTotal += stock[i].CantidadVendida
        let Descripcion = ""
        for (x = 0; x < stock[i].Vehiculo.length; x++) {
          if (
            stock[i].Vehiculo[x].Modelo ==
            stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
            ) {
            Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
          } else {
            Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
          }
        }
        stock[i].Descripcion = Descripcion
      }
      stock = stock.map((data) => {
        return{
          CodigoT: data.CodigoT,
          CantidadVendida: data.CantidadVendida,
          TipoProducto: data.TipoProducto,
          Vehiculo: data.Vehiculo,
          Descripcion: data.Descripcion,
          Posicion: data.Posicion,
        }
      })
      res.render('facturacion/reporte_pdf/reporte-articulos',{
        Titulo,
        stock,
        cantidadTotal
      })


      
    }else{
      let Titulo = `Reporte de ${Codigo}`
      let producto = stock.find((data) => data.CodigoT == Codigo)
      let cantidadTotal = 0
      stock = [producto]
      stock = stock.map((data) => {
        return{
          CodigoT: data.CodigoT,
          CantidadVendida: data.CantidadVendida,
          TipoProducto: data.TipoProducto,
          Vehiculo: data.Vehiculo,
          Posicion: data.Posicion,

        }
      })
      for(i=0; i< stock.length; i++){
        cantidadTotal += stock[i].CantidadVendida
        let Descripcion = ""
        for (x = 0; x < stock[i].Vehiculo.length; x++) {
          if (
            stock[i].Vehiculo[x].Modelo == stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
          ) {
            Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
          } else {
            Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
          }
        }
        stock[i].Descripcion = Descripcion
      }
      
      res.render('facturacion/reporte_pdf/reporte-articulos',{
        Titulo,
        stock,
        cantidadTotal
      })
    }
  }


})

//ruta para reporte de stock por proveedor

router.post('/reporte-de-proveedores',  isAuthenticatedProveedor, async (req, res) => {
    let {Cantidad, Proveedor, Formato } = req.body

      
    const xl = require("excel4node");

    const wb = new xl.Workbook();
  
    const ws = wb.addWorksheet("Reporte de stock por proveedor");
  
    const style = wb.createStyle({
      font: {
        color: "#000000",
        size: 11,
      },
      fill: {
        type: "pattern",
        patternType: "solid",
        bgColor: "#FFFF00",
        fgColor: "#FFFF00",
      },
    });
      ws.cell(1, 1).string("Código T").style(style);
      ws.cell(1, 2).string("Tipo de producto").style(style);
      ws.cell(1, 3).string("Descripción").style(style);
      ws.cell(1, 4).string("Posición").style(style);
      ws.cell(1, 5).string("Cantidad total").style(style);
      ws.cell(1, 6).string("Precio FOB").style(style);
      ws.cell(1, 7).string("Precio FOB Total").style(style);

    if(Formato == "PDF"){
      if(Cantidad == "Todas"){
        let stock = await stockDB.find({Proveedor: Proveedor}).sort({TipoProducto:1, Modelo: 1})
        stock = stock.map((data) =>{
          return{
            date: data.date,
            Timestamp: data.Timestamp,
            FechaUltimoIngreso: data.FechaUltimoIngreso,
            Vehiculo: data.Vehiculo,
            TipoProducto: data.TipoProducto,
            Nombre: data.Nombre,
            Proveedor: data.Proveedor,
            CodigoT: data.CodigoT,
            CodigoG: data.CodigoG,
            CantidadTotal: data.CantidadTotal,
            CantidadVendida: data.CantidadVendida,
            CantidadTransito: data.CantidadTransito,
            CantidadProduccion: data.CantidadProduccion,
            CostoFOB: data.CostoFOB,
            CostoTotalStock: data.CostoTotalStock,
            Costo: data.Costo,
            CostoFOBTotal: data.CostoFOBTotal,
            CostoTotal: data.CostoTotal,
            CostoGranMayorTotal: data.CostoGranMayorTotal,
            CostoMayorTotal: data.CostoMayorTotal,
            CostoDetalTotal: data.CostoDetalTotal,
            CostoGranMayor: data.CostoGranMayor,
            CostoMayor: data.CostoMayor,
            CostoDetal: data.CostoDetal,
            User: data.User,
            TipoVehiculo: data.TipoVehiculo,
            Modelo: data.Modelo,
            Familia: data.Familia,
            Posicion: data.Posicion,
            Año: data.Año,
            HistorialMovimiento: data.HistorialMovimiento,
          }
        }) 
        let CantidadTotal = 0
        let PrecioTotal = 0
        for(i=0; i< stock.length; i++){
          CantidadTotal = +CantidadTotal + +stock[i].CantidadTotal
          PrecioTotal = +PrecioTotal + stock[i].CostoFOBTotal
          let Descripcion = ""
          for (x = 0; x < stock[i].Vehiculo.length; x++) {
            if (
              stock[i].Vehiculo[x].Modelo == stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
            ) {
              Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
            } else {
              Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
            }
          }
          stock[i].Descripcion = Descripcion
        }
        PrecioTotal = PrecioTotal.toFixed(2)
        PrecioTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotal)

        res.render('facturacion/reporte_pdf/reporte-proveedores-pdf',{
          stock,
          CantidadTotal,
          PrecioTotal,
          Proveedor
        })
  

      }
      if(Cantidad == "Stock"){
        let stock = await stockDB.find({$and : [{Proveedor: Proveedor},{CantidadTotal:{$gt : 0}}]}).sort({TipoProducto:1, Modelo: 1})
        stock = stock.map((data) =>{
          return{
            date: data.date,
            Timestamp: data.Timestamp,
            FechaUltimoIngreso: data.FechaUltimoIngreso,
            Vehiculo: data.Vehiculo,
            TipoProducto: data.TipoProducto,
            Nombre: data.Nombre,
            Proveedor: data.Proveedor,
            CodigoT: data.CodigoT,
            CodigoG: data.CodigoG,
            CantidadTotal: data.CantidadTotal,
            CantidadVendida: data.CantidadVendida,
            CantidadTransito: data.CantidadTransito,
            CantidadProduccion: data.CantidadProduccion,
            CostoFOB: data.CostoFOB,
            CostoTotalStock: data.CostoTotalStock,
            Costo: data.Costo,
            CostoFOBTotal: data.CostoFOBTotal,
            CostoTotal: data.CostoTotal,
            CostoGranMayorTotal: data.CostoGranMayorTotal,
            CostoMayorTotal: data.CostoMayorTotal,
            CostoDetalTotal: data.CostoDetalTotal,
            CostoGranMayor: data.CostoGranMayor,
            CostoMayor: data.CostoMayor,
            CostoDetal: data.CostoDetal,
            User: data.User,
            TipoVehiculo: data.TipoVehiculo,
            Modelo: data.Modelo,
            Familia: data.Familia,
            Posicion: data.Posicion,
            Año: data.Año,
            HistorialMovimiento: data.HistorialMovimiento,
          }
          })
          let CantidadTotal = 0
          let PrecioTotal = 0
          for(i=0; i< stock.length; i++){
            CantidadTotal = +CantidadTotal + +stock[i].CantidadTotal
            PrecioTotal = +PrecioTotal + stock[i].CostoFOBTotal
            let Descripcion = ""
            for (x = 0; x < stock[i].Vehiculo.length; x++) {
              if (
                stock[i].Vehiculo[x].Modelo == stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
              }
            }
            stock[i].Descripcion = Descripcion
          }
          PrecioTotal = PrecioTotal.toFixed(2)
          PrecioTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotal)

          
          res.render('facturacion/reporte_pdf/reporte-proveedores-pdf',{
            stock,
            CantidadTotal,
            PrecioTotal,
            Proveedor
          })

      }
      if(Cantidad == "Sin stock"){
        let stock = await stockDB.find({$and : [{Proveedor: Proveedor},{CantidadTotal: 0}]}).sort({TipoProducto:1, Modelo: 1})
        stock = stock.map((data) =>{
          return{
            date: data.date,
            Timestamp: data.Timestamp,
            FechaUltimoIngreso: data.FechaUltimoIngreso,
            Vehiculo: data.Vehiculo,
            TipoProducto: data.TipoProducto,
            Nombre: data.Nombre,
            Proveedor: data.Proveedor,
            CodigoT: data.CodigoT,
            CodigoG: data.CodigoG,
            CantidadTotal: data.CantidadTotal,
            CantidadVendida: data.CantidadVendida,
            CantidadTransito: data.CantidadTransito,
            CantidadProduccion: data.CantidadProduccion,
            CostoFOB: data.CostoFOB,
            CostoTotalStock: data.CostoTotalStock,
            Costo: data.Costo,
            CostoFOBTotal: data.CostoFOBTotal,
            CostoTotal: data.CostoTotal,
            CostoGranMayorTotal: data.CostoGranMayorTotal,
            CostoMayorTotal: data.CostoMayorTotal,
            CostoDetalTotal: data.CostoDetalTotal,
            CostoGranMayor: data.CostoGranMayor,
            CostoMayor: data.CostoMayor,
            CostoDetal: data.CostoDetal,
            User: data.User,
            TipoVehiculo: data.TipoVehiculo,
            Modelo: data.Modelo,
            Familia: data.Familia,
            Posicion: data.Posicion,
            Año: data.Año,
            HistorialMovimiento: data.HistorialMovimiento,
          }
          })
          let CantidadTotal = 0
          let PrecioTotal = 0
          for(i=0; i< stock.length; i++){
            CantidadTotal = +CantidadTotal + +stock[i].CantidadTotal
            PrecioTotal = +PrecioTotal + stock[i].CostoFOBTotal
            let Descripcion = ""
            for (x = 0; x < stock[i].Vehiculo.length; x++) {
              if (
                stock[i].Vehiculo[x].Modelo == stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
              }
            }
            stock[i].Descripcion = Descripcion
          }
          PrecioTotal = PrecioTotal.toFixed(2)
          PrecioTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotal)
          res.render('facturacion/reporte_pdf/reporte-proveedores-pdf',{
            stock,
            CantidadTotal,
            PrecioTotal,
            Proveedor
          })

      }
    }else{
      if(Cantidad == "Todas"){
        let stock = await stockDB.find({Proveedor: Proveedor}).sort({TipoProducto:1, Modelo: 1})
        let CantidadTotal = 0
          let PrecioTotal = 0
          for(i=0; i< stock.length; i++){
            CantidadTotal = +CantidadTotal + +stock[i].CantidadTotal
            PrecioTotal = +PrecioTotal + stock[i].CostoFOBTotal
            let Descripcion = ""
            for (x = 0; x < stock[i].Vehiculo.length; x++) {
              if (
                stock[i].Vehiculo[x].Modelo == stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
              }
            }
            stock[i].Descripcion = Descripcion
          }
          PrecioTotal = PrecioTotal.toFixed(2)
          PrecioTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotal)
          let fila = 2
          for(i=0;i< stock.length; i++){
            columna = 1
  
            ws.cell(fila, columna++).string(stock[i].CodigoT)
            ws.cell(fila, columna++).string(stock[i].TipoProducto)
            ws.cell(fila, columna++).string(stock[i].Descripcion)
            ws.cell(fila, columna++).string(stock[i].Posicion)
            ws.cell(fila, columna++).number(stock[i].CantidadTotal)
            ws.cell(fila, columna++).number(stock[i].CostoFOB)
            ws.cell(fila, columna++).number(stock[i].CostoFOBTotal)
            
            fila++
          }
          
          ws.cell(fila, 4).string("Totales:")
          ws.cell(fila, 5).number(CantidadTotal)
          ws.cell(fila, 7).string(PrecioTotal)
          wb.write("Reporte de proveedor.xlsx", res);



      }
      if(Cantidad == "Stock"){
        let stock = await stockDB.find({$and : [{Proveedor: Proveedor},{CantidadTotal:{$gt : 0}}]}).sort({TipoProducto:1, Modelo: 1})
        let CantidadTotal = 0
          let PrecioTotal = 0
          for(i=0; i< stock.length; i++){
            CantidadTotal = +CantidadTotal + +stock[i].CantidadTotal
            PrecioTotal = +PrecioTotal + stock[i].CostoFOBTotal
            let Descripcion = ""
            for (x = 0; x < stock[i].Vehiculo.length; x++) {
              if (
                stock[i].Vehiculo[x].Modelo == stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
              }
            }
            stock[i].Descripcion = Descripcion
          }
          PrecioTotal = PrecioTotal.toFixed(2)
          PrecioTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotal)

          let fila = 2
          for(i=0;i< stock.length; i++){
            columna = 1
  
            ws.cell(fila, columna++).string(stock[i].CodigoT)
            ws.cell(fila, columna++).string(stock[i].TipoProducto)
            ws.cell(fila, columna++).string(stock[i].Descripcion)
            ws.cell(fila, columna++).string(stock[i].Posicion)
            ws.cell(fila, columna++).number(stock[i].CantidadTotal)
            ws.cell(fila, columna++).number(stock[i].CostoFOB)
            ws.cell(fila, columna++).number(stock[i].CostoFOBTotal)
            
            fila++
          }
          
          ws.cell(fila, 4).string("Totales:")
          ws.cell(fila, 5).number(CantidadTotal)
          ws.cell(fila, 7).string(PrecioTotal)
          wb.write("Reporte de proveedor.xlsx", res);
      }
      if(Cantidad == "Sin stock"){
        let stock = await stockDB.find({$and : [{Proveedor: Proveedor},{CantidadTotal: 0}]}).sort({TipoProducto:1, Modelo: 1})
        let CantidadTotal = 0
          let PrecioTotal = 0
          for(i=0; i< stock.length; i++){
            CantidadTotal = +CantidadTotal + +stock[i].CantidadTotal
            PrecioTotal = +PrecioTotal + stock[i].CostoFOBTotal
            let Descripcion = ""
            for (x = 0; x < stock[i].Vehiculo.length; x++) {
              if (
                stock[i].Vehiculo[x].Modelo == stock[i].Vehiculo[stock[i].Vehiculo.length - 1].Modelo
              ) {
                Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}`;
              } else {
                Descripcion += `${stock[i].Vehiculo[x].Marca} ${stock[i].Vehiculo[x].Modelo} ${stock[i].Vehiculo[x].Desde}-${stock[i].Vehiculo[x].Hasta}, `;
              }
            }
            stock[i].Descripcion = Descripcion
          }
          PrecioTotal = PrecioTotal.toFixed(2)
          PrecioTotal = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(PrecioTotal)
          let fila = 2
          for(i=0;i< stock.length; i++){
            columna = 1
  
            ws.cell(fila, columna++).string(stock[i].CodigoT)
            ws.cell(fila, columna++).string(stock[i].TipoProducto)
            ws.cell(fila, columna++).string(stock[i].Descripcion)
            ws.cell(fila, columna++).string(stock[i].Posicion)
            ws.cell(fila, columna++).number(stock[i].CantidadTotal)
            ws.cell(fila, columna++).number(stock[i].CostoFOB)
            ws.cell(fila, columna++).number(stock[i].CostoFOBTotal)
            
            fila++
          }
          
          ws.cell(fila, 4).string("Totales:")
          ws.cell(fila, 5).number(CantidadTotal)
          ws.cell(fila, 7).string(PrecioTotal)
          wb.write("Reporte de proveedor.xlsx", res);


      }
    }
})



module.exports = router;
